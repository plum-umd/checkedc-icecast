avl.c:105:46: error: cannot guarantee operand of cast to checked function pointer type '_Ptr<int (void *)>' is a function pointer
    avl_tree_free_helper (tree->root->right, free_key_fun);
                                             ^~~~~~~~~~~~
avl.c:1030:20: error: argument does not meet declared bounds for 1st parameter
  return snprintf (buffer, AVL_KEY_PRINTER_BUFLEN, "%p", key);
                   ^~~~~~
avl.c:1030:20: note: source bounds are an empty range
avl.c:1030:20: note: destination upper bound is above source upper bound
avl.c:1030:20: note: (expanded) expected argument bounds are 'bounds((char *)buffer, (char *)buffer + (size_t)(256) == 0 ? 0 : (size_t)(256) - 1)'
avl.c:1030:20: note: (expanded) inferred bounds are 'bounds(buffer, buffer + 0)'
  return snprintf (buffer, AVL_KEY_PRINTER_BUFLEN, "%p", key);
                   ^~~~~~
avl.c:1105:17: error: passing '_Ptr<int (_Nt_array_ptr<char> : count(0), void *)>' to parameter of incompatible type '_Ptr<int (_Array_ptr<char>, void *)>': type mismatch at 1st parameter ('_Nt_array_ptr<char>' vs '_Array_ptr<char>')
    print_node (key_printer, tree->root->right, &top);
                ^~~~~~~~~~~
avl.c:1066:62: note: passing argument to parameter 'key_printer' here
static void print_node(_Ptr<int (_Array_ptr<char> , void* )> key_printer, avl_node *node : itype(_Ptr<avl_node> ) , _Ptr<link_node> link)
                                                             ^
3 errors generated.
make[3]: [libiceavl_la-avl.lo] Error 1 (ignored)
libtool:   error: 'libiceavl_la-avl.lo' is not a valid libtool object
make[3]: [libiceavl.la] Error 1 (ignored)
sock.c:113:30: error: passing '_Ptr<char>' to parameter of incompatible type 'char *'
    if (resolver_getip(temp, buff, len))
                             ^~~~
./resolver.h:52:47: note: passing argument to parameter 'buff' here
char * resolver_getip(const char *name, char *buff, int len);
                                              ^
sock.c:381:36: error: passing '_Nt_array_ptr<const char>' to parameter of incompatible type 'const void *'
    return (sock_write_bytes(sock, buff, strlen(buff)) > 0);
                                   ^~~~
sock.c:360:44: note: passing argument to parameter 'buff' here
int sock_write_bytes(int sock, const void *buff, size_t len)
                                           ^
sock.c:396:32: error: passing '_Ptr<const char>' to parameter of incompatible type 'const char *'
    rc = sock_write_fmt (sock, fmt, ap);
                               ^~~
./sock.h:133:42: note: passing argument to parameter 'fmt' here
int sock_write_fmt(int sock, const char *fmt, va_list ap);
                                         ^
sock.c:433:24: error: automatic variable 'buffer' with bounds must have initializer
   _Nt_array_ptr<char> buffer;
                       ^
sock.c:447:41: error: passing '_Nt_array_ptr<char>' to parameter of incompatible type 'const void *'
            rc = sock_write_bytes(sock, buff, (size_t)len);
                                        ^~~~
sock.c:360:44: note: passing argument to parameter 'buff' here
int sock_write_bytes(int sock, const void *buff, size_t len)
                                           ^
sock.c:451:18: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'void *'
            buff = malloc (++len);
                 ^ ~~~~~~~~~~~~~~
sock.c:456:50: error: passing '_Nt_array_ptr<char>' to parameter of incompatible type 'const void *'
                    rc = sock_write_bytes (sock, buff, len);
                                                 ^~~~
sock.c:360:44: note: passing argument to parameter 'buff' here
int sock_write_bytes(int sock, const void *buff, size_t len)
                                           ^
sock.c:442:22: error: argument does not meet declared bounds for 1st parameter
    len = vsnprintf (buff, sizeof (buffer), fmt, ap);
                     ^~~~
sock.c:442:22: note: source bounds are an empty range
sock.c:442:22: note: destination upper bound is above source upper bound
sock.c:442:22: note: (expanded) expected argument bounds are 'bounds((char *)buff, (char *)buff + sizeof (buffer))'
sock.c:442:22: note: (expanded) inferred bounds are 'bounds(buff, buff + 0)'
    len = vsnprintf (buff, sizeof (buffer), fmt, ap);
                     ^~~~
sock.c:454:34: warning: cannot prove argument meets declared bounds for 1st parameter [-Wcheck-bounds-decls-unchecked-scope]
                len = vsnprintf (buff, len, fmt, ap_retry);
                                 ^~~~
sock.c:454:34: note: (expanded) expected argument bounds are 'bounds((char *)buff, (char *)buff + (size_t)len)'
sock.c:454:34: note: (expanded) inferred bounds are 'bounds(buff, buff + 0)'
                len = vsnprintf (buff, len, fmt, ap_retry);
                                 ^~~~
1 warning and 8 errors generated.
make[3]: [libicenet_la-sock.lo] Error 1 (ignored)
libtool:   error: 'libicenet_la-sock.lo' is not a valid libtool object
make[3]: [libicenet.la] Error 1 (ignored)
thread.c:176:17: error: assigning to 'avl_tree *' (aka 'struct _avl_tree *') from incompatible type '_Ptr<avl_tree>' (aka '_Ptr<struct _avl_tree>')
    _threadtree = avl_tree_new(_compare_threads, NULL);
                ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
thread.c:182:18: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
    thread->file = strdup("main.c");
                 ^ ~~~~~~~~~~~~~~~~
thread.c:185:18: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
    thread->name = strdup("Main Thread");
                 ^ ~~~~~~~~~~~~~~~~~~~~~
thread.c:187:16: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    avl_insert(_threadtree, (void *)thread);
               ^~~~~~~~~~~
thread.c:204:23: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        avl_tree_free(_threadtree, _free_thread);
                      ^~~~~~~~~~~
thread.c:288:22: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
        thread->file = strdup(file);
                     ^ ~~~~~~~~~~~~
thread.c:294:22: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
        thread->name = strdup(name);
                     ^ ~~~~~~~~~~~~
thread.c:605:20: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        avl_delete(_threadtree, th, _free_thread);
                   ^~~~~~~~~~~
thread.c:656:16: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    avl_insert(_threadtree, (void *)thread);
               ^~~~~~~~~~~
thread.c:674:21: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        avl_delete (_threadtree, thread, _free_thread);
                    ^~~~~~~~~~~
thread.c:697:26: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    node = avl_get_first(_threadtree);
                         ^~~~~~~~~~~
thread.c:726:14: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
    th->name = strdup(name);
             ^ ~~~~~~~~~~~~
thread.c:756:16: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    avl_delete(_threadtree, thread, _free_thread);
               ^~~~~~~~~~~
13 errors generated.
make[3]: [libicethread_la-thread.lo] Error 1 (ignored)
libtool:   error: 'libicethread_la-thread.lo' is not a valid libtool object
make[3]: [libicethread.la] Error 1 (ignored)
httpp.c:143:50: error: expression has unknown bounds
            httpp_setvar(parser, list->var.name, list->var.value[i]);
                                                 ^~~~~~~~~~~~~~~~~~
httpp.c:157:17: error: assigning to 'char *' from incompatible type '_Array_ptr<char>'
    line[lines] = data;
                ^ ~~~~
httpp.c:159:13: error: expression has unknown bounds
        if (data[i] == '\r')
            ^~~~~~~
httpp.c:160:13: error: expression has unknown bounds
            data[i] = '\0';
            ^~~~~~~
httpp.c:161:13: error: expression has unknown bounds
        if (data[i] == '\n') {
            ^~~~~~~
httpp.c:163:13: error: expression has unknown bounds
            data[i] = '\0';
            ^~~~~~~
httpp.c:167:21: error: expression has unknown bounds
                if (data[i + 1] == '\n' || data[i + 1] == '\r')
                    ^~~~~~~~~~~
httpp.c:167:44: error: expression has unknown bounds
                if (data[i + 1] == '\n' || data[i + 1] == '\r')
                                           ^~~~~~~~~~~
httpp.c:175:23: error: expression has unknown bounds
    while (i < len && data[i] == '\n') i++;
                      ^~~~~~~
httpp.c:190:14: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
        name = line[l];
             ^ ~~~~~~~
httpp.c:204:31: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
                        value = &line[l][i];
                              ^ ~~~~~~~~~~~
httpp.c:222:40: error: automatic variable 'line' with bounds must have initializer
    _Nt_array_ptr<_Nt_array_ptr<char>> line;
                                       ^
httpp.c:238:38: error: passing '_Nt_array_ptr<_Nt_array_ptr<char>>' to parameter of incompatible type 'char **'
    lines = split_headers(data, len, line);
                                     ^~~~
httpp.c:150:75: note: passing argument to parameter 'line' here
static int split_headers(_Array_ptr<char> data, unsigned long len, char **line : itype(_Array_ptr<_Array_ptr<char>> ) )
                                                                          ^
httpp.c:253:27: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
                resp_code = &line[0][i];
                          ^ ~~~~~~~~~~~
httpp.c:255:25: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
                message = &line[0][i];
                        ^ ~~~~~~~~~~~
httpp.c:235:12: error: argument has unknown bounds, bounds expected because the 1st parameter has bounds
    memcpy(data, http_data, len);
           ^~~~
httpp.c:235:18: warning: cannot prove argument meets declared bounds for 2nd parameter [-Wcheck-bounds-decls-unchecked-scope]
    memcpy(data, http_data, len);
                 ^~~~~~~~~
httpp.c:235:18: note: (expanded) expected argument bounds are 'bounds((_Array_ptr<char>)http_data, (_Array_ptr<char>)http_data + len)'
httpp.c:235:18: note: (expanded) inferred bounds are 'bounds((_Array_ptr<const char>)http_data, (_Array_ptr<const char>)http_data + 1)'
    memcpy(data, http_data, len);
                 ^~~~~~~~~
httpp.c:236:5: error: expression has unknown bounds
    data[len] = 0;
    ^~~~~~~~~
httpp.c:277:10: error: argument has unknown bounds, bounds expected because the 1st parameter has bounds
    free(data);
         ^~~~
httpp.c:262:14: error: argument has unknown bounds, bounds expected because the 1st parameter has bounds
        free(data);
             ^~~~
httpp.c:353:12: error: returning 'char *' from a function with incompatible result type '_Nt_array_ptr<char>'
    return (char *)decoded;
           ^~~~~~~~~~~~~~~
httpp.c:319:16: error: expression has unknown bounds
        switch(src[i]) {
               ^~~~~~
httpp.c:344:22: error: expression has unknown bounds
            *dst++ = src[i];
                     ^~~~~~
httpp.c:325:20: error: expression has unknown bounds
            if(hex(src[i+1]) == -1 || hex(src[i+2]) == -1 ) {
                   ^~~~~~~~
httpp.c:325:43: error: expression has unknown bounds
            if(hex(src[i+1]) == -1 || hex(src[i+2]) == -1 ) {
                                          ^~~~~~~~
httpp.c:330:26: error: expression has unknown bounds
            *dst++ = hex(src[i+1]) * 16  + hex(src[i+2]);
                         ^~~~~~~~
httpp.c:330:48: error: expression has unknown bounds
            *dst++ = hex(src[i+1]) * 16  + hex(src[i+2]);
                                               ^~~~~~~~
httpp.c:376:9: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'void *'
    key = malloc(keylen + 1);
        ^ ~~~~~~~~~~~~~~~~~~
httpp.c:382:35: error: passing '_Nt_array_ptr<char>' to parameter of incompatible type 'char *'
    _httpp_set_param_nocopy(tree, key, value, 0);
                                  ^~~
httpp.c:58:64: note: passing argument to parameter 'name' here
static void _httpp_set_param_nocopy(_Ptr<avl_tree> tree, char *name, _Nt_array_ptr<char> value, int replace);
                                                               ^
httpp.c:377:12: warning: cannot prove argument meets declared bounds for 1st parameter [-Wcheck-bounds-decls-unchecked-scope]
    memcpy(key, start, keylen);
           ^~~
httpp.c:377:12: note: (expanded) expected argument bounds are 'bounds((_Array_ptr<char>)key, (_Array_ptr<char>)key + keylen)'
httpp.c:377:12: note: (expanded) inferred bounds are 'bounds(key, key + 0)'
    memcpy(key, start, keylen);
           ^~~
httpp.c:377:17: error: argument has unknown bounds, bounds expected because the 2nd parameter has bounds
    memcpy(key, start, keylen);
                ^~~~~
httpp.c:402:21: error: assigning to '_Nt_array_ptr<const char>' from incompatible type 'const char *'
                mid = &(query[i]);
                    ^ ~~~~~~~~~~~
httpp.c:415:26: error: automatic variable 'line' with bounds must have initializer
    _Nt_array_ptr<char*> line; /* limited to 32 lines, should be more than enough */
                         ^
httpp.c:432:38: error: passing '_Nt_array_ptr<char *>' to parameter of incompatible type 'char **'
    lines = split_headers(data, len, line);
                                     ^~~~
httpp.c:150:75: note: passing argument to parameter 'line' here
static int split_headers(_Array_ptr<char> data, unsigned long len, char **line : itype(_Array_ptr<_Array_ptr<char>> ) )
                                                                          ^
httpp.c:455:29: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
                        uri = &line[0][i];
                            ^ ~~~~~~~~~~~
httpp.c:458:33: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
                        version = &line[0][i];
                                ^ ~~~~~~~~~~~
httpp.c:474:19: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
        if((query = strchr(uri, '?')) != NULL) {
                  ^ ~~~~~~~~~~~~~~~~
httpp.c:482:21: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
        parser->uri = strdup(uri);
                    ^ ~~~~~~~~~~~
httpp.c:488:36: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
    if ((version != NULL) && ((tmp = strchr(version, '/')) != NULL)) {
                                   ^ ~~~~~~~~~~~~~~~~~~~~
httpp.c:552:27: error: passing '_Nt_array_ptr<char *>' to parameter of incompatible type 'char **'
    parse_headers(parser, line, lines);
                          ^~~~
httpp.c:180:62: note: passing argument to parameter 'line' here
static void parse_headers(_Ptr<http_parser_t> parser, char **line : itype(_Array_ptr<_Nt_array_ptr<char>> ) , int lines)
                                                             ^
httpp.c:429:12: error: argument has unknown bounds, bounds expected because the 1st parameter has bounds
    memcpy(data, http_data, len);
           ^~~~
httpp.c:430:5: error: expression has unknown bounds
    data[len] = 0;
    ^~~~~~~~~
httpp.c:484:14: error: argument has unknown bounds, bounds expected because the 1st parameter has bounds
        free(data);
             ^~~~
httpp.c:477:13: warning: out-of-bounds memory access [-Wcheck-memory-accesses]
            *query = 0;
            ^~~~~~
httpp.c:477:13: note: source bounds are an empty range
httpp.c:477:13: note: accesses memory at or above the upper bound
httpp.c:477:13: note: (expanded) inferred bounds are 'bounds(query, query + 0)'
httpp.c:498:14: error: argument has unknown bounds, bounds expected because the 1st parameter has bounds
        free(data);
             ^~~~
httpp.c:489:9: warning: out-of-bounds memory access [-Wcheck-memory-accesses]
        tmp[0] = '\0';
        ^~~~~~
httpp.c:489:9: note: source bounds are an empty range
httpp.c:489:9: note: accesses memory at or above the upper bound
httpp.c:489:9: note: (expanded) inferred bounds are 'bounds(tmp, tmp + 0)'
httpp.c:494:18: error: argument has unknown bounds, bounds expected because the 1st parameter has bounds
            free(data);
                 ^~~~
httpp.c:541:14: error: argument has unknown bounds, bounds expected because the 1st parameter has bounds
        free(data);
             ^~~~
httpp.c:548:14: error: argument has unknown bounds, bounds expected because the 1st parameter has bounds
        free(data);
             ^~~~
httpp.c:554:10: error: argument has unknown bounds, bounds expected because the 1st parameter has bounds
    free(data);
         ^~~~
httpp.c:462:30: error: argument has unknown bounds, bounds expected because the 1st parameter has bounds
                        free(data);
                             ^~~~
httpp.c:590:19: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
    var->value[0] = strdup(value);
                  ^ ~~~~~~~~~~~~~
httpp.c:616:16: error: expression has unknown bounds
        return found->value[0];
               ^~~~~~~~~~~~~~~
httpp.c:646:17: error: argument has unknown bounds, bounds expected because the 1st parameter has bounds
    n = realloc(var->value, sizeof(*n)*(var->values + 1));
                ^~~~~~~~~~
httpp.c:657:5: error: inferred bounds 'bounds(var->value[var->values++], var->value[var->values++] + 0)' contain a modifying expression; use a temporary instead
    var->value[var->values++] = value;
    ^~~~~~~~~~~~~~~~~~~~~~~~~
httpp.c:657:16: note: modifying expression
    var->value[var->values++] = value;
               ^~~~~~~~~~~~~
httpp.c:657:5: error: expression has unknown bounds
    var->value[var->values++] = value;
    ^~~~~~~~~~~~~~~~~~~~~~~~~
httpp.c:700:12: error: expression has unknown bounds
    return res->value[0];
           ^~~~~~~~~~~~~
httpp.c:705:54: error: passing 'const char *' to parameter of incompatible type '_Nt_array_ptr<const char>'
    return _httpp_set_param(parser->queryvars, name, value);
                                                     ^~~~~
httpp.c:667:109: note: passing argument to parameter 'value' here
static void _httpp_set_param(_Ptr<avl_tree> tree, _Nt_array_ptr<const char> name, _Nt_array_ptr<const char> value)
                                                                                                            ^
httpp.c:710:48: error: passing '_Ptr<const char>' to parameter of incompatible type 'const char *'
    return _httpp_get_param(parser->queryvars, name);
                                               ^~~~
httpp.c:690:70: note: passing argument to parameter 'name' here
static const char *_httpp_get_param(_Ptr<avl_tree> tree, const char *name) : itype(_Nt_array_ptr<const char> ) 
                                                                     ^
httpp.c:720:47: error: passing '_Ptr<const char>' to parameter of incompatible type 'const char *'
    return _httpp_get_param(parser->postvars, name);
                                              ^~~~
httpp.c:690:70: note: passing argument to parameter 'name' here
static const char *_httpp_get_param(_Ptr<avl_tree> tree, const char *name) : itype(_Nt_array_ptr<const char> ) 
                                                                     ^
httpp.c:814:36: error: passing '_Array_ptr<_Nt_array_ptr<char>>' to parameter of incompatible type '_Array_ptr<_Ptr<char>>'
                httpp_free_any_key(ret);
                                   ^~~
./httpp.h:142:48: note: passing argument to parameter 'keys' here
void httpp_free_any_key(_Array_ptr<_Ptr<char>> keys);
                                               ^
httpp.c:822:18: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
        ret[pos] = strdup(var->name);
                 ^ ~~~~~~~~~~~~~~~~~
httpp.c:824:32: error: passing '_Array_ptr<_Nt_array_ptr<char>>' to parameter of incompatible type '_Array_ptr<_Ptr<char>>'
            httpp_free_any_key(ret);
                               ^~~
./httpp.h:142:48: note: passing argument to parameter 'keys' here
void httpp_free_any_key(_Array_ptr<_Ptr<char>> keys);
                                               ^
httpp.c:831:12: error: returning '_Array_ptr<_Nt_array_ptr<char>>' from a function with incompatible result type '_Ptr<_Ptr<char>>'
    return ret;
           ^~~
httpp.c:812:58: error: argument has unknown bounds, bounds expected because the 1st parameter has bounds
            _Array_ptr<_Nt_array_ptr<char>> n =  realloc(ret, sizeof(*ret)*(len + 8));
                                                         ^~~
httpp.c:817:20: error: argument has unknown bounds, bounds expected because the 1st parameter has bounds
            memset(n + len, 0, sizeof(*n)*8);
                   ^~~~~~~
httpp.c:823:14: error: expression has unknown bounds
        if (!ret[pos]) {
             ^~~~~~~~
httpp.c:841:20: error: expression has unknown bounds
    for (p = keys; *p; p++) {
                   ^~
httpp.c:844:10: error: argument has unknown bounds, bounds expected because the 1st parameter has bounds
    free(keys);
         ^~~~
httpp.c:842:14: error: expression has unknown bounds
        free(*p);
             ^~
httpp.c:849:73: error: passing '_Ptr<const char>' to parameter of incompatible type 'const char *'
    _Nt_array_ptr<const char> ret =  _httpp_get_param(parser->postvars, name);
                                                                        ^~~~
httpp.c:690:70: note: passing argument to parameter 'name' here
static const char *_httpp_get_param(_Ptr<avl_tree> tree, const char *name) : itype(_Nt_array_ptr<const char> ) 
                                                                     ^
httpp.c:854:48: error: passing '_Ptr<const char>' to parameter of incompatible type 'const char *'
    return _httpp_get_param(parser->queryvars, name);
                                               ^~~~
httpp.c:690:70: note: passing argument to parameter 'name' here
static const char *_httpp_get_param(_Ptr<avl_tree> tree, const char *name) : itype(_Nt_array_ptr<const char> ) 
                                                                     ^
httpp.c:897:12: error: expression has unknown bounds
    for (; *p != '\0'; p++)
           ^~
httpp.c:898:9: error: expression has unknown bounds
        *p = tolower(*p);
        ^~
httpp.c:898:22: error: expression has unknown bounds
        *p = tolower(*p);
                     ^~
httpp.c:923:10: error: argument has unknown bounds, bounds expected because the 1st parameter has bounds
    free(var->value);
         ^~~~~~~~~~
httpp.c:921:14: error: expression has unknown bounds
        free(var->value[i]);
             ^~~~~~~~~~~~~
4 warnings and 73 errors generated.
make[3]: [libicehttpp_la-httpp.lo] Error 1 (ignored)
In file included from encoding.c:35:
./encoding.h:61:117: error: expected ')'
ssize_t httpp_encoding_read(_Ptr<httpp_encoding_t> self, void* buf, size_t len, ssize_t (*)(void *, void *, size_t) cb : itype(_Ptr<ssize_t (void* , void* , size_t )> ) , void* userdata);
                                                                                                                    ^
./encoding.h:61:28: note: to match this '('
ssize_t httpp_encoding_read(_Ptr<httpp_encoding_t> self, void* buf, size_t len, ssize_t (*)(void *, void *, size_t) cb : itype(_Ptr<ssize_t (void* , void* , size_t )> ) , void* userdata);
                           ^
./encoding.h:66:69: error: expected ')'
int httpp_encoding_eof(_Ptr<httpp_encoding_t> self, int (*)(void *) cb : itype(_Ptr<int (void* )> ) , void* userdata);
                                                                    ^
./encoding.h:66:23: note: to match this '('
int httpp_encoding_eof(_Ptr<httpp_encoding_t> self, int (*)(void *) cb : itype(_Ptr<int (void* )> ) , void* userdata);
                      ^
encoding.c:103:79: error: 'type name' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
static void __flush_output(_Ptr<httpp_encoding_t> self, _Ptr<ssize_t (void* , _Nt_array_ptr<const void> , size_t )> cb, void* userdata)
                                                                              ^
encoding.c:107:26: warning: incompatible pointer to integer conversion passing 'void *' to parameter of type 'int' [-Wint-conversion]
                         self->buf_write_encoded + self->buf_write_encoded_offset,
                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
encoding.c:130:22: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
       if ((ret->key = strdup(key)) == NULL)
                     ^ ~~~~~~~~~~~
encoding.c:189:27: error: assigning to '_Ptr<ssize_t (_Ptr<httpp_encoding_t>, void *, size_t, _Ptr<ssize_t (void *, void *, size_t)>, void *)>' (aka '_Ptr<long (_Ptr<struct httpp_encoding_tag>, void *, unsigned long, _Ptr<long (void *, void *, unsigned long)>, void *)>') from incompatible type 'ssize_t (httpp_encoding_t *, void *, size_t, _Ptr<ssize_t (void *, void *, size_t)>, void *)' (aka 'long (struct httpp_encoding_tag *, void *, unsigned long, _Ptr<long (void *, void *, unsigned long)>, void *)'): type mismatch at 1st parameter ('_Ptr<httpp_encoding_t>' (aka '_Ptr<struct httpp_encoding_tag>') vs 'httpp_encoding_t *' (aka 'struct httpp_encoding_tag *'))
        ret->process_read = __enc_identity_read;
                          ^ ~~~~~~~~~~~~~~~~~~~
encoding.c:190:28: error: assigning to '_Ptr<ssize_t (_Ptr<httpp_encoding_t>, _Ptr<const void>, size_t, _Ptr<ssize_t (void *, _Ptr<const void>, size_t)>, void *)>' (aka '_Ptr<long (_Ptr<struct httpp_encoding_tag>, _Ptr<const void>, unsigned long, _Ptr<long (void *, _Ptr<const void>, unsigned long)>, void *)>') from incompatible type 'ssize_t (httpp_encoding_t *, _Ptr<const void>, size_t, _Ptr<ssize_t (void *, _Ptr<const void>, size_t)>, void *)' (aka 'long (struct httpp_encoding_tag *, _Ptr<const void>, unsigned long, _Ptr<long (void *, _Ptr<const void>, unsigned long)>, void *)'): type mismatch at 1st parameter ('_Ptr<httpp_encoding_t>' (aka '_Ptr<struct httpp_encoding_tag>') vs 'httpp_encoding_t *' (aka 'struct httpp_encoding_tag *'))
        ret->process_write = __enc_identity_write;
                           ^ ~~~~~~~~~~~~~~~~~~~~
encoding.c:193:28: error: assigning to '_Ptr<ssize_t (_Ptr<httpp_encoding_t>, _Ptr<const void>, size_t, _Ptr<ssize_t (void *, _Ptr<const void>, size_t)>, void *)>' (aka '_Ptr<long (_Ptr<struct httpp_encoding_tag>, _Ptr<const void>, unsigned long, _Ptr<long (void *, _Ptr<const void>, unsigned long)>, void *)>') from incompatible type 'ssize_t (_Ptr<httpp_encoding_t>, _Ptr<const void>, size_t, ssize_t (*)(void *, const void *, size_t), void *)' (aka 'long (_Ptr<struct httpp_encoding_tag>, _Ptr<const void>, unsigned long, long (*)(void *, const void *, unsigned long), void *)'): type mismatch at 4th parameter ('_Ptr<ssize_t (void *, _Ptr<const void>, size_t)>' (aka '_Ptr<long (void *, _Ptr<const void>, unsigned long)>') vs 'ssize_t (*)(void *, const void *, size_t)' (aka 'long (*)(void *, const void *, unsigned long)'))
        ret->process_write = __enc_chunked_write;
                           ^ ~~~~~~~~~~~~~~~~~~~
encoding.c:240:117: error: expected ')'
ssize_t httpp_encoding_read(_Ptr<httpp_encoding_t> self, void* buf, size_t len, ssize_t (*)(void *, void *, size_t) cb : itype(_Ptr<ssize_t (void* , void* , size_t )> ) , void* userdata)
                                                                                                                    ^
encoding.c:240:28: note: to match this '('
ssize_t httpp_encoding_read(_Ptr<httpp_encoding_t> self, void* buf, size_t len, ssize_t (*)(void *, void *, size_t) cb : itype(_Ptr<ssize_t (void* , void* , size_t )> ) , void* userdata)
                           ^
encoding.c:240:91: error: parameter name omitted
ssize_t httpp_encoding_read(_Ptr<httpp_encoding_t> self, void* buf, size_t len, ssize_t (*)(void *, void *, size_t) cb : itype(_Ptr<ssize_t (void* , void* , size_t )> ) , void* userdata)
                                                                                          ^
encoding.c:262:46: error: use of undeclared identifier 'cb'
    ret = self->process_read(self, buf, len, cb, userdata);
                                             ^
encoding.c:262:50: error: use of undeclared identifier 'userdata'
    ret = self->process_read(self, buf, len, cb, userdata);
                                                 ^
encoding.c:284:69: error: expected ')'
int httpp_encoding_eof(_Ptr<httpp_encoding_t> self, int (*)(void *) cb : itype(_Ptr<int (void* )> ) , void* userdata)
                                                                    ^
encoding.c:284:23: note: to match this '('
int httpp_encoding_eof(_Ptr<httpp_encoding_t> self, int (*)(void *) cb : itype(_Ptr<int (void* )> ) , void* userdata)
                      ^
encoding.c:284:59: error: parameter name omitted
int httpp_encoding_eof(_Ptr<httpp_encoding_t> self, int (*)(void *) cb : itype(_Ptr<int (void* )> ) , void* userdata)
                                                          ^
encoding.c:295:9: error: use of undeclared identifier 'cb'
    if (cb)
        ^
encoding.c:296:16: warning: implicit declaration of function 'cb' is invalid in C99 [-Wimplicit-function-declaration]
        return cb(userdata);
               ^
encoding.c:296:19: error: use of undeclared identifier 'userdata'
        return cb(userdata);
                  ^
encoding.c:330:26: error: passing '_Ptr<ssize_t (void *, _Ptr<const void>, size_t)>' (aka '_Ptr<long (void *, _Ptr<const void>, unsigned long)>') to parameter of incompatible type '_Ptr<ssize_t (void *, int, size_t)>' (aka '_Ptr<long (void *, int, unsigned long)>'): type mismatch at 2nd parameter ('_Ptr<const void>' vs 'int')
    __flush_output(self, cb, userdata);
                         ^~
encoding.c:103:117: note: passing argument to parameter 'cb' here
static void __flush_output(_Ptr<httpp_encoding_t> self, _Ptr<ssize_t (void* , _Nt_array_ptr<const void> , size_t )> cb, void* userdata)
                                                                                                                    ^
encoding.c:336:26: error: passing '_Ptr<ssize_t (void *, _Ptr<const void>, size_t)>' (aka '_Ptr<long (void *, _Ptr<const void>, unsigned long)>') to parameter of incompatible type '_Ptr<ssize_t (void *, int, size_t)>' (aka '_Ptr<long (void *, int, unsigned long)>'): type mismatch at 2nd parameter ('_Ptr<const void>' vs 'int')
    __flush_output(self, cb, userdata);
                         ^~
encoding.c:103:117: note: passing argument to parameter 'cb' here
static void __flush_output(_Ptr<httpp_encoding_t> self, _Ptr<ssize_t (void* , _Nt_array_ptr<const void> , size_t )> cb, void* userdata)
                                                                                                                    ^
encoding.c:421:19: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'void *'
        meta->key = malloc(key_len + 1);
                  ^ ~~~~~~~~~~~~~~~~~~~
encoding.c:456:15: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'void *'
        value = meta->value = malloc(value_len + 1);
              ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
encoding.c:412:13: error: expression has unknown bounds
        if (*p != ';') /* not a valid extension */
            ^~
encoding.c:420:44: error: expression has unknown bounds
        for (key_len = 0; key_len < len && p[key_len] != '='; key_len++);
                                           ^~~~~~~~~~
encoding.c:424:16: warning: cannot prove argument meets declared bounds for 1st parameter [-Wcheck-bounds-decls-unchecked-scope]
        memcpy(meta->key, p, key_len);
               ^~~~~~~~~
encoding.c:424:16: note: (expanded) expected argument bounds are 'bounds((_Array_ptr<char>)meta->key, (_Array_ptr<char>)meta->key + key_len)'
encoding.c:424:16: note: (expanded) inferred bounds are 'bounds(meta->key, meta->key + 0)'
        memcpy(meta->key, p, key_len);
               ^~~~~~~~~
encoding.c:424:27: error: argument has unknown bounds, bounds expected because the 2nd parameter has bounds
        memcpy(meta->key, p, key_len);
                          ^
encoding.c:431:13: error: expression has unknown bounds
        if (*p != '=') /* check if we have a value */
            ^~
encoding.c:450:17: error: expression has unknown bounds
            if (p[value_len] == '"') {
                ^~~~~~~~~~~~
encoding.c:452:24: error: expression has unknown bounds
            } else if (p[value_len] == ';')
                       ^~~~~~~~~~~~
encoding.c:443:21: error: expression has unknown bounds
                if (p[value_len] == '\\') in_quote = 2;
                    ^~~~~~~~~~~~
encoding.c:444:26: error: expression has unknown bounds
                else if (p[value_len] == '"') in_quote--;
                         ^~~~~~~~~~~~
encoding.c:473:17: error: expression has unknown bounds
            if (*c == '"') {
                ^~
encoding.c:475:24: error: expression has unknown bounds
            } else if (p[value_len] == ';')
                       ^~~~~~~~~~~~
encoding.c:478:46: error: expression has unknown bounds
                value[value_decoded_len++] = *c;
                                             ^~
encoding.c:462:21: error: expression has unknown bounds
                if (*c == '\\') in_quote = 2;
                    ^~
encoding.c:463:26: error: expression has unknown bounds
                else if (*c == '"') {
                         ^~
encoding.c:468:50: error: expression has unknown bounds
                    value[value_decoded_len++] = *c;
                                                 ^~
encoding.c:589:43: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'void *'
    for (i = self->buf_read_raw_offset, c = self->buf_read_raw + self->buf_read_raw_offset;
                                          ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
encoding.c:630:11: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'void *'
        c = self->buf_read_raw + offset_extentions;
          ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
encoding.c:632:11: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'void *'
        c = self->buf_read_raw + offset_CR;
          ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
encoding.c:634:5: warning: out-of-bounds memory access [-Wcheck-memory-accesses]
    *c = 0;
    ^~
encoding.c:634:5: note: source bounds are an empty range
encoding.c:634:5: note: accesses memory at or above the upper bound
encoding.c:634:5: note: (expanded) inferred bounds are 'bounds(c, c + 0)'
encoding.c:709:25: error: initializing '_Nt_array_ptr<char>' with an expression of incompatible type 'void *'
    _Nt_array_ptr<char> p =  cur->value;
                        ^    ~~~~~~~~~~
encoding.c:748:7: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'void *'
    p = buf = malloc(buflen);
      ^ ~~~~~~~~~~~~~~~~~~~~
encoding.c:770:27: error: assigning to '_Nt_array_ptr<const char>' from incompatible type 'void *'
            for (i = 0, c = cur->value; i < cur->value_len; i++, c++) {
                          ^ ~~~~~~~~~~
encoding.c:786:12: error: returning 'void *' from a function with incompatible result type '_Nt_array_ptr<char>'
    return buf;
           ^~~
encoding.c:781:5: warning: out-of-bounds memory access [-Wcheck-memory-accesses]
    *p = 0; /* terminate the string */
    ^~
encoding.c:781:5: note: source bounds are an empty range
encoding.c:781:5: note: accesses memory at or above the upper bound
encoding.c:781:5: note: (expanded) inferred bounds are 'bounds(p, p + 0)'
encoding.c:759:9: warning: out-of-bounds memory access [-Wcheck-memory-accesses]
        *(p++) = ';';
        ^~~~~~
encoding.c:759:9: note: source bounds are an empty range
encoding.c:759:9: note: (expanded) inferred bounds are 'bounds(p, p + 0)'
encoding.c:761:16: warning: cannot prove argument meets declared bounds for 1st parameter [-Wcheck-bounds-decls-unchecked-scope]
        memcpy(p, cur->key, len);
               ^
encoding.c:761:16: note: (expanded) expected argument bounds are 'bounds((_Array_ptr<char>)p, (_Array_ptr<char>)p + len)'
encoding.c:761:16: note: (expanded) inferred bounds are 'bounds(p, p + 0)'
        memcpy(p, cur->key, len);
               ^
encoding.c:761:19: warning: cannot prove argument meets declared bounds for 2nd parameter [-Wcheck-bounds-decls-unchecked-scope]
        memcpy(p, cur->key, len);
                  ^~~~~~~~
encoding.c:761:19: note: (expanded) expected argument bounds are 'bounds((_Array_ptr<char>)cur->key, (_Array_ptr<char>)cur->key + len)'
encoding.c:761:19: note: (expanded) inferred bounds are 'bounds(cur->key, cur->key + 0)'
        memcpy(p, cur->key, len);
                  ^~~~~~~~
encoding.c:768:13: warning: out-of-bounds memory access [-Wcheck-memory-accesses]
            *(p++) = '=';
            ^~~~~~
encoding.c:768:13: note: source bounds are an empty range
encoding.c:768:13: note: (expanded) inferred bounds are 'bounds(p, p + 0)'
encoding.c:769:13: warning: out-of-bounds memory access [-Wcheck-memory-accesses]
            *(p++) = '"';
            ^~~~~~
encoding.c:769:13: note: source bounds are an empty range
encoding.c:769:13: note: (expanded) inferred bounds are 'bounds(p, p + 0)'
encoding.c:775:13: warning: out-of-bounds memory access [-Wcheck-memory-accesses]
            *(p++) = '"';
            ^~~~~~
encoding.c:775:13: note: source bounds are an empty range
encoding.c:775:13: note: (expanded) inferred bounds are 'bounds(p, p + 0)'
encoding.c:772:21: warning: out-of-bounds memory access [-Wcheck-memory-accesses]
                    *(p++) = '\\';
                    ^~~~~~
encoding.c:772:21: note: source bounds are an empty range
encoding.c:772:21: note: (expanded) inferred bounds are 'bounds(p, p + 0)'
encoding.c:773:17: warning: out-of-bounds memory access [-Wcheck-memory-accesses]
                *(p++) = *c;
                ^~~~~~
encoding.c:773:17: note: source bounds are an empty range
encoding.c:773:17: note: (expanded) inferred bounds are 'bounds(p, p + 0)'
encoding.c:790:25: error: automatic variable 'encoded_length' with bounds must have initializer
    _Nt_array_ptr<char> encoded_length;
                        ^
encoding.c:808:14: error: argument does not meet declared bounds for 1st parameter
    snprintf(encoded_length, sizeof(encoded_length), "%lx", (long int)len);
             ^~~~~~~~~~~~~~
encoding.c:808:14: note: source bounds are an empty range
encoding.c:808:14: note: destination upper bound is above source upper bound
encoding.c:808:14: note: (expanded) expected argument bounds are 'bounds((char *)encoded_length, (char *)encoded_length + sizeof (encoded_length) == 0 ? 0 : sizeof (encoded_length) - 1)'
encoding.c:808:14: note: (expanded) inferred bounds are 'bounds(encoded_length, encoded_length + 0)'
    snprintf(encoded_length, sizeof(encoded_length), "%lx", (long int)len);
             ^~~~~~~~~~~~~~
encoding.c:830:53: warning: cannot prove argument meets declared bounds for 2nd parameter [-Wcheck-bounds-decls-unchecked-scope]
    memcpy(self->buf_write_encoded + header_length, buf, len);
                                                    ^~~
encoding.c:830:53: note: (expanded) expected argument bounds are 'bounds((_Array_ptr<char>)buf, (_Array_ptr<char>)buf + len)'
encoding.c:830:53: note: (expanded) inferred bounds are 'bounds((_Array_ptr<char>)buf, (_Array_ptr<char>)buf + 1)'
    memcpy(self->buf_write_encoded + header_length, buf, len);
                                                    ^~~
14 warnings and 42 errors generated.
make[3]: [libicehttpp_la-encoding.lo] Error 1 (ignored)
libtool:   error: 'libicehttpp_la-httpp.lo' is not a valid libtool object
make[3]: [libicehttpp.la] Error 1 (ignored)
log.c:121:37: error: automatic variable 'new_name' with bounds must have initializer
                _Nt_array_ptr<char> new_name;
                                    ^
log.c:134:31: error: argument does not meet declared bounds for 1st parameter
                    snprintf (new_name,  sizeof(new_name), "%s.old", loglist [id] . filename);
                              ^~~~~~~~
log.c:134:31: note: source bounds are an empty range
log.c:134:31: note: destination upper bound is above source upper bound
log.c:134:31: note: (expanded) expected argument bounds are 'bounds((char *)new_name, (char *)new_name + sizeof (new_name) == 0 ? 0 : sizeof (new_name) - 1)'
log.c:134:31: note: (expanded) inferred bounds are 'bounds(new_name, new_name + 0)'
                    snprintf (new_name,  sizeof(new_name), "%s.old", loglist [id] . filename);
                              ^~~~~~~~
log.c:131:31: error: argument does not meet declared bounds for 1st parameter
                    snprintf (new_name,  sizeof(new_name), "%s.%s", loglist[id].filename, timestamp);
                              ^~~~~~~~
log.c:131:31: note: source bounds are an empty range
log.c:131:31: note: destination upper bound is above source upper bound
log.c:131:31: note: (expanded) expected argument bounds are 'bounds((char *)new_name, (char *)new_name + sizeof (new_name) == 0 ? 0 : sizeof (new_name) - 1)'
log.c:131:31: note: (expanded) inferred bounds are 'bounds(new_name, new_name + 0)'
                    snprintf (new_name,  sizeof(new_name), "%s.%s", loglist[id].filename, timestamp);
                              ^~~~~~~~
log.c:390:17: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'void *'
    entry->line = malloc (entry->len);
                ^ ~~~~~~~~~~~~~~~~~~~
log.c:391:15: warning: cannot prove argument meets declared bounds for 1st parameter [-Wcheck-bounds-decls-unchecked-scope]
    snprintf (entry->line, entry->len, "%s%s\n", pre, line);
              ^~~~~~~~~~~
log.c:391:15: note: (expanded) expected argument bounds are 'bounds((char *)entry->line, (char *)entry->line + (size_t)entry->len == 0 ? 0 : (size_t)entry->len - 1)'
log.c:391:15: note: (expanded) inferred bounds are 'bounds(entry->line, entry->line + 0)'
    snprintf (entry->line, entry->len, "%s%s\n", pre, line);
              ^~~~~~~~~~~
log.c:423:16: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'void *'
    *_contents = malloc (remain);
               ^ ~~~~~~~~~~~~~~~
log.c:424:5: warning: out-of-bounds memory access [-Wcheck-memory-accesses]
    **_contents= '\0';
    ^~~~~~~~~~~
log.c:424:5: note: source bounds are an empty range
log.c:424:5: note: accesses memory at or above the upper bound
log.c:424:5: note: (expanded) inferred bounds are 'bounds(*_contents, *_contents + 0)'
log.c:431:29: warning: cannot prove argument meets declared bounds for 1st parameter [-Wcheck-bounds-decls-unchecked-scope]
        int len = snprintf (ptr, remain, "%s", entry->line);
                            ^~~
log.c:431:29: note: (expanded) expected argument bounds are 'bounds((char *)ptr, (char *)ptr + (size_t)remain == 0 ? 0 : (size_t)remain - 1)'
log.c:431:29: note: (expanded) inferred bounds are 'bounds(ptr, ptr + 0)'
        int len = snprintf (ptr, remain, "%s", entry->line);
                            ^~~
log.c:463:12: error: expression has unknown bounds
    for (; *str; str++) {
           ^~~~
log.c:464:35: error: expression has unknown bounds
        if (__vsnprintf__is_print(*str, allow_space)) {
                                  ^~~~
log.c:486:25: error: automatic variable 'buf' with bounds must have initializer
    _Nt_array_ptr<char> buf;
                        ^
log.c:587:29: error: assigning to '_Nt_array_ptr<const char>' from incompatible type 'const char *'
                        arg = va_arg(ap, const char *);
                            ^ ~~~~~~~~~~~~~~~~~~~~~~~~
log.c:653:5: error: expression has unknown bounds
    *str = 0;
    ^~~~
log.c:543:30: error: argument does not meet declared bounds for 1st parameter
                    snprintf(buf, sizeof(buf), "%p", (void*)va_arg(ap, void *));
                             ^~~
log.c:543:30: note: source bounds are an empty range
log.c:543:30: note: destination upper bound is above source upper bound
log.c:543:30: note: (expanded) expected argument bounds are 'bounds((char *)buf, (char *)buf + sizeof (buf) == 0 ? 0 : sizeof (buf) - 1)'
log.c:543:30: note: (expanded) inferred bounds are 'bounds(buf, buf + 0)'
                    snprintf(buf, sizeof(buf), "%p", (void*)va_arg(ap, void *));
                             ^~~
log.c:578:42: error: argument does not meet declared bounds for 1st parameter
                                snprintf(buf, sizeof(buf), "<<<invalid>>>");
                                         ^~~
log.c:578:42: note: source bounds are an empty range
log.c:578:42: note: destination upper bound is above source upper bound
log.c:578:42: note: (expanded) expected argument bounds are 'bounds((char *)buf, (char *)buf + sizeof (buf) == 0 ? 0 : sizeof (buf) - 1)'
log.c:578:42: note: (expanded) inferred bounds are 'bounds(buf, buf + 0)'
                                snprintf(buf, sizeof(buf), "<<<invalid>>>");
                                         ^~~
log.c:556:46: error: argument does not meet declared bounds for 1st parameter
                                    snprintf(buf, sizeof(buf), "%i", (int)va_arg(ap, int));
                                             ^~~
log.c:556:46: note: source bounds are an empty range
log.c:556:46: note: destination upper bound is above source upper bound
log.c:556:46: note: (expanded) expected argument bounds are 'bounds((char *)buf, (char *)buf + sizeof (buf) == 0 ? 0 : sizeof (buf) - 1)'
log.c:556:46: note: (expanded) inferred bounds are 'bounds(buf, buf + 0)'
                                    snprintf(buf, sizeof(buf), "%i", (int)va_arg(ap, int));
                                             ^~~
log.c:554:46: error: argument does not meet declared bounds for 1st parameter
                                    snprintf(buf, sizeof(buf), "%u", (unsigned int)va_arg(ap, unsigned int));
                                             ^~~
log.c:554:46: note: source bounds are an empty range
log.c:554:46: note: destination upper bound is above source upper bound
log.c:554:46: note: (expanded) expected argument bounds are 'bounds((char *)buf, (char *)buf + sizeof (buf) == 0 ? 0 : sizeof (buf) - 1)'
log.c:554:46: note: (expanded) inferred bounds are 'bounds(buf, buf + 0)'
                                    snprintf(buf, sizeof(buf), "%u", (unsigned int)va_arg(ap, unsigned int));
                                             ^~~
log.c:562:46: error: argument does not meet declared bounds for 1st parameter
                                    snprintf(buf, sizeof(buf), "%li", (long int)va_arg(ap, long int));
                                             ^~~
log.c:562:46: note: source bounds are an empty range
log.c:562:46: note: destination upper bound is above source upper bound
log.c:562:46: note: (expanded) expected argument bounds are 'bounds((char *)buf, (char *)buf + sizeof (buf) == 0 ? 0 : sizeof (buf) - 1)'
log.c:562:46: note: (expanded) inferred bounds are 'bounds(buf, buf + 0)'
                                    snprintf(buf, sizeof(buf), "%li", (long int)va_arg(ap, long int));
                                             ^~~
log.c:560:46: error: argument does not meet declared bounds for 1st parameter
                                    snprintf(buf, sizeof(buf), "%lu", (unsigned long int)va_arg(ap, unsigned long int));
                                             ^~~
log.c:560:46: note: source bounds are an empty range
log.c:560:46: note: destination upper bound is above source upper bound
log.c:560:46: note: (expanded) expected argument bounds are 'bounds((char *)buf, (char *)buf + sizeof (buf) == 0 ? 0 : sizeof (buf) - 1)'
log.c:560:46: note: (expanded) inferred bounds are 'bounds(buf, buf + 0)'
                                    snprintf(buf, sizeof(buf), "%lu", (unsigned long int)va_arg(ap, unsigned long int));
                                             ^~~
log.c:568:46: error: argument does not meet declared bounds for 1st parameter
                                    snprintf(buf, sizeof(buf), "%lli", (long long int)va_arg(ap, long long int));
                                             ^~~
log.c:568:46: note: source bounds are an empty range
log.c:568:46: note: destination upper bound is above source upper bound
log.c:568:46: note: (expanded) expected argument bounds are 'bounds((char *)buf, (char *)buf + sizeof (buf) == 0 ? 0 : sizeof (buf) - 1)'
log.c:568:46: note: (expanded) inferred bounds are 'bounds(buf, buf + 0)'
                                    snprintf(buf, sizeof(buf), "%lli", (long long int)va_arg(ap, long long int));
                                             ^~~
log.c:566:46: error: argument does not meet declared bounds for 1st parameter
                                    snprintf(buf, sizeof(buf), "%llu", (unsigned long long int)va_arg(ap, unsigned long long int));
                                             ^~~
log.c:566:46: note: source bounds are an empty range
log.c:566:46: note: destination upper bound is above source upper bound
log.c:566:46: note: (expanded) expected argument bounds are 'bounds((char *)buf, (char *)buf + sizeof (buf) == 0 ? 0 : sizeof (buf) - 1)'
log.c:566:46: note: (expanded) inferred bounds are 'bounds(buf, buf + 0)'
                                    snprintf(buf, sizeof(buf), "%llu", (unsigned long long int)va_arg(ap, unsigned long long int));
                                             ^~~
log.c:575:46: error: argument does not meet declared bounds for 1st parameter
                                    snprintf(buf, sizeof(buf), "%lli", (long long int)va_arg(ap, ssize_t));
                                             ^~~
log.c:575:46: note: source bounds are an empty range
log.c:575:46: note: destination upper bound is above source upper bound
log.c:575:46: note: (expanded) expected argument bounds are 'bounds((char *)buf, (char *)buf + sizeof (buf) == 0 ? 0 : sizeof (buf) - 1)'
log.c:575:46: note: (expanded) inferred bounds are 'bounds(buf, buf + 0)'
                                    snprintf(buf, sizeof(buf), "%lli", (long long int)va_arg(ap, ssize_t));
                                             ^~~
log.c:573:46: error: argument does not meet declared bounds for 1st parameter
                                    snprintf(buf, sizeof(buf), "%llu", (unsigned long long int)va_arg(ap, size_t));
                                             ^~~
log.c:573:46: note: source bounds are an empty range
log.c:573:46: note: destination upper bound is above source upper bound
log.c:573:46: note: (expanded) expected argument bounds are 'bounds((char *)buf, (char *)buf + sizeof (buf) == 0 ? 0 : sizeof (buf) - 1)'
log.c:573:46: note: (expanded) inferred bounds are 'bounds(buf, buf + 0)'
                                    snprintf(buf, sizeof(buf), "%llu", (unsigned long long int)va_arg(ap, size_t));
                                             ^~~
log.c:642:29: error: expression has unknown bounds
                            *(str++) = *arg;
                            ^~~~~~~~
log.c:610:29: error: expression has unknown bounds
                            *(str++) = '"';
                            ^~~~~~~~
log.c:634:29: error: expression has unknown bounds
                            *(str++) = '"';
                            ^~~~~~~~
log.c:630:33: error: expression has unknown bounds
                                *(str++) = *arg;
                                ^~~~~~~~
log.c:621:37: error: expression has unknown bounds
                                    *(str++) = '\\';
                                    ^~~~~~~~
log.c:622:37: error: expression has unknown bounds
                                    *(str++) = 'x';
                                    ^~~~~~~~
log.c:623:37: error: expression has unknown bounds
                                    *(str++) = hextable[(*arg >> 0) & 0x0F];
                                    ^~~~~~~~
log.c:624:37: error: expression has unknown bounds
                                    *(str++) = hextable[(*arg >> 4) & 0x0F];
                                    ^~~~~~~~
log.c:619:37: error: expression has unknown bounds
                                    *(str++) = '.';
                                    ^~~~~~~~
log.c:602:29: error: expression has unknown bounds
                            *(str++) = '-';
                            ^~~~~~~~
log.c:501:17: error: expression has unknown bounds
                *(str++) = *format;
                ^~~~~~~~
log.c:661:25: error: automatic variable 'pre' with bounds must have initializer
    _Nt_array_ptr<char> pre;
                        ^
log.c:662:25: error: automatic variable 'line' with bounds must have initializer
    _Nt_array_ptr<char> line;
                        ^
log.c:675:25: error: argument does not meet declared bounds for 1st parameter
    datelen = strftime (pre, sizeof (pre), "[%Y-%m-%d  %H:%M:%S]", localtime(&now)); 
                        ^~~
log.c:675:25: note: source bounds are an empty range
log.c:675:25: note: destination upper bound is above source upper bound
log.c:675:25: note: (expanded) expected argument bounds are 'bounds((char *)pre, (char *)pre + sizeof (pre))'
log.c:675:25: note: (expanded) inferred bounds are 'bounds(pre, pre + 0)'
    datelen = strftime (pre, sizeof (pre), "[%Y-%m-%d  %H:%M:%S]", localtime(&now)); 
                        ^~~
log.c:676:15: warning: cannot prove argument meets declared bounds for 1st parameter [-Wcheck-bounds-decls-unchecked-scope]
    snprintf (pre+datelen, sizeof (pre)-datelen, " %s %s%s ", prior [priority-1], cat, func);
              ^~~~~~~~~~~
log.c:676:15: note: (expanded) expected argument bounds are 'bounds((char *)pre + datelen, (char *)pre + datelen + sizeof (pre) - datelen == 0 ? 0 : sizeof (pre) - datelen - 1)'
log.c:676:15: note: (expanded) inferred bounds are 'bounds(pre, pre + 0)'
    snprintf (pre+datelen, sizeof (pre)-datelen, " %s %s%s ", prior [priority-1], cat, func);
              ^~~~~~~~~~~
log.c:691:25: error: automatic variable 'line' with bounds must have initializer
    _Nt_array_ptr<char> line;
                        ^
4 warnings and 35 errors generated.
make[3]: [log.lo] Error 1 (ignored)
libtool:   error: 'log.lo' is not a valid libtool object
make[3]: [libicelog.la] Error 1 (ignored)
ar: `u' modifier ignored since `D' is the default (see `U')
ar: `u' modifier ignored since `D' is the default (see `U')
In file included from main.c:69:
./connection.h:58:36: error: 'type name' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
    _Ptr<int (_Ptr<connection_t> , _Nt_array_ptr<const void> , size_t )> send;
                                   ^
./connection.h:81:55: error: 'buf' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
ssize_t connection_send_bytes(_Ptr<connection_t> con, _Nt_array_ptr<const void> buf, size_t len);
                                                      ^
In file included from main.c:71:
In file included from ./client.h:23:
./common/httpp/encoding.h:61:117: error: expected ')'
ssize_t httpp_encoding_read(_Ptr<httpp_encoding_t> self, void* buf, size_t len, ssize_t (*)(void *, void *, size_t) cb : itype(_Ptr<ssize_t (void* , void* , size_t )> ) , void* userdata);
                                                                                                                    ^
./common/httpp/encoding.h:61:28: note: to match this '('
ssize_t httpp_encoding_read(_Ptr<httpp_encoding_t> self, void* buf, size_t len, ssize_t (*)(void *, void *, size_t) cb : itype(_Ptr<ssize_t (void* , void* , size_t )> ) , void* userdata);
                           ^
./common/httpp/encoding.h:66:69: error: expected ')'
int httpp_encoding_eof(_Ptr<httpp_encoding_t> self, int (*)(void *) cb : itype(_Ptr<int (void* )> ) , void* userdata);
                                                                    ^
./common/httpp/encoding.h:66:23: note: to match this '('
int httpp_encoding_eof(_Ptr<httpp_encoding_t> self, int (*)(void *) cb : itype(_Ptr<int (void* )> ) , void* userdata);
                      ^
In file included from main.c:71:
In file included from ./client.h:28:
In file included from ./module.h:15:
./refobject.h:155:67: warning: declaration of 'struct __va_list_tag' will not be visible outside of this function [-Wvisibility]
    _Ptr<int (refobject_t , _Ptr<const refobject_type_t> , struct __va_list_tag* )> type_newcb;
                                                                  ^
In file included from main.c:71:
./client.h:154:91: error: 'type name' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
int client_send_bytes(client_t *client : itype(_Ptr<client_t> ) , const void *buf : itype(_Nt_array_ptr<const void> ) , unsigned int len);
                                                                                          ^
./client.h:155:85: error: 'type name' declared as _Nt_array_ptr of type 'void'; only integer and pointer types are allowed
int client_read_bytes(client_t *client : itype(_Ptr<client_t> ) , void *buf : itype(_Nt_array_ptr<void> ) , unsigned int len);
                                                                                    ^
./client.h:157:88: error: 'type name' declared as _Nt_array_ptr of type 'void'; only integer and pointer types are allowed
ssize_t client_body_read(client_t *client : itype(_Ptr<client_t> ) , void *buf : itype(_Nt_array_ptr<void> ) , size_t len);
                                                                                       ^
In file included from main.c:78:
./auth.h:115:5: error: declaration of anonymous struct must be a definition
    struct (anonymous struct at /home/hasantouma/plum-umd-icecast/checkedc-icecast/src/auth.h:115:5) filter_admin[32];
    ^
./auth.h:115:118: error: type name requires a specifier or qualifier
    struct (anonymous struct at /home/hasantouma/plum-umd-icecast/checkedc-icecast/src/auth.h:115:5) filter_admin[32];
                                                                                                                     ^
In file included from main.c:81:
./fastevent.h:57:153: warning: declaration of 'struct __va_list_tag' will not be visible outside of this function [-Wvisibility]
refobject_t fastevent_register(fastevent_type_t type, _Ptr<void (_Ptr<const void> , fastevent_type_t , fastevent_flag_t , fastevent_datatype_t , struct __va_list_tag* )> cb, _Ptr<void (void** )> freecb, void* userdata);
                                                                                                                                                        ^
main.c:199:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_DEBUG("Reloading configuration.");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
main.c:220:20: error: expression has unknown bounds
        if (strcmp(argv[i], "-b") == 0) {
                   ^~~~~~~
main.c:238:20: error: expression has unknown bounds
        if (strcmp(argv[i], "-v") == 0 || strcmp(argv[i], "--version") == 0) {
                   ^~~~~~~
main.c:238:50: error: expression has unknown bounds
        if (strcmp(argv[i], "-v") == 0 || strcmp(argv[i], "--version") == 0) {
                                                 ^~~~~~~
main.c:243:20: error: expression has unknown bounds
        if (strcmp(argv[i], "-c") == 0) {
                   ^~~~~~~
main.c:245:25: error: argument has unknown bounds, bounds expected because the 1st parameter has bounds
                strncpy(filename, argv[i + 1], size-1);
                        ^~~~~~~~
main.c:245:35: warning: cannot prove argument meets declared bounds for 2nd parameter [-Wcheck-bounds-decls-unchecked-scope]
                strncpy(filename, argv[i + 1], size-1);
                                  ^~~~~~~~~~~
main.c:245:35: note: (expanded) expected argument bounds are 'bounds((const char *)argv[i + 1], (const char *)argv[i + 1] + size - 1)'
main.c:245:35: note: (expanded) inferred bounds are 'bounds(argv[i + 1], argv[i + 1] + 0)'
                strncpy(filename, argv[i + 1], size-1);
                                  ^~~~~~~~~~~
main.c:245:35: error: expression has unknown bounds
                strncpy(filename, argv[i + 1], size-1);
                                  ^~~~~~~~~~~
main.c:246:17: error: expression has unknown bounds
                filename[size-1] = 0;
                ^~~~~~~~~~~~~~~~
main.c:210:13: error: expression has unknown bounds
        if (filename[0] != 0) {
            ^~~~~~~~~~~
main.c:273:25: error: automatic variable 'fn_error' with bounds must have initializer
    _Nt_array_ptr<char> fn_error;
                        ^
main.c:274:25: error: automatic variable 'fn_access' with bounds must have initializer
    _Nt_array_ptr<char> fn_access;
                        ^
main.c:275:25: error: automatic variable 'fn_playlist' with bounds must have initializer
    _Nt_array_ptr<char> fn_playlist;
                        ^
main.c:276:25: error: automatic variable 'buf' with bounds must have initializer
    _Nt_array_ptr<char> buf;
                        ^
main.c:284:18: error: argument does not meet declared bounds for 1st parameter
        snprintf(fn_error, FILENAME_MAX, "%s%s%s", config->log_dir, PATH_SEPARATOR, config->error_log);
                 ^~~~~~~~
main.c:284:18: note: source bounds are an empty range
main.c:284:18: note: destination upper bound is above source upper bound
main.c:284:18: note: (expanded) expected argument bounds are 'bounds((char *)fn_error, (char *)fn_error + (size_t)4096 == 0 ? 0 : (size_t)4096 - 1)'
main.c:284:18: note: (expanded) inferred bounds are 'bounds(fn_error, fn_error + 0)'
        snprintf(fn_error, FILENAME_MAX, "%s%s%s", config->log_dir, PATH_SEPARATOR, config->error_log);
                 ^~~~~~~~
main.c:293:9: warning: out-of-bounds memory access [-Wcheck-memory-accesses]
        buf[sizeof(buf)-1] = 0;
        ^~~~~~~~~~~~~~~~~~
main.c:293:9: note: source bounds are an empty range
main.c:293:9: note: accesses memory at or above the upper bound
main.c:293:9: note: (expanded) inferred bounds are 'bounds(buf, buf + 0)'
main.c:294:18: error: argument does not meet declared bounds for 1st parameter
        snprintf(buf, sizeof(buf)-1,
                 ^~~
main.c:294:18: note: source bounds are an empty range
main.c:294:18: note: destination upper bound is above source upper bound
main.c:294:18: note: (expanded) expected argument bounds are 'bounds((char *)buf, (char *)buf + sizeof (buf) - 1 == 0 ? 0 : sizeof (buf) - 1 - 1)'
main.c:294:18: note: (expanded) inferred bounds are 'bounds(buf, buf + 0)'
        snprintf(buf, sizeof(buf)-1,
                 ^~~
main.c:298:22: error: cast source bounds are too narrow for '_Ptr<const char>'
        _fatal_error(buf);
                     ^~~
main.c:298:22: note: source bounds are an empty range
main.c:298:22: note: target upper bound is above source upper bound
main.c:298:22: note: (expanded) required bounds are 'bounds((_Array_ptr<const char>)buf, (_Array_ptr<const char>)buf + 1)'
main.c:298:22: note: (expanded) inferred bounds are 'bounds(buf, buf + 0)'
main.c:306:18: error: argument does not meet declared bounds for 1st parameter
        snprintf(fn_access, FILENAME_MAX, "%s%s%s", config->log_dir, PATH_SEPARATOR, config->access_log);
                 ^~~~~~~~~
main.c:306:18: note: source bounds are an empty range
main.c:306:18: note: destination upper bound is above source upper bound
main.c:306:18: note: (expanded) expected argument bounds are 'bounds((char *)fn_access, (char *)fn_access + (size_t)4096 == 0 ? 0 : (size_t)4096 - 1)'
main.c:306:18: note: (expanded) inferred bounds are 'bounds(fn_access, fn_access + 0)'
        snprintf(fn_access, FILENAME_MAX, "%s%s%s", config->log_dir, PATH_SEPARATOR, config->access_log);
                 ^~~~~~~~~
main.c:315:9: warning: out-of-bounds memory access [-Wcheck-memory-accesses]
        buf[sizeof(buf)-1] = 0;
        ^~~~~~~~~~~~~~~~~~
main.c:315:9: note: source bounds are an empty range
main.c:315:9: note: accesses memory at or above the upper bound
main.c:315:9: note: (expanded) inferred bounds are 'bounds(buf, buf + 0)'
main.c:316:18: error: argument does not meet declared bounds for 1st parameter
        snprintf(buf, sizeof(buf) - 1,
                 ^~~
main.c:316:18: note: source bounds are an empty range
main.c:316:18: note: destination upper bound is above source upper bound
main.c:316:18: note: (expanded) expected argument bounds are 'bounds((char *)buf, (char *)buf + sizeof (buf) - 1 == 0 ? 0 : sizeof (buf) - 1 - 1)'
main.c:316:18: note: (expanded) inferred bounds are 'bounds(buf, buf + 0)'
        snprintf(buf, sizeof(buf) - 1,
                 ^~~
main.c:320:22: error: cast source bounds are too narrow for '_Ptr<const char>'
        _fatal_error(buf);
                     ^~~
main.c:320:22: note: source bounds are an empty range
main.c:320:22: note: target upper bound is above source upper bound
main.c:320:22: note: (expanded) required bounds are 'bounds((_Array_ptr<const char>)buf, (_Array_ptr<const char>)buf + 1)'
main.c:320:22: note: (expanded) inferred bounds are 'bounds(buf, buf + 0)'
main.c:324:18: error: argument does not meet declared bounds for 1st parameter
        snprintf(fn_playlist, FILENAME_MAX, "%s%s%s", config->log_dir, PATH_SEPARATOR, config->playlist_log);
                 ^~~~~~~~~~~
main.c:324:18: note: source bounds are an empty range
main.c:324:18: note: destination upper bound is above source upper bound
main.c:324:18: note: (expanded) expected argument bounds are 'bounds((char *)fn_playlist, (char *)fn_playlist + (size_t)4096 == 0 ? 0 : (size_t)4096 - 1)'
main.c:324:18: note: (expanded) inferred bounds are 'bounds(fn_playlist, fn_playlist + 0)'
        snprintf(fn_playlist, FILENAME_MAX, "%s%s%s", config->log_dir, PATH_SEPARATOR, config->playlist_log);
                 ^~~~~~~~~~~
main.c:327:13: warning: out-of-bounds memory access [-Wcheck-memory-accesses]
            buf[sizeof(buf)-1] = 0;
            ^~~~~~~~~~~~~~~~~~
main.c:327:13: note: source bounds are an empty range
main.c:327:13: note: accesses memory at or above the upper bound
main.c:327:13: note: (expanded) inferred bounds are 'bounds(buf, buf + 0)'
main.c:328:22: error: argument does not meet declared bounds for 1st parameter
            snprintf(buf, sizeof(buf)-1,
                     ^~~
main.c:328:22: note: source bounds are an empty range
main.c:328:22: note: destination upper bound is above source upper bound
main.c:328:22: note: (expanded) expected argument bounds are 'bounds((char *)buf, (char *)buf + sizeof (buf) - 1 == 0 ? 0 : sizeof (buf) - 1 - 1)'
main.c:328:22: note: (expanded) inferred bounds are 'bounds(buf, buf + 0)'
            snprintf(buf, sizeof(buf)-1,
                     ^~~
main.c:332:26: error: cast source bounds are too narrow for '_Ptr<const char>'
            _fatal_error(buf);
                         ^~~
main.c:332:26: note: source bounds are an empty range
main.c:332:26: note: target upper bound is above source upper bound
main.c:332:26: note: (expanded) required bounds are 'bounds((_Array_ptr<const char>)buf, (_Array_ptr<const char>)buf + 1)'
main.c:332:26: note: (expanded) inferred bounds are 'bounds(buf, buf + 0)'
main.c:362:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_DEBUG("New pidfile on %H", config->pidfile);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
main.c:392:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_INFO("pidfile %H updated.", pidfile);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:50:33: note: expanded from macro 'ICECAST_LOG_INFO'
#define ICECAST_LOG_INFO(...)   ICECAST_LOG(ICECAST_LOGLEVEL_INFO,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
main.c:385:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_ERROR("Can not open new pidfile for writing.");
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
main.c:378:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_ERROR("Can not allocate memory for pidfile filename. BAD.");
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
main.c:371:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_ERROR("Can not write new pidfile, chroot in effect.");
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
main.c:366:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_ERROR("Can not write new pidfile, changeowner in effect.");
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
main.c:411:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("Can not listen on any sockets.");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
main.c:540:18: error: argument does not meet declared bounds for 1st parameter
        snprintf(system, sizeof(system), "%s %s, %s, %s, %s",
                 ^~~~~~
main.c:540:18: note: source bounds are an empty range
main.c:540:18: note: destination upper bound is above source upper bound
main.c:540:18: note: (expanded) expected argument bounds are 'bounds((char *)system, (char *)system + sizeof (system) == 0 ? 0 : sizeof (system) - 1)'
main.c:540:18: note: (expanded) inferred bounds are 'bounds(system, system + 0)'
        snprintf(system, sizeof(system), "%s %s, %s, %s, %s",
                 ^~~~~~
main.c:551:4: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
   ICECAST_LOG_INFO("Running on %s; OS: %s; Address Bits: %i", hostname, system, sizeof(void*)*8);
   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:50:33: note: expanded from macro 'ICECAST_LOG_INFO'
#define ICECAST_LOG_INFO(...)   ICECAST_LOG(ICECAST_LOGLEVEL_INFO,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
main.c:556:12: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
           ICECAST_LOG_WARN("Hostname is not set to anything useful in <hostname>, Consider setting it to the system's name \"%s\".", hostname);
           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
main.c:574:25: error: automatic variable 'pbuf' with bounds must have initializer
    _Nt_array_ptr<char> pbuf;
                        ^
main.c:624:32: error: passing '_Nt_array_ptr<_Nt_array_ptr<char>>' to parameter of incompatible type '_Ptr<_Ptr<char>>'
    config_parse_cmdline(argc, argv);
                               ^~~~
./cfgfile.h:293:52: note: passing argument to parameter 'argv' here
int config_parse_cmdline(int arg, _Ptr<_Ptr<char>> argv);
                                                   ^
main.c:661:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_INFO("%s server started", ICECAST_VERSION_STRING);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:50:33: note: expanded from macro 'ICECAST_LOG_INFO'
#define ICECAST_LOG_INFO(...)   ICECAST_LOG(ICECAST_LOGLEVEL_INFO,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
main.c:662:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_INFO("Server's PID is %lli", (long long int)getpid());
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:50:33: note: expanded from macro 'ICECAST_LOG_INFO'
#define ICECAST_LOG_INFO(...)   ICECAST_LOG(ICECAST_LOGLEVEL_INFO,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
main.c:682:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_INFO("Shutting down");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:50:33: note: expanded from macro 'ICECAST_LOG_INFO'
#define ICECAST_LOG_INFO(...)   ICECAST_LOG(ICECAST_LOGLEVEL_INFO,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
main.c:595:20: error: argument does not meet declared bounds for 1st parameter
            memset(pbuf, '\000', sizeof(pbuf));
                   ^~~~
main.c:595:20: note: source bounds are an empty range
main.c:595:20: note: destination upper bound is above source upper bound
main.c:595:20: note: (expanded) expected argument bounds are 'bounds((_Array_ptr<char>)pbuf, (_Array_ptr<char>)pbuf + sizeof (pbuf))'
main.c:595:20: note: (expanded) inferred bounds are 'bounds(pbuf, pbuf + 0)'
            memset(pbuf, '\000', sizeof(pbuf));
                   ^~~~
main.c:596:22: error: argument does not meet declared bounds for 1st parameter
            snprintf(pbuf, sizeof(pbuf)-1,
                     ^~~~
main.c:596:22: note: source bounds are an empty range
main.c:596:22: note: destination upper bound is above source upper bound
main.c:596:22: note: (expanded) expected argument bounds are 'bounds((char *)pbuf, (char *)pbuf + sizeof (pbuf) - 1 == 0 ? 0 : sizeof (pbuf) - 1 - 1)'
main.c:596:22: note: (expanded) inferred bounds are 'bounds(pbuf, pbuf + 0)'
            snprintf(pbuf, sizeof(pbuf)-1,
                     ^~~~
main.c:598:26: error: cast source bounds are too narrow for '_Ptr<const char>'
            _fatal_error(pbuf);
                         ^~~~
main.c:598:26: note: source bounds are an empty range
main.c:598:26: note: target upper bound is above source upper bound
main.c:598:26: note: (expanded) required bounds are 'bounds((_Array_ptr<const char>)pbuf, (_Array_ptr<const char>)pbuf + 1)'
main.c:598:26: note: (expanded) inferred bounds are 'bounds(pbuf, pbuf + 0)'
main.c:595:41: warning: 'memset' call operates on objects of type 'char' while the size is based on a different type '_Nt_array_ptr<char>' [-Wsizeof-pointer-memaccess]
            memset(pbuf, '\000', sizeof(pbuf));
                   ~~~~                 ^~~~
main.c:595:41: note: did you mean to provide an explicit length?
            memset(pbuf, '\000', sizeof(pbuf));
                                        ^~~~
7 warnings and 49 errors generated.
make[3]: [icecast-main.o] Error 1 (ignored)
In file included from cfgfile.c:35:
./auth.h:115:5: error: declaration of anonymous struct must be a definition
    struct (anonymous struct at /home/hasantouma/plum-umd-icecast/checkedc-icecast/src/auth.h:115:5) filter_admin[32];
    ^
./auth.h:115:118: error: type name requires a specifier or qualifier
    struct (anonymous struct at /home/hasantouma/plum-umd-icecast/checkedc-icecast/src/auth.h:115:5) filter_admin[32];
                                                                                                                     ^
In file included from cfgfile.c:37:
./refobject.h:155:67: warning: declaration of 'struct __va_list_tag' will not be visible outside of this function [-Wvisibility]
    _Ptr<int (refobject_t , _Ptr<const refobject_type_t> , struct __va_list_tag* )> type_newcb;
                                                                  ^
In file included from cfgfile.c:44:
./connection.h:58:36: error: 'type name' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
    _Ptr<int (_Ptr<connection_t> , _Nt_array_ptr<const void> , size_t )> send;
                                   ^
./connection.h:81:55: error: 'buf' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
ssize_t connection_send_bytes(_Ptr<connection_t> con, _Nt_array_ptr<const void> buf, size_t len);
                                                      ^
cfgfile.c:195:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("Unknown operation mode \"%s\", falling back to DEFAULT.", str);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
cfgfile.c:209:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("Unknown listener type \"%s\", falling back to NORMAL.", str);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
cfgfile.c:220:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("Can not convert string \"%H\" to ID.", href);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
cfgfile.c:263:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_WARN("%s", warning);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
cfgfile.c:275:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_WARN("%s", warning);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
cfgfile.c:446:45: error: passing '_Ptr<const char>' to parameter of incompatible type 'const char *'
    __append_option_tag(role, "action_add", action_add);
                                            ^~~~~~~~~~
cfgfile.c:406:82: note: passing argument to parameter 'value' here
static void __append_option_tag(xmlNodePtr parent, const char *name, const char *value)
                                                                                 ^
cfgfile.c:447:48: error: passing '_Ptr<const char>' to parameter of incompatible type 'const char *'
    __append_option_tag(role, "action_remove", action_remove);
                                               ^~~~~~~~~~~~~
cfgfile.c:406:82: note: passing argument to parameter 'value' here
static void __append_option_tag(xmlNodePtr parent, const char *name, const char *value)
                                                                                 ^
cfgfile.c:461:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_DEBUG("Failed to set up authenticator.");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
cfgfile.c:459:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_DEBUG("Pushed authenticator %p on stack %p.", auth, stack);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
cfgfile.c:497:41: error: passing '_Ptr<const char>' to parameter of incompatible type 'const char *'
    __append_option_tag(exec, "action", action);
                                        ^~~~~~
cfgfile.c:406:82: note: passing argument to parameter 'value' here
static void __append_option_tag(xmlNodePtr parent, const char *name, const char *value)
                                                                                 ^
cfgfile.c:668:10: error: argument has unknown bounds, bounds expected because the 1st parameter has bounds
    free(c->relay);
         ^~~~~~~~
cfgfile.c:695:21: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    refobject_unref(c->reportxml_db);
                    ^~~~~~~~~~~~~~~
cfgfile.c:666:27: error: expression has unknown bounds
        relay_config_free(c->relay[i]);
                          ^~~~~~~~~~~
cfgfile.c:710:29: error: passing '_Nt_array_ptr<char>' to parameter of incompatible type 'const char *'
    ret = config_parse_file(config->config_filename, &new_config);
                            ^~~~~~~~~~~~~~~~~~~~~~~
./cfgfile.h:291:35: note: passing argument to parameter 'filename' here
int config_parse_file(const char *filename, _Ptr<ice_config_t> configuration);
                                  ^
cfgfile.c:712:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("Error parsing config, not replacing existing config");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
cfgfile.c:725:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_ERROR("Parse error in reading %s", config->config_filename);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
cfgfile.c:715:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_ERROR("Config filename null or blank");
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
cfgfile.c:718:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_ERROR("Root element not found in %s", config->config_filename);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
cfgfile.c:721:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_ERROR("Not an icecast2 config file: %s",
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
cfgfile.c:748:30: error: passing '_Nt_array_ptr<const char>' to parameter of incompatible type 'const char *'
    return config_parse_file(filename, &_current_configuration);
                             ^~~~~~~~
./cfgfile.h:291:35: note: passing argument to parameter 'filename' here
int config_parse_file(const char *filename, _Ptr<ice_config_t> configuration);
                                  ^
cfgfile.c:774:36: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
    configuration->config_filename = strdup(filename);
                                   ^ ~~~~~~~~~~~~~~~~
cfgfile.c:924:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_ERROR("Can not check hostname \"%s\".",
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
cfgfile.c:928:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_WARN("Warning, <hostname> seems not to be set to a "
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
cfgfile.c:933:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_WARN("Warning, <hostname> not configured, using "
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
cfgfile.c:940:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_WARN("Warning, <hostname> seems to be set to an IPv4 "
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
cfgfile.c:945:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_WARN("Warning, <hostname> seems to be set to an IPv6 "
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
cfgfile.c:950:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_WARN("Warning, <hostname> contains unusual "
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
cfgfile.c:1029:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_WARN("<port> setting must not be empty.");
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
cfgfile.c:1016:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_WARN("<mime-types> has been moved into <paths>. Please update your configuration file.");
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
cfgfile.c:1000:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_ERROR("<icelogin> support has been removed.");
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
cfgfile.c:992:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_WARN("<source-password> defined outside "
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
cfgfile.c:985:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_WARN("Warning, server version string override "
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
cfgfile.c:1101:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_ERROR("Can not find nor create default mount, but "
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
cfgfile.c:1117:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_WARN("Warning, serving of static files has been disabled "
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
cfgfile.c:1125:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_WARN("Warning, <location> not configured, using default "
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
cfgfile.c:1133:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_WARN("Warning, <admin> contact not configured, using "
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
cfgfile.c:1177:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_ERROR("Unknown config tag: %s", node->name);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
cfgfile.c:1168:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_WARN("<burst-on-connect> is deprecated, use <burst-size> instead.");
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
cfgfile.c:1191:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("new style parser called on old style config.");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
cfgfile.c:1370:10: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
         ICECAST_LOG_ERROR("Unknown authentication type in legacy mode. "
         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
cfgfile.c:1609:25: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
            auth->mount = strdup((char *)mount->mountname);
                        ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cfgfile.c:1611:25: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
            auth->mount = strdup("(default mount)");
                        ^ ~~~~~~~~~~~~~~~~~~~~~~~~~
cfgfile.c:1405:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_WARN("Unknown mountpoint type: %s", tmp);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
cfgfile.c:1474:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_WARN("<no-yp> defined. Please use <public>. This is "
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
cfgfile.c:1456:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_WARN("<mp3-metadata-interval> is deprecated and will be "
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
cfgfile.c:1566:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_WARN("<relay> set within <mount> with no mountpoint defined.");
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
cfgfile.c:1563:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_WARN("<relay> set within <mount> for mountpoint %s%s%s that is not type=\"normal\"",
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
cfgfile.c:1594:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_DEBUG("Mount %p (mountpoint %s) has %sactive "
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
cfgfile.c:1602:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_WARN("Default mount %s has mount-name set. This is "
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
cfgfile.c:1623:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_WARN("Config for mount %s contains fallback options "
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
cfgfile.c:1663:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_WARN("Unknown type %s for "
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
cfgfile.c:1765:51: error: argument has unknown bounds, bounds expected because the 1st parameter has bounds
    _Array_ptr<_Ptr<relay_config_t>> n =  realloc(configuration->relay, sizeof(*configuration->relay)*(configuration->relay_length + 1));
                                                  ^~~~~~~~~~~~~~~~~~~~
cfgfile.c:1773:5: error: expression has unknown bounds
    configuration->relay[configuration->relay_length++] = relay;
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cfgfile.c:1814:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_WARN("<upstream> of unknown type is ignored.");
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
cfgfile.c:1804:66: error: argument has unknown bounds, bounds expected because the 1st parameter has bounds
                _Array_ptr<relay_config_upstream_t> n =  realloc(relay->upstream, sizeof(*n)*(relay->upstreams + 1));
                                                                 ^~~~~~~~~~~~~~~
cfgfile.c:1808:71: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                    _parse_relay_upstream(doc, node->xmlChildrenNode, &(n[relay->upstreams]));
                                                                      ^~~~~~~~~~~~~~~~~~~~~~
cfgfile.c:1788:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_WARN("Relay defined within mount \"%s\" defines <local-mount> which is ignored.", mount);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
cfgfile.c:1768:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("Can not allocate memory for additional relay.");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
cfgfile.c:1869:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_WARN("<port> setting must not be empty.");
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
cfgfile.c:1938:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_ERROR("Mount level source password defined within global <authentication> section.");
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
cfgfile.c:1999:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("BAD. old_style=NULL");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
cfgfile.c:2009:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("Maximum number of yp directories exceeded!");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
cfgfile.c:2046:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("Can not allocate memory for resource.");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
cfgfile.c:2216:37: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                    refobject_unref(report);
                                    ^~~~~~
cfgfile.c:2217:21: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                    ICECAST_LOG_INFO("File \"%H\" added to report xml database", temp);
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:50:33: note: expanded from macro 'ICECAST_LOG_INFO'
#define ICECAST_LOG_INFO(...)   ICECAST_LOG(ICECAST_LOGLEVEL_INFO,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
cfgfile.c:2213:21: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                    ICECAST_LOG_ERROR("Can not parse report xml database \"%H\"", temp);
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
cfgfile.c:2208:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_ERROR("Can not read report xml database \"%H\" as XML", temp);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
cfgfile.c:2203:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_WARN("<reportxmldb> setting must not be empty.");
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
cfgfile.c:2190:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_WARN("<adminroot> setting must not be empty.");
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
cfgfile.c:2180:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_WARN("<webroot> setting must not be empty.");
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
cfgfile.c:2171:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_WARN("Node %s uses unsupported implementation.", node->name);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
cfgfile.c:2161:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_WARN("Node %s uses unsupported implementation.", node->name);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
cfgfile.c:2132:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_WARN("<logdir> setting must not be empty.");
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
cfgfile.c:2269:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_WARN("<logarchive> must not be empty.");
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
cfgfile.c:2246:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_WARN("<errorlog> setting must not be empty.");
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
cfgfile.c:2238:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_WARN("<accesslog> setting must not be empty.");
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
cfgfile.c:2315:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_ERROR("Unknown config tag: %s", node->name);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
cfgfile.c:2307:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_WARN("Node %s uses unsupported implementation.", node->name);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
cfgfile.c:2298:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_WARN("Node %s uses unsupported implementation.", node->name);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
cfgfile.c:2289:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_WARN("Node %s uses unsupported implementation.", node->name);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
1 warning and 84 errors generated.
make[3]: [icecast-cfgfile.o] Error 1 (ignored)
In file included from logging.c:26:
./connection.h:58:36: error: 'type name' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
    _Ptr<int (_Ptr<connection_t> , _Nt_array_ptr<const void> , size_t )> send;
                                   ^
./connection.h:81:55: error: 'buf' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
ssize_t connection_send_bytes(_Ptr<connection_t> con, _Nt_array_ptr<const void> buf, size_t len);
                                                      ^
In file included from logging.c:28:
In file included from ./client.h:23:
./common/httpp/encoding.h:61:117: error: expected ')'
ssize_t httpp_encoding_read(_Ptr<httpp_encoding_t> self, void* buf, size_t len, ssize_t (*)(void *, void *, size_t) cb : itype(_Ptr<ssize_t (void* , void* , size_t )> ) , void* userdata);
                                                                                                                    ^
./common/httpp/encoding.h:61:28: note: to match this '('
ssize_t httpp_encoding_read(_Ptr<httpp_encoding_t> self, void* buf, size_t len, ssize_t (*)(void *, void *, size_t) cb : itype(_Ptr<ssize_t (void* , void* , size_t )> ) , void* userdata);
                           ^
./common/httpp/encoding.h:66:69: error: expected ')'
int httpp_encoding_eof(_Ptr<httpp_encoding_t> self, int (*)(void *) cb : itype(_Ptr<int (void* )> ) , void* userdata);
                                                                    ^
./common/httpp/encoding.h:66:23: note: to match this '('
int httpp_encoding_eof(_Ptr<httpp_encoding_t> self, int (*)(void *) cb : itype(_Ptr<int (void* )> ) , void* userdata);
                      ^
In file included from logging.c:28:
In file included from ./client.h:28:
In file included from ./module.h:15:
./refobject.h:155:67: warning: declaration of 'struct __va_list_tag' will not be visible outside of this function [-Wvisibility]
    _Ptr<int (refobject_t , _Ptr<const refobject_type_t> , struct __va_list_tag* )> type_newcb;
                                                                  ^
In file included from logging.c:28:
./client.h:154:91: error: 'type name' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
int client_send_bytes(client_t *client : itype(_Ptr<client_t> ) , const void *buf : itype(_Nt_array_ptr<const void> ) , unsigned int len);
                                                                                          ^
./client.h:155:85: error: 'type name' declared as _Nt_array_ptr of type 'void'; only integer and pointer types are allowed
int client_read_bytes(client_t *client : itype(_Ptr<client_t> ) , void *buf : itype(_Nt_array_ptr<void> ) , unsigned int len);
                                                                                    ^
./client.h:157:88: error: 'type name' declared as _Nt_array_ptr of type 'void'; only integer and pointer types are allowed
ssize_t client_body_read(client_t *client : itype(_Ptr<client_t> ) , void *buf : itype(_Nt_array_ptr<void> ) , size_t len);
                                                                                       ^
logging.c:152:14: error: assigning to '_Nt_array_ptr<const char>' from incompatible type 'const char *'
    referrer = httpp_getvar (client->parser, "referer");
             ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
logging.c:156:16: error: assigning to '_Nt_array_ptr<const char>' from incompatible type 'const char *'
    user_agent = httpp_getvar (client->parser, "user-agent");
               ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
logging.c:210:25: error: automatic variable 'line' with bounds must have initializer
    _Nt_array_ptr<char> line;
                        ^
logging.c:216:9: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
    eol = strrchr (line, '\n');
        ^ ~~~~~~~~~~~~~~~~~~~~
logging.c:215:16: error: argument does not meet declared bounds for 1st parameter
    vsnprintf (line, sizeof (line), fmt, ap);
               ^~~~
logging.c:215:16: note: source bounds are an empty range
logging.c:215:16: note: destination upper bound is above source upper bound
logging.c:215:16: note: (expanded) expected argument bounds are 'bounds((char *)line, (char *)line + sizeof (line))'
logging.c:215:16: note: (expanded) inferred bounds are 'bounds(line, line + 0)'
    vsnprintf (line, sizeof (line), fmt, ap);
               ^~~~
logging.c:217:14: warning: out-of-bounds memory access [-Wcheck-memory-accesses]
    if (eol) *eol='\0';
             ^~~~
logging.c:217:14: note: source bounds are an empty range
logging.c:217:14: note: accesses memory at or above the upper bound
logging.c:217:14: note: (expanded) inferred bounds are 'bounds(eol, eol + 0)'
logging.c:227:29: error: automatic variable 'fn_error' with bounds must have initializer
        _Nt_array_ptr<char> fn_error;
                            ^
logging.c:238:29: error: automatic variable 'fn_error' with bounds must have initializer
        _Nt_array_ptr<char> fn_error;
                            ^
logging.c:248:29: error: automatic variable 'fn_error' with bounds must have initializer
        _Nt_array_ptr<char> fn_error;
                            ^
logging.c:228:19: error: argument does not meet declared bounds for 1st parameter
        snprintf (fn_error, FILENAME_MAX, "%s%s%s", config->log_dir, PATH_SEPARATOR, config->error_log);
                  ^~~~~~~~
logging.c:228:19: note: source bounds are an empty range
logging.c:228:19: note: destination upper bound is above source upper bound
logging.c:228:19: note: (expanded) expected argument bounds are 'bounds((char *)fn_error, (char *)fn_error + (size_t)4096 == 0 ? 0 : (size_t)4096 - 1)'
logging.c:228:19: note: (expanded) inferred bounds are 'bounds(fn_error, fn_error + 0)'
        snprintf (fn_error, FILENAME_MAX, "%s%s%s", config->log_dir, PATH_SEPARATOR, config->error_log);
                  ^~~~~~~~
logging.c:239:19: error: argument does not meet declared bounds for 1st parameter
        snprintf (fn_error, FILENAME_MAX, "%s%s%s", config->log_dir, PATH_SEPARATOR, config->access_log);
                  ^~~~~~~~
logging.c:239:19: note: source bounds are an empty range
logging.c:239:19: note: destination upper bound is above source upper bound
logging.c:239:19: note: (expanded) expected argument bounds are 'bounds((char *)fn_error, (char *)fn_error + (size_t)4096 == 0 ? 0 : (size_t)4096 - 1)'
logging.c:239:19: note: (expanded) inferred bounds are 'bounds(fn_error, fn_error + 0)'
        snprintf (fn_error, FILENAME_MAX, "%s%s%s", config->log_dir, PATH_SEPARATOR, config->access_log);
                  ^~~~~~~~
logging.c:249:19: error: argument does not meet declared bounds for 1st parameter
        snprintf (fn_error, FILENAME_MAX, "%s%s%s", config->log_dir, PATH_SEPARATOR, config->playlist_log);
                  ^~~~~~~~
logging.c:249:19: note: source bounds are an empty range
logging.c:249:19: note: destination upper bound is above source upper bound
logging.c:249:19: note: (expanded) expected argument bounds are 'bounds((char *)fn_error, (char *)fn_error + (size_t)4096 == 0 ? 0 : (size_t)4096 - 1)'
logging.c:249:19: note: (expanded) inferred bounds are 'bounds(fn_error, fn_error + 0)'
        snprintf (fn_error, FILENAME_MAX, "%s%s%s", config->log_dir, PATH_SEPARATOR, config->playlist_log);
                  ^~~~~~~~
2 warnings and 18 errors generated.
make[3]: [icecast-logging.o] Error 1 (ignored)
In file included from sighandler.c:25:
./connection.h:58:36: error: 'type name' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
    _Ptr<int (_Ptr<connection_t> , _Nt_array_ptr<const void> , size_t )> send;
                                   ^
./connection.h:81:55: error: 'buf' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
ssize_t connection_send_bytes(_Ptr<connection_t> con, _Nt_array_ptr<const void> buf, size_t len);
                                                      ^
In file included from sighandler.c:27:
In file included from ./client.h:23:
./common/httpp/encoding.h:61:117: error: expected ')'
ssize_t httpp_encoding_read(_Ptr<httpp_encoding_t> self, void* buf, size_t len, ssize_t (*)(void *, void *, size_t) cb : itype(_Ptr<ssize_t (void* , void* , size_t )> ) , void* userdata);
                                                                                                                    ^
./common/httpp/encoding.h:61:28: note: to match this '('
ssize_t httpp_encoding_read(_Ptr<httpp_encoding_t> self, void* buf, size_t len, ssize_t (*)(void *, void *, size_t) cb : itype(_Ptr<ssize_t (void* , void* , size_t )> ) , void* userdata);
                           ^
./common/httpp/encoding.h:66:69: error: expected ')'
int httpp_encoding_eof(_Ptr<httpp_encoding_t> self, int (*)(void *) cb : itype(_Ptr<int (void* )> ) , void* userdata);
                                                                    ^
./common/httpp/encoding.h:66:23: note: to match this '('
int httpp_encoding_eof(_Ptr<httpp_encoding_t> self, int (*)(void *) cb : itype(_Ptr<int (void* )> ) , void* userdata);
                      ^
In file included from sighandler.c:27:
In file included from ./client.h:28:
In file included from ./module.h:15:
./refobject.h:155:67: warning: declaration of 'struct __va_list_tag' will not be visible outside of this function [-Wvisibility]
    _Ptr<int (refobject_t , _Ptr<const refobject_type_t> , struct __va_list_tag* )> type_newcb;
                                                                  ^
In file included from sighandler.c:27:
./client.h:154:91: error: 'type name' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
int client_send_bytes(client_t *client : itype(_Ptr<client_t> ) , const void *buf : itype(_Nt_array_ptr<const void> ) , unsigned int len);
                                                                                          ^
./client.h:155:85: error: 'type name' declared as _Nt_array_ptr of type 'void'; only integer and pointer types are allowed
int client_read_bytes(client_t *client : itype(_Ptr<client_t> ) , void *buf : itype(_Nt_array_ptr<void> ) , unsigned int len);
                                                                                    ^
./client.h:157:88: error: 'type name' declared as _Nt_array_ptr of type 'void'; only integer and pointer types are allowed
ssize_t client_body_read(client_t *client : itype(_Ptr<client_t> ) , void *buf : itype(_Nt_array_ptr<void> ) , size_t len);
                                                                                       ^
sighandler.c:57:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_INFO("Caught signal %d, scheduling config re-read...", signo);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:50:33: note: expanded from macro 'ICECAST_LOG_INFO'
#define ICECAST_LOG_INFO(...)   ICECAST_LOG(ICECAST_LOGLEVEL_INFO,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
sighandler.c:69:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_INFO("Caught signal %d, shutting down...", signo);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:50:33: note: expanded from macro 'ICECAST_LOG_INFO'
#define ICECAST_LOG_INFO(...)   ICECAST_LOG(ICECAST_LOGLEVEL_INFO,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
1 warning and 9 errors generated.
make[3]: [icecast-sighandler.o] Error 1 (ignored)
In file included from connection.c:42:
./connection.h:58:36: error: 'type name' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
    _Ptr<int (_Ptr<connection_t> , _Nt_array_ptr<const void> , size_t )> send;
                                   ^
./connection.h:81:55: error: 'buf' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
ssize_t connection_send_bytes(_Ptr<connection_t> con, _Nt_array_ptr<const void> buf, size_t len);
                                                      ^
In file included from connection.c:46:
./refobject.h:155:67: warning: declaration of 'struct __va_list_tag' will not be visible outside of this function [-Wvisibility]
    _Ptr<int (refobject_t , _Ptr<const refobject_type_t> , struct __va_list_tag* )> type_newcb;
                                                                  ^
In file included from connection.c:48:
In file included from ./client.h:23:
./common/httpp/encoding.h:61:117: error: expected ')'
ssize_t httpp_encoding_read(_Ptr<httpp_encoding_t> self, void* buf, size_t len, ssize_t (*)(void *, void *, size_t) cb : itype(_Ptr<ssize_t (void* , void* , size_t )> ) , void* userdata);
                                                                                                                    ^
./common/httpp/encoding.h:61:28: note: to match this '('
ssize_t httpp_encoding_read(_Ptr<httpp_encoding_t> self, void* buf, size_t len, ssize_t (*)(void *, void *, size_t) cb : itype(_Ptr<ssize_t (void* , void* , size_t )> ) , void* userdata);
                           ^
./common/httpp/encoding.h:66:69: error: expected ')'
int httpp_encoding_eof(_Ptr<httpp_encoding_t> self, int (*)(void *) cb : itype(_Ptr<int (void* )> ) , void* userdata);
                                                                    ^
./common/httpp/encoding.h:66:23: note: to match this '('
int httpp_encoding_eof(_Ptr<httpp_encoding_t> self, int (*)(void *) cb : itype(_Ptr<int (void* )> ) , void* userdata);
                      ^
In file included from connection.c:48:
./client.h:154:91: error: 'type name' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
int client_send_bytes(client_t *client : itype(_Ptr<client_t> ) , const void *buf : itype(_Nt_array_ptr<const void> ) , unsigned int len);
                                                                                          ^
./client.h:155:85: error: 'type name' declared as _Nt_array_ptr of type 'void'; only integer and pointer types are allowed
int client_read_bytes(client_t *client : itype(_Ptr<client_t> ) , void *buf : itype(_Nt_array_ptr<void> ) , unsigned int len);
                                                                                    ^
./client.h:157:88: error: 'type name' declared as _Nt_array_ptr of type 'void'; only integer and pointer types are allowed
ssize_t client_body_read(client_t *client : itype(_Ptr<client_t> ) , void *buf : itype(_Nt_array_ptr<void> ) , size_t len);
                                                                                       ^
In file included from connection.c:57:
./auth.h:115:5: error: declaration of anonymous struct must be a definition
    struct (anonymous struct at /home/hasantouma/plum-umd-icecast/checkedc-icecast/src/auth.h:115:5) filter_admin[32];
    ^
./auth.h:115:118: error: type name requires a specifier or qualifier
    struct (anonymous struct at /home/hasantouma/plum-umd-icecast/checkedc-icecast/src/auth.h:115:5) filter_admin[32];
                                                                                                                     ^
In file included from connection.c:63:
./fastevent.h:57:153: warning: declaration of 'struct __va_list_tag' will not be visible outside of this function [-Wvisibility]
refobject_t fastevent_register(fastevent_type_t type, _Ptr<void (_Ptr<const void> , fastevent_type_t , fastevent_flag_t , fastevent_datatype_t , struct __va_list_tag* )> cb, _Ptr<void (void** )> freecb, void* userdata);
                                                                                                                                                        ^
connection.c:136:19: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    tls_ctx_unref(tls_ctx);
                  ^~~~~~~
connection.c:137:23: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    matchfile_release(banned_ip);
                      ^~~~~~~~~
connection.c:138:23: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    matchfile_release(allowed_ip);
                      ^~~~~~~~~~
connection.c:178:13: error: assigning to 'tls_ctx_t *' (aka 'struct tls_ctx_tag *') from incompatible type '_Ptr<tls_ctx_t>' (aka '_Ptr<struct tls_ctx_tag>')
    tls_ctx = tls_ctx_new(config->tls_context.cert_file, keyfile, config->tls_context.cipher_list);
            ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
connection.c:177:19: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    tls_ctx_unref(tls_ctx);
                  ^~~~~~~
connection.c:180:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_INFO("No TLS capability on any configured ports");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:50:33: note: expanded from macro 'ICECAST_LOG_INFO'
#define ICECAST_LOG_INFO(...)   ICECAST_LOG(ICECAST_LOGLEVEL_INFO,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
connection.c:205:41: error: passing '_Ptr<const void>' to parameter of incompatible type 'const void *'
    ssize_t bytes = tls_write(con->tls, buf, len);
                                        ^~~
./tls.h:45:66: note: passing argument to parameter 'buffer' here
ssize_t tls_write(tls_t *tls : itype(_Ptr<tls_t> ) , const void *buffer, size_t len);
                                                                 ^
connection.c:242:52: error: 'buf' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
static int connection_send(_Ptr<connection_t> con, _Nt_array_ptr<const void> buf, size_t len)
                                                   ^
connection.c:259:37: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    if (!matchfile_match_allow_deny(allowed_ip, banned_ip, ip))
                                    ^~~~~~~~~~
connection.c:259:49: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    if (!matchfile_match_allow_deny(allowed_ip, banned_ip, ip))
                                                ^~~~~~~~~
connection.c:264:23: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        refobject_ref(listensocket_real);
                      ^~~~~~~~~~~~~~~~~
connection.c:265:23: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        refobject_ref(listensocket_effective);
                      ^~~~~~~~~~~~~~~~~~~~~~
connection.c:299:15: error: assigning to '_Ptr<int (_Ptr<connection_t>, int, size_t)>' (aka '_Ptr<int (_Ptr<struct connection_tag>, int, unsigned long)>') from incompatible type 'int (_Ptr<connection_t>, _Ptr<const void>, size_t)' (aka 'int (_Ptr<struct connection_tag>, _Ptr<const void>, unsigned long)'): type mismatch at 2nd parameter ('int' vs '_Ptr<const void>')
    con->send = connection_send_tls;
              ^ ~~~~~~~~~~~~~~~~~~~
connection.c:292:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("Connection is now using TLS but has data put back. BAD. Discarding putback data.");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
connection.c:300:24: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    con->tls = tls_new(tls_ctx);
                       ^~~~~~~
connection.c:306:55: error: 'buf' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
ssize_t connection_send_bytes(_Ptr<connection_t> con, _Nt_array_ptr<const void> buf, size_t len)
                                                      ^
connection.c:321:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_DEBUG("On connection %p we read from putback buffer, filled with %zu bytes, requested are %zu bytes", con, con->readbufferlen, len);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
connection.c:326:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_DEBUG("New fill in buffer=<empty>");
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
connection.c:391:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_DEBUG("On connection %p %zu bytes have been put back.", con, len);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
connection.c:381:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_DEBUG("On connection %p %zu bytes have been put back.", con, len);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
connection.c:486:21: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
                ptr = strstr(client->refbuf->data, "\r\r\n\r\r\n");
                    ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
connection.c:491:21: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
                ptr = strstr(client->refbuf->data, "\r\n\r\n");
                    ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
connection.c:496:21: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
                ptr = strstr(client->refbuf->data, "\n\n");
                    ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
connection.c:535:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_DEBUG("Putting client %p in body queue.", node->client);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
connection.c:552:38: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'void *'
                    node->bodybuffer = malloc(node->bodybufferlen);
                                     ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~
connection.c:555:38: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'void *'
                    node->bodybuffer = malloc(node->bodybufferlen);
                                     ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~
connection.c:561:45: error: passing '_Nt_array_ptr<char>' to parameter of incompatible type 'void *'
            res = client_body_slurp(client, node->bodybuffer, &(node->bodybufferlen));
                                            ^~~~~~~~~~~~~~~~
./client.h:159:70: note: passing argument to parameter 'buf' here
client_slurp_result_t client_body_slurp(_Ptr<client_t> client, void* buf, _Ptr<size_t> len);
                                                                     ^
connection.c:604:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_DEBUG("Got client %p in body queue.", client);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
connection.c:609:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_DEBUG("Putting client %p back in connection queue.", client);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
connection.c:689:24: error: passing '_Ptr<client_queue_t>' (aka '_Ptr<struct client_queue_tag>') to parameter of incompatible type 'client_queue_t *' (aka 'struct client_queue_tag *')
    _add_request_queue(node);
                       ^~~~
connection.c:625:48: note: passing argument to parameter 'node' here
static void _add_request_queue(client_queue_t *node)
                                               ^
connection.c:677:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_WARN("Failed to set tcp options on client connection, dropping");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
connection.c:743:21: error: assigning to '_Nt_array_ptr<const char>' from incompatible type 'const char *'
        contenttype = httpp_getvar (source->parser, "content-type");
                    ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
connection.c:734:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_DEBUG("sources count is %d", global.sources);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
connection.c:799:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_WARN("Request to add source when maximum source limit "
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
connection.c:767:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_ERROR("No content-type header, falling back to backwards compatibility mode "
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
connection.c:764:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_ERROR("Content-type not given in PUT request, dropping source");
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
connection.c:795:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_DEBUG("source is ready to start");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
connection.c:780:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_WARN("plugin format failed for \"%s\"", source->mount);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
connection.c:754:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_WARN("Content-type \"%s\" not supported, dropping source", contenttype);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
connection.c:880:48: error: passing 'void (client_t * : itype(_Ptr<client_t>), void *)' (aka 'void (struct _client_tag * : itype(_Ptr<client_t>), void *)') to parameter of incompatible type '_Ptr<void (_Ptr<client_t>, void *)>' (aka '_Ptr<void (_Ptr<struct _client_tag>, void *)>'): type mismatch at 1st parameter ('client_t *' (aka 'struct _client_tag *') vs '_Ptr<client_t>' (aka '_Ptr<struct _client_tag>'))
            fserve_add_client_callback(client, source_client_callback, source);
                                               ^~~~~~~~~~~~~~~~~~~~~~
./fserve.h:38:114: note: passing argument to parameter 'callback' here
void fserve_add_client_callback(client_t *client : itype(_Ptr<client_t> ) , _Ptr<void (_Ptr<client_t> , void* )> callback, void *arg : itype(_Ptr<void> ) );
                                                                                                                 ^
connection.c:884:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_WARN("Mountpoint %s in use", client->uri);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
connection.c:891:32: error: cast source bounds are too narrow for '_Ptr<const char>'
    _Ptr<const char> method =  httpp_getvar(client->parser, HTTPP_VAR_REQ_TYPE);
                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
connection.c:891:32: note: source bounds are an empty range
connection.c:891:32: note: target upper bound is above source upper bound
connection.c:891:32: note: (expanded) required bounds are 'bounds((_Array_ptr<const char>)httpp_getvar(client->parser, "__req_type"), (_Array_ptr<const char>)httpp_getvar(client->parser, "__req_type") + 1)'
connection.c:891:32: note: (expanded) inferred bounds are 'bounds(value of httpp_getvar(client->parser, "__req_type"), value of httpp_getvar(client->parser, "__req_type") + 0)'
connection.c:893:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_INFO("Source logging in at mountpoint \"%s\" using %s%H%s from %s as role %s",
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:50:33: note: expanded from macro 'ICECAST_LOG_INFO'
#define ICECAST_LOG_INFO(...)   ICECAST_LOG(ICECAST_LOGLEVEL_INFO,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
connection.c:899:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_DEBUG("Source at mountpoint \"%s\" connected using deprecated SOURCE method.", client->uri);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
connection.c:903:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_WARN("source mountpoint not starting with /");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
connection.c:920:40: error: passing 'void (client_t *, void *)' (aka 'void (struct _client_tag *, void *)') to parameter of incompatible type '_Ptr<void (_Ptr<client_t>, void *)>' (aka '_Ptr<void (_Ptr<struct _client_tag>, void *)>'): type mismatch at 1st parameter ('client_t *' (aka 'struct _client_tag *') vs '_Ptr<client_t>' (aka '_Ptr<struct _client_tag>'))
    fserve_add_client_callback(client, stats_callback, NULL);
                                       ^~~~~~~~~~~~~~
./fserve.h:38:114: note: passing argument to parameter 'callback' here
void fserve_add_client_callback(client_t *client : itype(_Ptr<client_t> ) , _Ptr<void (_Ptr<client_t> , void* )> callback, void *arg : itype(_Ptr<void> ) );
                                                                                                                 ^
connection.c:954:29: error: assigning to '_Ptr<int (_Ptr<client_t>)>' (aka '_Ptr<int (_Ptr<struct _client_tag>)>') from incompatible type 'int (client_t * : itype(_Ptr<client_t>))' (aka 'int (struct _client_tag * : itype(_Ptr<client_t>))'): type mismatch at 1st parameter ('_Ptr<client_t>' (aka '_Ptr<struct _client_tag>') vs 'client_t *' (aka 'struct _client_tag *'))
    client->write_to_client = format_generic_write_to_client;
                            ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
connection.c:955:26: error: assigning to '_Ptr<int (_Ptr<source_t>, _Ptr<client_t>)>' (aka '_Ptr<int (_Ptr<struct source_tag>, _Ptr<struct _client_tag>)>') from incompatible type 'int (_Ptr<source_t>, client_t * : itype(_Ptr<client_t>))' (aka 'int (_Ptr<struct source_tag>, struct _client_tag * : itype(_Ptr<client_t>))'): type mismatch at 2nd parameter ('_Ptr<client_t>' (aka '_Ptr<struct _client_tag>') vs 'client_t *' (aka 'struct _client_tag *'))
    client->check_buffer = format_check_http_buffer;
                         ^ ~~~~~~~~~~~~~~~~~~~~~~~~
connection.c:931:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_DEBUG("max on %s is %ld (cur %lu)", source->mount,
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
connection.c:945:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_INFO("stream full, trying %s", next->mount);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:50:33: note: expanded from macro 'ICECAST_LOG_INFO'
#define ICECAST_LOG_INFO(...)   ICECAST_LOG(ICECAST_LOGLEVEL_INFO,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
connection.c:941:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_ERROR("Fallback '%s' for full source '%s' not found",
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
connection.c:966:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_DEBUG("kicking off on-demand relay");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
connection.c:969:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_DEBUG("Added client to %s", source->mount);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
connection.c:1074:59: error: passing '_Ptr<client_t>' (aka '_Ptr<struct _client_tag>') to parameter of incompatible type 'client_t *' (aka 'struct _client_tag *')
        if (!in_error && __add_listener_to_source(source, client) == -1) {
                                                          ^~~~~~
connection.c:926:65: note: passing argument to parameter 'client' here
static int __add_listener_to_source(source_t *source, client_t *client)
                                                                ^
connection.c:1011:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_DEBUG("Got client %p with URI %H", client, client->uri);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
connection.c:1039:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_DEBUG("Stats request, sending XSL transformed stats");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
connection.c:1116:13: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
        ptr = strstr(client->refbuf->data, "\r\r\n");
            ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
connection.c:1120:17: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
            ptr = strstr(client->refbuf->data, "\r\n");
                ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
connection.c:1124:21: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
                ptr = strstr(client->refbuf->data, "\n");
                    ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
connection.c:1160:20: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
    http_compliant = (char *)calloc(1, http_compliant_len);
                   ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
connection.c:1161:14: warning: cannot prove argument meets declared bounds for 1st parameter [-Wcheck-bounds-decls-unchecked-scope]
    snprintf(http_compliant, http_compliant_len,
             ^~~~~~~~~~~~~~
connection.c:1161:14: note: (expanded) expected argument bounds are 'bounds((char *)http_compliant, (char *)http_compliant + (size_t)http_compliant_len == 0 ? 0 : (size_t)http_compliant_len - 1)'
connection.c:1161:14: note: (expanded) inferred bounds are 'bounds(http_compliant, http_compliant + 0)'
    snprintf(http_compliant, http_compliant_len,
             ^~~~~~~~~~~~~~
connection.c:1167:29: error: argument does not meet declared bounds for 2nd parameter
    if (httpp_parse(parser, http_compliant, strlen(http_compliant))) {
                            ^~~~~~~~~~~~~~
connection.c:1167:29: note: source bounds are an empty range
connection.c:1167:29: note: destination upper bound is above source upper bound
connection.c:1167:29: note: (expanded) expected argument bounds are 'bounds((_Array_ptr<const char>)http_compliant, (_Array_ptr<const char>)http_compliant + 1)'
connection.c:1167:29: note: (expanded) inferred bounds are 'bounds(http_compliant, http_compliant + 0)'
    if (httpp_parse(parser, http_compliant, strlen(http_compliant))) {
                            ^~~~~~~~~~~~~~
connection.c:1126:29: warning: cannot prove declared bounds for headers are valid after assignment [-Wcheck-bounds-decls-unchecked-scope]
                    headers = ptr+1;
                    ~~~~~~~ ^ ~~~~~
connection.c:1126:21: note: (expanded) declared bounds are 'bounds(headers, headers + 0)'
                    headers = ptr+1;
                    ^
connection.c:1126:34: note: (expanded) inferred bounds are 'bounds(ptr, ptr + 0)'
                    headers = ptr+1;
                              ~~~^~
connection.c:1122:25: warning: cannot prove declared bounds for headers are valid after assignment [-Wcheck-bounds-decls-unchecked-scope]
                headers = ptr+2;
                ~~~~~~~ ^ ~~~~~
connection.c:1122:17: note: (expanded) declared bounds are 'bounds(headers, headers + 0)'
                headers = ptr+2;
                ^
connection.c:1122:30: note: (expanded) inferred bounds are 'bounds(ptr, ptr + 0)'
                headers = ptr+2;
                          ~~~^~
connection.c:1118:21: warning: cannot prove declared bounds for headers are valid after assignment [-Wcheck-bounds-decls-unchecked-scope]
            headers = ptr+3;
            ~~~~~~~ ^ ~~~~~
connection.c:1118:13: note: (expanded) declared bounds are 'bounds(headers, headers + 0)'
            headers = ptr+3;
            ^
connection.c:1118:26: note: (expanded) inferred bounds are 'bounds(ptr, ptr + 0)'
            headers = ptr+3;
                      ~~~^~
connection.c:1136:9: warning: out-of-bounds memory access [-Wcheck-memory-accesses]
        *ptr = '\0';
        ^~~~
connection.c:1136:9: note: source bounds are an empty range
connection.c:1136:9: note: accesses memory at or above the upper bound
connection.c:1136:9: note: (expanded) inferred bounds are 'bounds(ptr, ptr + 0)'
connection.c:1143:39: warning: cannot prove argument meets declared bounds for 2nd parameter [-Wcheck-bounds-decls-unchecked-scope]
        memmove(client->refbuf->data, headers, node->offset+1);
                                      ^~~~~~~
connection.c:1143:39: note: (expanded) expected argument bounds are 'bounds((_Array_ptr<char>)headers, (_Array_ptr<char>)headers + (size_t)node->offset + 1)'
connection.c:1143:39: note: (expanded) inferred bounds are 'bounds(headers, headers + 0)'
        memmove(client->refbuf->data, headers, node->offset+1);
                                      ^~~~~~~
connection.c:1188:31: error: initializing '_Nt_array_ptr<const char>' with an expression of incompatible type 'const char *'
    _Nt_array_ptr<const char> http_host =  httpp_getvar(client->parser, "host");
                              ^            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
connection.c:1201:25: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
            vhost_colon = strstr(vhost, ":");
                        ^ ~~~~~~~~~~~~~~~~~~
connection.c:1271:33: error: initializing '_Nt_array_ptr<char>' with an expression of incompatible type 'char *'
            _Nt_array_ptr<char> func =  strdup(resource->handler);
                                ^       ~~~~~~~~~~~~~~~~~~~~~~~~~
connection.c:1203:17: warning: out-of-bounds memory access [-Wcheck-memory-accesses]
                *vhost_colon = 0;
                ^~~~~~~~~~~~
connection.c:1203:17: note: source bounds are an empty range
connection.c:1203:17: note: accesses memory at or above the upper bound
connection.c:1203:17: note: (expanded) inferred bounds are 'bounds(vhost_colon, vhost_colon + 0)'
connection.c:1225:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_DEBUG("Match: *uri='%s', resource->source='%s', len=%zu", *uri, resource->source, len);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
connection.c:1266:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_ERROR("Module used in alias not found: %s", resource->module);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
connection.c:1263:33: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                refobject_unref(client->handler_module);
                                ^~~~~~~~~~~~~~~~~~~~~~
connection.c:1276:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_ERROR("Can not allocate memory.");
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
connection.c:1280:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_DEBUG("resource has made %s into %s", *uri, new_uri);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
connection.c:1304:34: error: passing 'char *' to parameter of incompatible type '_Nt_array_ptr<const char>'
    admin_handle_request(client, adminuri);
                                 ^~~~~~~~
./admin.h:47:76: note: passing argument to parameter 'uri' here
void admin_handle_request(_Ptr<client_t> client, _Nt_array_ptr<const char> uri);
                                                                           ^
connection.c:1300:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_DEBUG("Client %p requesting admin interface.", client);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
connection.c:1347:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_ERROR("No such handler function in module: %s", client->handler_function);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
connection.c:1368:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_ERROR("Wrong request type from client");
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
connection.c:1326:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("Client (role=%s, username=%s) not allowed to use this request method on %H", client->role, client->username, client->uri);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
connection.c:1392:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_DEBUG("Trying global authenticators for client %p.", client);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
connection.c:1450:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_DEBUG("Trying <mount type=\"default\"> specific authenticators for client %p.", client);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
connection.c:1464:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_DEBUG("Trying <mount type=\"normal\"> specific authenticators for client %p.", client);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
connection.c:1499:31: error: initializing '_Nt_array_ptr<const char>' with an expression of incompatible type 'const char *'
    _Nt_array_ptr<const char> pass =  httpp_get_query_param(client->parser, "pass");
                              ^       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
connection.c:1508:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_INFO("Client already has password set");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:50:33: note: expanded from macro 'ICECAST_LOG_INFO'
#define ICECAST_LOG_INFO(...)   ICECAST_LOG(ICECAST_LOGLEVEL_INFO,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
connection.c:1503:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("missing pass parameter");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
connection.c:1638:24: error: assigning to '_Nt_array_ptr<const char>' from incompatible type 'const char *'
                rawuri = httpp_getvar(parser, HTTPP_VAR_URI);
                       ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
connection.c:1655:25: error: assigning to '_Nt_array_ptr<const char>' from incompatible type 'const char *'
                upgrade = httpp_getvar(parser, "upgrade");
                        ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
connection.c:1698:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_ERROR("HTTP request parsing failed");
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
connection.c:1634:25: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                        ICECAST_LOG_DEBUG("Success on fast lane");
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
connection.c:1650:21: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                    ICECAST_LOG_ERROR("Bad HTTP protocol detected");
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
connection.c:1712:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_DEBUG("Listen socket count is now %zu.", count);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
connection.c:1715:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_INFO("No more listen sockets. Exiting.");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:50:33: note: expanded from macro 'ICECAST_LOG_INFO'
#define ICECAST_LOG_INFO(...)   ICECAST_LOG(ICECAST_LOGLEVEL_INFO,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
connection.c:1734:19: error: assigning to 'matchfile_t *' (aka 'struct matchfile_tag *') from incompatible type '_Ptr<matchfile_t>' (aka '_Ptr<struct matchfile_tag>')
        banned_ip = matchfile_new(config->banfile);
                  ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
connection.c:1741:20: error: assigning to 'matchfile_t *' (aka 'struct matchfile_tag *') from incompatible type '_Ptr<matchfile_t>' (aka '_Ptr<struct matchfile_tag>')
        allowed_ip = matchfile_new(config->allowfile);
                   ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
connection.c:1724:21: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    refobject_unref(global.listensockets);
                    ^~~~~~~~~~~~~~~~~~~~
connection.c:1733:27: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        matchfile_release(banned_ip);
                          ^~~~~~~~~
connection.c:1736:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_ERROR("Can not create ban object, bad!");
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
connection.c:1740:27: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        matchfile_release(allowed_ip);
                          ^~~~~~~~~~
connection.c:1768:21: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    refobject_unref(con->listensocket_real);
                    ^~~~~~~~~~~~~~~~~~~~~~
connection.c:1769:21: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    refobject_unref(con->listensocket_effective);
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~
9 warnings and 104 errors generated.
make[3]: [icecast-connection.o] Error 1 (ignored)
In file included from global.c:25:
./refobject.h:155:67: warning: declaration of 'struct __va_list_tag' will not be visible outside of this function [-Wvisibility]
    _Ptr<int (refobject_t , _Ptr<const refobject_type_t> , struct __va_list_tag* )> type_newcb;
                                                                  ^
In file included from global.c:27:
In file included from ./source.h:25:
In file included from ./format.h:25:
In file included from ./client.h:23:
./common/httpp/encoding.h:61:117: error: expected ')'
ssize_t httpp_encoding_read(_Ptr<httpp_encoding_t> self, void* buf, size_t len, ssize_t (*)(void *, void *, size_t) cb : itype(_Ptr<ssize_t (void* , void* , size_t )> ) , void* userdata);
                                                                                                                    ^
./common/httpp/encoding.h:61:28: note: to match this '('
ssize_t httpp_encoding_read(_Ptr<httpp_encoding_t> self, void* buf, size_t len, ssize_t (*)(void *, void *, size_t) cb : itype(_Ptr<ssize_t (void* , void* , size_t )> ) , void* userdata);
                           ^
./common/httpp/encoding.h:66:69: error: expected ')'
int httpp_encoding_eof(_Ptr<httpp_encoding_t> self, int (*)(void *) cb : itype(_Ptr<int (void* )> ) , void* userdata);
                                                                    ^
./common/httpp/encoding.h:66:23: note: to match this '('
int httpp_encoding_eof(_Ptr<httpp_encoding_t> self, int (*)(void *) cb : itype(_Ptr<int (void* )> ) , void* userdata);
                      ^
In file included from global.c:27:
In file included from ./source.h:25:
In file included from ./format.h:25:
./client.h:154:91: error: 'type name' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
int client_send_bytes(client_t *client : itype(_Ptr<client_t> ) , const void *buf : itype(_Nt_array_ptr<const void> ) , unsigned int len);
                                                                                          ^
./client.h:155:85: error: 'type name' declared as _Nt_array_ptr of type 'void'; only integer and pointer types are allowed
int client_read_bytes(client_t *client : itype(_Ptr<client_t> ) , void *buf : itype(_Nt_array_ptr<void> ) , unsigned int len);
                                                                                    ^
./client.h:157:88: error: 'type name' declared as _Nt_array_ptr of type 'void'; only integer and pointer types are allowed
ssize_t client_body_read(client_t *client : itype(_Ptr<client_t> ) , void *buf : itype(_Nt_array_ptr<void> ) , size_t len);
                                                                                       ^
global.c:49:21: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    refobject_unref(global.modulecontainer);
                    ^~~~~~~~~~~~~~~~~~~~~~
1 warning and 6 errors generated.
make[3]: [icecast-global.o] Error 1 (ignored)
In file included from util.c:49:
./connection.h:58:36: error: 'type name' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
    _Ptr<int (_Ptr<connection_t> , _Nt_array_ptr<const void> , size_t )> send;
                                   ^
./connection.h:81:55: error: 'buf' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
ssize_t connection_send_bytes(_Ptr<connection_t> con, _Nt_array_ptr<const void> buf, size_t len);
                                                      ^
In file included from util.c:50:
In file included from ./client.h:23:
./common/httpp/encoding.h:61:117: error: expected ')'
ssize_t httpp_encoding_read(_Ptr<httpp_encoding_t> self, void* buf, size_t len, ssize_t (*)(void *, void *, size_t) cb : itype(_Ptr<ssize_t (void* , void* , size_t )> ) , void* userdata);
                                                                                                                    ^
./common/httpp/encoding.h:61:28: note: to match this '('
ssize_t httpp_encoding_read(_Ptr<httpp_encoding_t> self, void* buf, size_t len, ssize_t (*)(void *, void *, size_t) cb : itype(_Ptr<ssize_t (void* , void* , size_t )> ) , void* userdata);
                           ^
./common/httpp/encoding.h:66:69: error: expected ')'
int httpp_encoding_eof(_Ptr<httpp_encoding_t> self, int (*)(void *) cb : itype(_Ptr<int (void* )> ) , void* userdata);
                                                                    ^
./common/httpp/encoding.h:66:23: note: to match this '('
int httpp_encoding_eof(_Ptr<httpp_encoding_t> self, int (*)(void *) cb : itype(_Ptr<int (void* )> ) , void* userdata);
                      ^
In file included from util.c:50:
In file included from ./client.h:28:
In file included from ./module.h:15:
./refobject.h:155:67: warning: declaration of 'struct __va_list_tag' will not be visible outside of this function [-Wvisibility]
    _Ptr<int (refobject_t , _Ptr<const refobject_type_t> , struct __va_list_tag* )> type_newcb;
                                                                  ^
In file included from util.c:50:
./client.h:154:91: error: 'type name' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
int client_send_bytes(client_t *client : itype(_Ptr<client_t> ) , const void *buf : itype(_Nt_array_ptr<const void> ) , unsigned int len);
                                                                                          ^
./client.h:155:85: error: 'type name' declared as _Nt_array_ptr of type 'void'; only integer and pointer types are allowed
int client_read_bytes(client_t *client : itype(_Ptr<client_t> ) , void *buf : itype(_Nt_array_ptr<void> ) , unsigned int len);
                                                                                    ^
./client.h:157:88: error: 'type name' declared as _Nt_array_ptr of type 'void'; only integer and pointer types are allowed
ssize_t client_body_read(client_t *client : itype(_Ptr<client_t> ) , void *buf : itype(_Nt_array_ptr<void> ) , size_t len);
                                                                                       ^
In file included from util.c:53:
./auth.h:115:5: error: declaration of anonymous struct must be a definition
    struct (anonymous struct at /home/hasantouma/plum-umd-icecast/checkedc-icecast/src/auth.h:115:5) filter_admin[32];
    ^
./auth.h:115:118: error: type name requires a specifier or qualifier
    struct (anonymous struct at /home/hasantouma/plum-umd-icecast/checkedc-icecast/src/auth.h:115:5) filter_admin[32];
                                                                                                                     ^
util.c:168:32: error: expression has unknown bounds
                if (c != '\r') buff[pos++] = c;
                               ^~~~~~~~~~~
util.c:177:39: error: expression has unknown bounds
                    if ((pos > 1) && (buff[pos - 1] == '\n')) {
                                      ^~~~~~~~~~~~~
util.c:170:39: error: expression has unknown bounds
                    if ((pos > 1) && (buff[pos - 1] == '\n' &&
                                      ^~~~~~~~~~~~~
util.c:171:39: error: expression has unknown bounds
                                      buff[pos - 2] == '\n')) {
                                      ^~~~~~~~~~~~~
util.c:188:14: error: expression has unknown bounds
    if (ret) buff[pos] = '\0';
             ^~~~~~~~~
util.c:194:25: error: initializing '_Nt_array_ptr<char>' with an expression of incompatible type 'char *'
    _Nt_array_ptr<char> ext =  strrchr(path, '.');
                        ^      ~~~~~~~~~~~~~~~~~~
util.c:208:8: error: assigning to '_Nt_array_ptr<const char>' from incompatible type 'char *'
    p2 = strrchr(uri, '.');
       ^ ~~~~~~~~~~~~~~~~~
util.c:263:25: error: initializing '_Nt_array_ptr<char>' with an expression of incompatible type 'char *'
    _Nt_array_ptr<char> path =  util_normalise_uri(uri);
                        ^       ~~~~~~~~~~~~~~~~~~~~~~~
util.c:302:9: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'void *'
    dst = calloc(1, len*3 + 1);
        ^ ~~~~~~~~~~~~~~~~~~~~
util.c:326:13: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'void *'
    decoded = calloc(1, len + 1);
            ^ ~~~~~~~~~~~~~~~~~~
util.c:354:17: warning: out-of-bounds memory access [-Wcheck-memory-accesses]
                *dst++ = src[i];
                ^~~~~~
util.c:354:17: note: source bounds are an empty range
util.c:354:17: note: (expanded) inferred bounds are 'bounds(dst, dst + 0)'
util.c:342:17: warning: out-of-bounds memory access [-Wcheck-memory-accesses]
                *dst++ = hex(src[i+1]) * 16  + hex(src[i+2]);
                ^~~~~~
util.c:342:17: note: source bounds are an empty range
util.c:342:17: note: (expanded) inferred bounds are 'bounds(dst, dst + 0)'
util.c:361:5: warning: out-of-bounds memory access [-Wcheck-memory-accesses]
    *dst = 0; /* null terminator */
    ^~~~
util.c:361:5: note: source bounds are an empty range
util.c:361:5: note: accesses memory at or above the upper bound
util.c:361:5: note: (expanded) inferred bounds are 'bounds(dst, dst + 0)'
util.c:349:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_ERROR("Fatal internal logic error in util_url_unescape()");
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
util.c:380:10: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
    path = util_url_unescape(uri);
         ^ ~~~~~~~~~~~~~~~~~~~~~~
util.c:397:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_WARN("Rejecting invalid path \"%s\"", path);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
util.c:383:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_WARN("Error decoding URI: %s\n", uri);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
util.c:405:25: error: initializing '_Nt_array_ptr<char>' with an expression of incompatible type 'void *'
    _Nt_array_ptr<char> hex =  malloc(len*2 + 1);
                        ^      ~~~~~~~~~~~~~~~~~
util.c:420:25: error: initializing '_Nt_array_ptr<char>' with an expression of incompatible type 'void *'
    _Nt_array_ptr<char> out =  malloc(len*4/3 + 4);
                        ^      ~~~~~~~~~~~~~~~~~~~
util.c:457:25: error: initializing '_Nt_array_ptr<char>' with an expression of incompatible type 'void *'
    _Nt_array_ptr<char> out =  malloc(len*3/4 + 5);
                        ^      ~~~~~~~~~~~~~~~~~~~
util.c:512:12: error: assigning to '_Nt_array_ptr<const char>' from incompatible type 'const char *'
    for (p = hostname; *p; p++)
           ^ ~~~~~~~~
util.c:518:12: error: assigning to '_Nt_array_ptr<const char>' from incompatible type 'const char *'
    for (p = hostname, colon_count = 0; *p; p++) {
           ^ ~~~~~~~~
util.c:529:12: error: assigning to '_Nt_array_ptr<const char>' from incompatible type 'const char *'
    for (p = hostname; *p; p++)
           ^ ~~~~~~~~
util.c:533:12: error: assigning to '_Nt_array_ptr<const char>' from incompatible type 'const char *'
    for (p = hostname, colon_count = 0; *p && *p != '.'; p++);
           ^ ~~~~~~~~
util.c:590:23: error: passing '_Ptr<char> *' to parameter of incompatible type 'char **'
    val = strtol(str, &rem, 10);
                      ^~~~
/home/hasantouma/building-checkedc-clang-plum/llvm.obj/lib/clang/8.0.0/include/stdlib_checked.h:49:34: note: passing argument to parameter 'endptr' here
                char ** restrict endptr :
                                 ^
util.c:693:25: error: passing '_Ptr<char> *' to parameter of incompatible type '_Ptr<char *>'
    _build_headers_loop(&ret, &len, config->http_headers, status, allow, client);
                        ^~~~
util.c:603:45: note: passing argument to parameter 'ret' here
static void _build_headers_loop(_Ptr<char*> ret, _Ptr<size_t> len, _Ptr<const ice_config_http_header_t> header, int status, const char *allow, _Ptr<client_t> client) {
                                            ^
util.c:695:29: error: passing '_Ptr<char> *' to parameter of incompatible type '_Ptr<char *>'
        _build_headers_loop(&ret, &len, mountproxy->http_headers, status, allow, client);
                            ^~~~
util.c:603:45: note: passing argument to parameter 'ret' here
static void _build_headers_loop(_Ptr<char*> ret, _Ptr<size_t> len, _Ptr<const ice_config_http_header_t> header, int status, const char *allow, _Ptr<client_t> client) {
                                            ^
util.c:697:29: error: passing '_Ptr<char> *' to parameter of incompatible type '_Ptr<char *>'
        _build_headers_loop(&ret, &len, header, status, allow, client);
                            ^~~~
util.c:603:45: note: passing argument to parameter 'ret' here
static void _build_headers_loop(_Ptr<char*> ret, _Ptr<size_t> len, _Ptr<const ice_config_http_header_t> header, int status, const char *allow, _Ptr<client_t> client) {
                                            ^
util.c:699:29: error: passing '_Ptr<char> *' to parameter of incompatible type '_Ptr<char *>'
        _build_headers_loop(&ret, &len, header, status, allow, client);
                            ^~~~
util.c:603:45: note: passing argument to parameter 'ret' here
static void _build_headers_loop(_Ptr<char*> ret, _Ptr<size_t> len, _Ptr<const ice_config_http_header_t> header, int status, const char *allow, _Ptr<client_t> client) {
                                            ^
util.c:711:25: error: automatic variable 'status_buffer' with bounds must have initializer
    _Nt_array_ptr<char> status_buffer;
                        ^
util.c:712:25: error: automatic variable 'contenttype_buffer' with bounds must have initializer
    _Nt_array_ptr<char> contenttype_buffer;
                        ^
util.c:777:19: error: argument does not meet declared bounds for 1st parameter
        snprintf (status_buffer, sizeof (status_buffer), "HTTP/%s %d %s\r\n", http_version, status, statusmsg);
                  ^~~~~~~~~~~~~
util.c:777:19: note: source bounds are an empty range
util.c:777:19: note: destination upper bound is above source upper bound
util.c:777:19: note: (expanded) expected argument bounds are 'bounds((char *)status_buffer, (char *)status_buffer + sizeof (status_buffer) == 0 ? 0 : sizeof (status_buffer) - 1)'
util.c:777:19: note: (expanded) inferred bounds are 'bounds(status_buffer, status_buffer + 0)'
        snprintf (status_buffer, sizeof (status_buffer), "HTTP/%s %d %s\r\n", http_version, status, statusmsg);
                  ^~~~~~~~~~~~~
util.c:740:9: warning: out-of-bounds memory access [-Wcheck-memory-accesses]
        status_buffer[0] = '\0';
        ^~~~~~~~~~~~~~~~
util.c:740:9: note: source bounds are an empty range
util.c:740:9: note: accesses memory at or above the upper bound
util.c:740:9: note: (expanded) inferred bounds are 'bounds(status_buffer, status_buffer + 0)'
util.c:791:9: warning: out-of-bounds memory access [-Wcheck-memory-accesses]
        contenttype_buffer[0] = '\0';
        ^~~~~~~~~~~~~~~~~~~~~
util.c:791:9: note: source bounds are an empty range
util.c:791:9: note: accesses memory at or above the upper bound
util.c:791:9: note: (expanded) inferred bounds are 'bounds(contenttype_buffer, contenttype_buffer + 0)'
util.c:786:23: error: argument does not meet declared bounds for 1st parameter
            snprintf (contenttype_buffer, sizeof (contenttype_buffer), "Content-Type: %s\r\n",
                      ^~~~~~~~~~~~~~~~~~
util.c:786:23: note: source bounds are an empty range
util.c:786:23: note: destination upper bound is above source upper bound
util.c:786:23: note: (expanded) expected argument bounds are 'bounds((char *)contenttype_buffer, (char *)contenttype_buffer + sizeof (contenttype_buffer) == 0 ? 0 : sizeof (contenttype_buffer) - 1)'
util.c:786:23: note: (expanded) inferred bounds are 'bounds(contenttype_buffer, contenttype_buffer + 0)'
            snprintf (contenttype_buffer, sizeof (contenttype_buffer), "Content-Type: %s\r\n",
                      ^~~~~~~~~~~~~~~~~~
util.c:783:23: error: argument does not meet declared bounds for 1st parameter
            snprintf (contenttype_buffer, sizeof (contenttype_buffer), "Content-Type: %s; charset=%s\r\n",
                      ^~~~~~~~~~~~~~~~~~
util.c:783:23: note: source bounds are an empty range
util.c:783:23: note: destination upper bound is above source upper bound
util.c:783:23: note: (expanded) expected argument bounds are 'bounds((char *)contenttype_buffer, (char *)contenttype_buffer + sizeof (contenttype_buffer) == 0 ? 0 : sizeof (contenttype_buffer) - 1)'
util.c:783:23: note: (expanded) inferred bounds are 'bounds(contenttype_buffer, contenttype_buffer + 0)'
            snprintf (contenttype_buffer, sizeof (contenttype_buffer), "Content-Type: %s; charset=%s\r\n",
                      ^~~~~~~~~~~~~~~~~~
util.c:822:44: error: cast source bounds are too narrow for '_Ptr<const char>'
    extra_headers = _build_headers(status, allow_header, config, source, client);
                                           ^~~~~~~~~~~~
util.c:822:44: note: source bounds are an empty range
util.c:822:44: note: target upper bound is above source upper bound
util.c:822:44: note: (expanded) required bounds are 'bounds((_Array_ptr<const char>)allow_header, (_Array_ptr<const char>)allow_header + 1)'
util.c:822:44: note: (expanded) inferred bounds are 'bounds(allow_header, allow_header + 0)'
util.c:837:56: error: cast source bounds are too narrow for '_Ptr<const char>'
                              (datablock ? datablock : ""));
                                                       ^~
util.c:837:56: note: source bounds are an empty range
util.c:837:56: note: target upper bound is above source upper bound
util.c:837:56: note: (expanded) required bounds are 'bounds((_Array_ptr<const char>)"", (_Array_ptr<const char>)"" + 1)'
util.c:837:56: note: (expanded) inferred bounds are 'bounds(value of "", value of "" + 0)'
util.c:871:10: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
    delm = strstr(arg->group, "/");
         ^ ~~~~~~~~~~~~~~~~~~~~~~~
util.c:873:9: warning: out-of-bounds memory access [-Wcheck-memory-accesses]
        delm[0] = '/';
        ^~~~~~~
util.c:873:9: note: source bounds are an empty range
util.c:873:9: note: accesses memory at or above the upper bound
util.c:873:9: note: (expanded) inferred bounds are 'bounds(delm, delm + 0)'
util.c:874:9: warning: out-of-bounds memory access [-Wcheck-memory-accesses]
        delm[1] = '*';
        ^~~~~~~
util.c:874:9: note: source bounds are an empty range
util.c:874:9: note: accesses memory at or above the upper bound
util.c:874:9: note: (expanded) inferred bounds are 'bounds(delm, delm + 0)'
util.c:875:9: warning: out-of-bounds memory access [-Wcheck-memory-accesses]
        delm[2] = 0;
        ^~~~~~~
util.c:875:9: note: source bounds are an empty range
util.c:875:9: note: accesses memory at or above the upper bound
util.c:875:9: note: (expanded) inferred bounds are 'bounds(delm, delm + 0)'
util.c:886:14: error: expression has unknown bounds
        free(arg[i].group);
             ^~~~~~
util.c:902:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_ERROR("Badly formated quality parameter found.");
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
util.c:961:29: error: passing 'const char *' to parameter of incompatible type '_Nt_array_ptr<const char>'
    kv = util_parse_http_cn(input);
                            ^~~~~
./util.h:101:66: note: passing argument to parameter 'cnstr' here
_Ptr<icecast_kva_t> util_parse_http_cn(_Nt_array_ptr<const char> cnstr);
                                                                 ^
util.c:952:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_ERROR("Can not allocate memory. Selecting first option.");
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
util.c:948:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_ERROR("More arguments given than supported. Currently %zu args are supported.", (size_t)__SELECT_BEST_MAX_ARGS);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
util.c:963:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("Input string does not parse as KVA. Selecting first option.");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
util.c:942:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("Can not allocate memory. Selecting first option.");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
util.c:1028:12: error: expression has unknown bounds
    for (; **p == ' '; (*p)++);
           ^~~
util.c:1079:9: error: expression has unknown bounds
    if (*p != '"')
        ^~
util.c:1085:17: error: expression has unknown bounds
    for (; (c = *p); p++) {
                ^~
util.c:1097:13: error: expression has unknown bounds
            *o = 0;
            ^~
util.c:1104:9: error: expression has unknown bounds
    if (*p == '"') {
        ^~
util.c:1108:42: error: expression has unknown bounds
        return __tokenizer_res_from_char(*p);
                                         ^~
util.c:1090:17: error: expression has unknown bounds
            c = *p;
                ^~
util.c:1094:17: error: expression has unknown bounds
                *(o++) = c;
                ^~~~~~
util.c:1087:13: error: expression has unknown bounds
            *(o++) = c;
            ^~~~~~
util.c:1119:18: error: passing 'char **' to parameter of incompatible type '_Ptr<_Array_ptr<char>>'
    __skip_space(in);
                 ^~
util.c:1026:49: note: passing argument to parameter 'p' here
static void __skip_space(_Ptr<_Array_ptr<char>> p)
                                                ^
util.c:1135:36: error: passing 'char **' to parameter of incompatible type '_Ptr<_Ptr<char>>'
            return __tokenizer_str(out, in);
                                   ^~~
util.c:1069:65: note: passing argument to parameter 'out' here
static enum __tokenizer_result __tokenizer_str(_Ptr<_Ptr<char>> out, _Ptr<_Array_ptr<char>> in)
                                                                ^
util.c:1139:10: error: assigning to 'char *' from incompatible type '_Array_ptr<char>'
    *out = p;
         ^ ~
util.c:1142:9: error: assigning to 'char *' from incompatible type '_Array_ptr<char>'
    *in = p;
        ^ ~
util.c:1144:22: error: passing 'char **' to parameter of incompatible type '_Ptr<_Array_ptr<char>>'
        __skip_space(in);
                     ^~
util.c:1026:49: note: passing argument to parameter 'p' here
static void __skip_space(_Ptr<_Array_ptr<char>> p)
                                                ^
util.c:1123:13: error: expression has unknown bounds
    switch (*p) {
            ^~
util.c:1140:23: error: expression has unknown bounds
    for (; __is_token(*p); p++);
                      ^~
util.c:1143:9: error: expression has unknown bounds
    if (*p) {
        ^~
util.c:1150:5: error: expression has unknown bounds
    *p = 0;
    ^~
util.c:1213:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_DEBUG("Illegal byte sequence error from tokenizer.");
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
util.c:1349:26: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
    else if (!(dict->key = strdup(key))) {
                         ^ ~~~~~~~~~~~
util.c:1354:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("unable to allocate new dictionary key");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
util.c:1360:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("unable to allocate new dictionary value");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
util.c:1340:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_ERROR("unable to allocate new dictionary");
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
util.c:1325:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("NULL values passed to util_dict_set()");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
util.c:1398:19: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
        if (!(enc = util_url_escape(dict->val))) {
                  ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~
util.c:1463:21: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
                ret = strdup ((const char *)xmlBufferContent (conv));
                    ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
util.c:1457:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_INFO("converting metadata from %s to %s", in_charset, out_charset);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:50:33: note: expanded from macro 'ICECAST_LOG_INFO'
#define ICECAST_LOG_INFO(...)   ICECAST_LOG(ICECAST_LOGLEVEL_INFO,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
util.c:1498:11: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
        n = strdup(src);
          ^ ~~~~~~~~~~~
util.c:1506:10: error: assigning to 'char *' from incompatible type '_Nt_array_ptr<char>'
    *dst = n;
         ^ ~
9 warnings and 79 errors generated.
make[3]: [icecast-util.o] Error 1 (ignored)
In file included from slave.c:50:
./connection.h:58:36: error: 'type name' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
    _Ptr<int (_Ptr<connection_t> , _Nt_array_ptr<const void> , size_t )> send;
                                   ^
./connection.h:81:55: error: 'buf' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
ssize_t connection_send_bytes(_Ptr<connection_t> con, _Nt_array_ptr<const void> buf, size_t len);
                                                      ^
In file included from slave.c:52:
In file included from ./client.h:23:
./common/httpp/encoding.h:61:117: error: expected ')'
ssize_t httpp_encoding_read(_Ptr<httpp_encoding_t> self, void* buf, size_t len, ssize_t (*)(void *, void *, size_t) cb : itype(_Ptr<ssize_t (void* , void* , size_t )> ) , void* userdata);
                                                                                                                    ^
./common/httpp/encoding.h:61:28: note: to match this '('
ssize_t httpp_encoding_read(_Ptr<httpp_encoding_t> self, void* buf, size_t len, ssize_t (*)(void *, void *, size_t) cb : itype(_Ptr<ssize_t (void* , void* , size_t )> ) , void* userdata);
                           ^
./common/httpp/encoding.h:66:69: error: expected ')'
int httpp_encoding_eof(_Ptr<httpp_encoding_t> self, int (*)(void *) cb : itype(_Ptr<int (void* )> ) , void* userdata);
                                                                    ^
./common/httpp/encoding.h:66:23: note: to match this '('
int httpp_encoding_eof(_Ptr<httpp_encoding_t> self, int (*)(void *) cb : itype(_Ptr<int (void* )> ) , void* userdata);
                      ^
In file included from slave.c:52:
In file included from ./client.h:28:
In file included from ./module.h:15:
./refobject.h:155:67: warning: declaration of 'struct __va_list_tag' will not be visible outside of this function [-Wvisibility]
    _Ptr<int (refobject_t , _Ptr<const refobject_type_t> , struct __va_list_tag* )> type_newcb;
                                                                  ^
In file included from slave.c:52:
./client.h:154:91: error: 'type name' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
int client_send_bytes(client_t *client : itype(_Ptr<client_t> ) , const void *buf : itype(_Nt_array_ptr<const void> ) , unsigned int len);
                                                                                          ^
./client.h:155:85: error: 'type name' declared as _Nt_array_ptr of type 'void'; only integer and pointer types are allowed
int client_read_bytes(client_t *client : itype(_Ptr<client_t> ) , void *buf : itype(_Nt_array_ptr<void> ) , unsigned int len);
                                                                                    ^
./client.h:157:88: error: 'type name' declared as _Nt_array_ptr of type 'void'; only integer and pointer types are allowed
ssize_t client_body_read(client_t *client : itype(_Ptr<client_t> ) , void *buf : itype(_Nt_array_ptr<void> ) , size_t len);
                                                                                       ^
slave.c:94:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_DEBUG("freeing relay config for %s", relay->localmount);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
slave.c:103:10: error: argument has unknown bounds, bounds expected because the 1st parameter has bounds
    free(relay->upstream);
         ^~~~~~~~~~~~~~~
slave.c:97:36: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        relay_config_upstream_free(&(relay->upstream[i]));
                                   ^~~~~~~~~~~~~~~~~~~~~
slave.c:111:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_DEBUG("freeing relay %s", relay->config->localmount);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
slave.c:166:36: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        relay_config_upstream_copy(&(copy->upstream[i]), &(r->upstream[i]));
                                   ^~~~~~~~~~~~~~~~~~~~
slave.c:166:58: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        relay_config_upstream_copy(&(copy->upstream[i]), &(r->upstream[i]));
                                                         ^~~~~~~~~~~~~~~~~
slave.c:153:14: error: argument has unknown bounds, bounds expected because the 1st parameter has bounds
        free(u);
             ^
slave.c:234:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_DEBUG("waiting for slave thread");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
slave.c:250:25: error: initializing '_Nt_array_ptr<char>' with an expression of incompatible type 'char *'
    _Nt_array_ptr<char> server =  strdup (_GET_UPSTREAM_SETTING(server));
                        ^         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
slave.c:251:25: error: initializing '_Nt_array_ptr<char>' with an expression of incompatible type 'char *'
    _Nt_array_ptr<char> mount =  strdup (_GET_UPSTREAM_SETTING(mount));
                        ^        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
slave.c:254:25: error: automatic variable 'header' with bounds must have initializer
    _Nt_array_ptr<char> header;
                        ^
slave.c:257:15: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
    server_id = strdup (config->server_id);
              ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~
slave.c:266:21: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'void *'
        auth_header = malloc (len);
                    ^ ~~~~~~~~~~~~
slave.c:271:21: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'void *'
        auth_header = malloc (len);
                    ^ ~~~~~~~~~~~~
slave.c:277:21: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
        auth_header = strdup ("");
                    ^ ~~~~~~~~~~~
slave.c:331:17: error: assigning to '_Nt_array_ptr<const char>' from incompatible type 'const char *'
            uri = httpp_getvar (parser, "location");
                ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
slave.c:336:24: error: assigning to '_Nt_array_ptr<const char>' from incompatible type 'char *'
            mountpoint = strchr (uri, '/');
                       ^ ~~~~~~~~~~~~~~~~~
slave.c:267:19: warning: cannot prove argument meets declared bounds for 1st parameter [-Wcheck-bounds-decls-unchecked-scope]
        snprintf (auth_header, len, "%s:%s", _GET_UPSTREAM_SETTING(username), _GET_UPSTREAM_SETTING(password));
                  ^~~~~~~~~~~
slave.c:267:19: note: (expanded) expected argument bounds are 'bounds((char *)auth_header, (char *)auth_header + (size_t)len == 0 ? 0 : (size_t)len - 1)'
slave.c:267:19: note: (expanded) inferred bounds are 'bounds(auth_header, auth_header + 0)'
        snprintf (auth_header, len, "%s:%s", _GET_UPSTREAM_SETTING(username), _GET_UPSTREAM_SETTING(password));
                  ^~~~~~~~~~~
slave.c:272:19: warning: cannot prove argument meets declared bounds for 1st parameter [-Wcheck-bounds-decls-unchecked-scope]
        snprintf (auth_header, len,
                  ^~~~~~~~~~~
slave.c:272:19: note: (expanded) expected argument bounds are 'bounds((char *)auth_header, (char *)auth_header + (size_t)len == 0 ? 0 : (size_t)len - 1)'
slave.c:272:19: note: (expanded) inferred bounds are 'bounds(auth_header, auth_header + 0)'
        snprintf (auth_header, len,
                  ^~~~~~~~~~~
slave.c:309:17: error: argument does not meet declared bounds for 1st parameter
        memset (header, 0, sizeof(header));
                ^~~~~~
slave.c:309:17: note: source bounds are an empty range
slave.c:309:17: note: destination upper bound is above source upper bound
slave.c:309:17: note: (expanded) expected argument bounds are 'bounds((_Array_ptr<char>)header, (_Array_ptr<char>)header + sizeof (header))'
slave.c:309:17: note: (expanded) inferred bounds are 'bounds(header, header + 0)'
        memset (header, 0, sizeof(header));
                ^~~~~~
slave.c:317:45: error: cast source bounds are too narrow for '_Ptr<const char>'
        if (! httpp_parse_response (parser, header, strlen(header), relay->config->localmount))
                                            ^~~~~~
slave.c:317:45: note: source bounds are an empty range
slave.c:317:45: note: target upper bound is above source upper bound
slave.c:317:45: note: (expanded) required bounds are 'bounds((_Array_ptr<const char>)header, (_Array_ptr<const char>)header + 1)'
slave.c:317:45: note: (expanded) inferred bounds are 'bounds(header, header + 0)'
slave.c:361:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_ERROR("Error from relay request: %s (%s)", relay->config->localmount,
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
slave.c:332:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_INFO("redirect received %s", uri);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:50:33: note: expanded from macro 'ICECAST_LOG_INFO'
#define ICECAST_LOG_INFO(...)   ICECAST_LOG(ICECAST_LOGLEVEL_INFO,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
slave.c:346:30: warning: cannot prove argument meets declared bounds for 1st parameter [-Wcheck-bounds-decls-unchecked-scope]
                port = atoi (uri+len+1);
                             ^~~~~~~~~
slave.c:346:30: note: (expanded) expected argument bounds are 'bounds((const char *)uri + len + 1, (const char *)uri + len + 1 + 0)'
slave.c:346:30: note: (expanded) inferred bounds are 'bounds(uri, uri + 0)'
                port = atoi (uri+len+1);
                             ^~~~~~~~~
slave.c:309:35: warning: 'memset' call operates on objects of type 'char' while the size is based on a different type '_Nt_array_ptr<char>' [-Wsizeof-pointer-memaccess]
        memset (header, 0, sizeof(header));
                ~~~~~~            ^~~~~~
slave.c:309:35: note: did you mean to provide an explicit length?
        memset (header, 0, sizeof(header));
                                  ^~~~~~
slave.c:406:28: error: cast source bounds are too narrow for '_Ptr<relay_t>' (aka '_Ptr<struct relay_tag>')
    _Ptr<relay_t> relay =  arg;
                           ^~~
slave.c:406:28: note: target upper bound is above source upper bound
slave.c:406:28: note: (expanded) required bounds are 'bounds((_Array_ptr<relay_t>)arg, (_Array_ptr<relay_t>)arg + 1)'
slave.c:406:28: note: (expanded) inferred bounds are 'bounds((_Array_ptr<char>)arg, (_Array_ptr<char>)arg + 1)'
slave.c:410:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_INFO("Starting relayed source at mountpoint \"%s\"", relay->config->localmount);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:50:33: note: expanded from macro 'ICECAST_LOG_INFO'
#define ICECAST_LOG_INFO(...)   ICECAST_LOG(ICECAST_LOGLEVEL_INFO,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
slave.c:416:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_DEBUG("For relay on mount \"%s\", trying upstream #%zu", relay->config->localmount, i);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
slave.c:424:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_DEBUG("For relay on mount \"%s\" with no upstreams trying upstream default", relay->config->localmount);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
slave.c:437:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_INFO("Failed to complete source initialisation");
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:50:33: note: expanded from macro 'ICECAST_LOG_INFO'
#define ICECAST_LOG_INFO(...)   ICECAST_LOG(ICECAST_LOGLEVEL_INFO,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
slave.c:467:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_DEBUG("failed relay, fallback to %s", relay->source->fallback_mount);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
slave.c:481:23: error: inferred bounds 'bounds(&config_locks()->relay_lock, &config_locks()->relay_lock + 1)' contain a modifying expression; use a temporary instead
    thread_mutex_lock(&(config_locks()->relay_lock));
                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./common/thread/thread.h:117:50: note: expanded from macro 'thread_mutex_lock'
#define thread_mutex_lock(x) thread_mutex_lock_c(x,__LINE__,__FILE__)
                                                 ^
slave.c:481:25: note: modifying expression
    thread_mutex_lock(&(config_locks()->relay_lock));
                        ^~~~~~~~~~~~~~
./common/thread/thread.h:117:50: note: expanded from macro 'thread_mutex_lock'
#define thread_mutex_lock(x) thread_mutex_lock_c(x,__LINE__,__FILE__)
                                                 ^
slave.c:485:25: error: inferred bounds 'bounds(&config_locks()->relay_lock, &config_locks()->relay_lock + 1)' contain a modifying expression; use a temporary instead
    thread_mutex_unlock(&(config_locks()->relay_lock));
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./common/thread/thread.h:118:54: note: expanded from macro 'thread_mutex_unlock'
#define thread_mutex_unlock(x) thread_mutex_unlock_c(x,__LINE__,__FILE__)
                                                     ^
slave.c:485:27: note: modifying expression
    thread_mutex_unlock(&(config_locks()->relay_lock));
                          ^~~~~~~~~~~~~~
./common/thread/thread.h:118:54: note: expanded from macro 'thread_mutex_unlock'
#define thread_mutex_unlock(x) thread_mutex_unlock_c(x,__LINE__,__FILE__)
                                                     ^
slave.c:524:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_WARN("new relay but source \"%s\" already exists", relay->config->localmount);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
slave.c:507:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_DEBUG("Adding relay source at mountpoint \"%s\"", relay->config->localmount);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
slave.c:548:20: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                   ICECAST_LOG_DEBUG("fallback running %d with %lu listeners", fallback->running, fallback->listeners);
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
slave.c:569:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_DEBUG("waiting for relay thread for \"%s\"", relay->config->localmount);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
slave.c:499:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_WARN("relay mountpoint \"%s\" does not start with /, skipping",
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
slave.c:626:40: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        if (relay_has_changed_upstream(&(new->upstream[i]), &(old->upstream[i])))
                                       ^~~~~~~~~~~~~~~~~~~
slave.c:626:61: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        if (relay_has_changed_upstream(&(new->upstream[i]), &(old->upstream[i])))
                                                            ^~~~~~~~~~~~~~~~~~~
slave.c:654:17: error: expression has unknown bounds
        relay = updated[i];
                ^~~~~~~~~~
slave.c:719:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_DEBUG("source shutdown request on \"%s\"", to_free->config->localmount);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
slave.c:763:18: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
        username = strdup(config->master_username);
                 ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
slave.c:765:22: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
            password = strdup(config->master_password);
                     ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
slave.c:786:20: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'void *'
        authheader = malloc(len);
                   ^ ~~~~~~~~~~~
slave.c:787:19: warning: cannot prove argument meets declared bounds for 1st parameter [-Wcheck-bounds-decls-unchecked-scope]
        snprintf (authheader, len, "%s:%s", username, password);
                  ^~~~~~~~~~
slave.c:787:19: note: (expanded) expected argument bounds are 'bounds((char *)authheader, (char *)authheader + (size_t)len == 0 ? 0 : (size_t)len - 1)'
slave.c:787:19: note: (expanded) inferred bounds are 'bounds(authheader, authheader + 0)'
        snprintf (authheader, len, "%s:%s", username, password);
                  ^~~~~~~~~~
slave.c:803:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_INFO("Master accepted streamlist request");
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:50:33: note: expanded from macro 'ICECAST_LOG_INFO'
#define ICECAST_LOG_INFO(...)   ICECAST_LOG(ICECAST_LOGLEVEL_INFO,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
slave.c:856:28: error: inferred bounds 'bounds(&config_locks()->relay_lock, &config_locks()->relay_lock + 1)' contain a modifying expression; use a temporary instead
        thread_mutex_lock (&(config_locks()->relay_lock));
                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./common/thread/thread.h:117:50: note: expanded from macro 'thread_mutex_lock'
#define thread_mutex_lock(x) thread_mutex_lock_c(x,__LINE__,__FILE__)
                                                 ^
slave.c:856:30: note: modifying expression
        thread_mutex_lock (&(config_locks()->relay_lock));
                             ^~~~~~~~~~~~~~
./common/thread/thread.h:117:50: note: expanded from macro 'thread_mutex_lock'
#define thread_mutex_lock(x) thread_mutex_lock_c(x,__LINE__,__FILE__)
                                                 ^
slave.c:857:64: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        cleanup_relays = update_relays (&global.master_relays, new_relays, new_relays_length);
                                                               ^~~~~~~~~~
slave.c:864:14: error: argument has unknown bounds, bounds expected because the 1st parameter has bounds
        free(new_relays);
             ^~~~~~~~~~
slave.c:866:30: error: inferred bounds 'bounds(&config_locks()->relay_lock, &config_locks()->relay_lock + 1)' contain a modifying expression; use a temporary instead
        thread_mutex_unlock (&(config_locks()->relay_lock));
                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./common/thread/thread.h:118:54: note: expanded from macro 'thread_mutex_unlock'
#define thread_mutex_unlock(x) thread_mutex_unlock_c(x,__LINE__,__FILE__)
                                                     ^
slave.c:866:32: note: modifying expression
        thread_mutex_unlock (&(config_locks()->relay_lock));
                               ^~~~~~~~~~~~~~
./common/thread/thread.h:118:54: note: expanded from macro 'thread_mutex_unlock'
#define thread_mutex_unlock(x) thread_mutex_unlock_c(x,__LINE__,__FILE__)
                                                     ^
slave.c:862:31: error: expression has unknown bounds
            relay_config_free(new_relays[i]);
                              ^~~~~~~~~~~~~
slave.c:818:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_DEBUG("read %d from master \"%s\"", count++, buf);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
slave.c:825:25: error: argument has unknown bounds, bounds expected because the 1st parameter has bounds
            n = realloc(new_relays, sizeof(*new_relays)*(new_relays_length + 1));
                        ^~~~~~~~~~
slave.c:830:17: error: expression has unknown bounds
                new_relays[new_relays_length++] = c;
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
slave.c:850:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_DEBUG("Added relay host=\"%s\", port=%d, mount=\"%s\"", c->upstream_default.server, c->upstream_default.port, c->upstream_default.mount);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
slave.c:821:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_DEBUG("Error while parsing line from master. Ignoring line.");
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
slave.c:800:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_WARN("Master rejected streamlist request");
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
slave.c:781:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_WARN("Relay slave failed to contact master server to fetch stream list");
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
slave.c:947:32: error: inferred bounds 'bounds(&config_locks()->relay_lock, &config_locks()->relay_lock + 1)' contain a modifying expression; use a temporary instead
            thread_mutex_lock (&(config_locks()->relay_lock));
                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./common/thread/thread.h:117:50: note: expanded from macro 'thread_mutex_lock'
#define thread_mutex_lock(x) thread_mutex_lock_c(x,__LINE__,__FILE__)
                                                 ^
slave.c:947:34: note: modifying expression
            thread_mutex_lock (&(config_locks()->relay_lock));
                                 ^~~~~~~~~~~~~~
./common/thread/thread.h:117:50: note: expanded from macro 'thread_mutex_lock'
#define thread_mutex_lock(x) thread_mutex_lock_c(x,__LINE__,__FILE__)
                                                 ^
slave.c:925:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_DEBUG("checking master stream list");
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
slave.c:938:32: error: inferred bounds 'bounds(&config_locks()->relay_lock, &config_locks()->relay_lock + 1)' contain a modifying expression; use a temporary instead
            thread_mutex_lock (&(config_locks()->relay_lock));
                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./common/thread/thread.h:117:50: note: expanded from macro 'thread_mutex_lock'
#define thread_mutex_lock(x) thread_mutex_lock_c(x,__LINE__,__FILE__)
                                                 ^
slave.c:938:34: note: modifying expression
            thread_mutex_lock (&(config_locks()->relay_lock));
                                 ^~~~~~~~~~~~~~
./common/thread/thread.h:117:50: note: expanded from macro 'thread_mutex_lock'
#define thread_mutex_lock(x) thread_mutex_lock_c(x,__LINE__,__FILE__)
                                                 ^
slave.c:940:60: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            cleanup_relays = update_relays(&global.relays, config->relay, config->relay_length);
                                                           ^~~~~~~~~~~~~
slave.c:952:30: error: inferred bounds 'bounds(&config_locks()->relay_lock, &config_locks()->relay_lock + 1)' contain a modifying expression; use a temporary instead
        thread_mutex_unlock (&(config_locks()->relay_lock));
                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./common/thread/thread.h:118:54: note: expanded from macro 'thread_mutex_unlock'
#define thread_mutex_unlock(x) thread_mutex_unlock_c(x,__LINE__,__FILE__)
                                                     ^
slave.c:952:32: note: modifying expression
        thread_mutex_unlock (&(config_locks()->relay_lock));
                               ^~~~~~~~~~~~~~
./common/thread/thread.h:118:54: note: expanded from macro 'thread_mutex_unlock'
#define thread_mutex_unlock(x) thread_mutex_unlock_c(x,__LINE__,__FILE__)
                                                     ^
slave.c:963:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_INFO("shutting down current relays");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:50:33: note: expanded from macro 'ICECAST_LOG_INFO'
#define ICECAST_LOG_INFO(...)   ICECAST_LOG(ICECAST_LOGLEVEL_INFO,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
slave.c:967:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_INFO("Slave thread shutdown complete");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:50:33: note: expanded from macro 'ICECAST_LOG_INFO'
#define ICECAST_LOG_INFO(...)   ICECAST_LOG(ICECAST_LOGLEVEL_INFO,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
6 warnings and 68 errors generated.
make[3]: [icecast-slave.o] Error 1 (ignored)
In file included from source.c:46:
In file included from ./source.h:25:
In file included from ./format.h:25:
In file included from ./client.h:23:
./common/httpp/encoding.h:61:117: error: expected ')'
ssize_t httpp_encoding_read(_Ptr<httpp_encoding_t> self, void* buf, size_t len, ssize_t (*)(void *, void *, size_t) cb : itype(_Ptr<ssize_t (void* , void* , size_t )> ) , void* userdata);
                                                                                                                    ^
./common/httpp/encoding.h:61:28: note: to match this '('
ssize_t httpp_encoding_read(_Ptr<httpp_encoding_t> self, void* buf, size_t len, ssize_t (*)(void *, void *, size_t) cb : itype(_Ptr<ssize_t (void* , void* , size_t )> ) , void* userdata);
                           ^
./common/httpp/encoding.h:66:69: error: expected ')'
int httpp_encoding_eof(_Ptr<httpp_encoding_t> self, int (*)(void *) cb : itype(_Ptr<int (void* )> ) , void* userdata);
                                                                    ^
./common/httpp/encoding.h:66:23: note: to match this '('
int httpp_encoding_eof(_Ptr<httpp_encoding_t> self, int (*)(void *) cb : itype(_Ptr<int (void* )> ) , void* userdata);
                      ^
In file included from source.c:46:
In file included from ./source.h:25:
In file included from ./format.h:25:
In file included from ./client.h:28:
In file included from ./module.h:15:
./refobject.h:155:67: warning: declaration of 'struct __va_list_tag' will not be visible outside of this function [-Wvisibility]
    _Ptr<int (refobject_t , _Ptr<const refobject_type_t> , struct __va_list_tag* )> type_newcb;
                                                                  ^
In file included from source.c:46:
In file included from ./source.h:25:
In file included from ./format.h:25:
./client.h:154:91: error: 'type name' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
int client_send_bytes(client_t *client : itype(_Ptr<client_t> ) , const void *buf : itype(_Nt_array_ptr<const void> ) , unsigned int len);
                                                                                          ^
./client.h:155:85: error: 'type name' declared as _Nt_array_ptr of type 'void'; only integer and pointer types are allowed
int client_read_bytes(client_t *client : itype(_Ptr<client_t> ) , void *buf : itype(_Nt_array_ptr<void> ) , unsigned int len);
                                                                                    ^
./client.h:157:88: error: 'type name' declared as _Nt_array_ptr of type 'void'; only integer and pointer types are allowed
ssize_t client_body_read(client_t *client : itype(_Ptr<client_t> ) , void *buf : itype(_Nt_array_ptr<void> ) , size_t len);
                                                                                       ^
In file included from source.c:48:
./connection.h:58:36: error: 'type name' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
    _Ptr<int (_Ptr<connection_t> , _Nt_array_ptr<const void> , size_t )> send;
                                   ^
./connection.h:81:55: error: 'buf' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
ssize_t connection_send_bytes(_Ptr<connection_t> con, _Nt_array_ptr<const void> buf, size_t len);
                                                      ^
In file included from source.c:59:
./auth.h:115:5: error: declaration of anonymous struct must be a definition
    struct (anonymous struct at /home/hasantouma/plum-umd-icecast/checkedc-icecast/src/auth.h:115:5) filter_admin[32];
    ^
./auth.h:115:118: error: type name requires a specifier or qualifier
    struct (anonymous struct at /home/hasantouma/plum-umd-icecast/checkedc-icecast/src/auth.h:115:5) filter_admin[32];
                                                                                                                     ^
source.c:86:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_WARN("Source at \"%s\" does not start with '/', clients will be "
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
source.c:206:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_DEBUG("clearing source \"%s\"", source->mount);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
source.c:220:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_INFO("Closing dumpfile for %s", source->mount);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:50:33: note: expanded from macro 'ICECAST_LOG_INFO'
#define ICECAST_LOG_INFO(...)   ICECAST_LOG(ICECAST_LOGLEVEL_INFO,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
source.c:244:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_INFO("%d active listeners on %s released", c, source->mount);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:50:33: note: expanded from macro 'ICECAST_LOG_INFO'
#define ICECAST_LOG_INFO(...)   ICECAST_LOG(ICECAST_LOGLEVEL_INFO,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
source.c:308:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_DEBUG("freeing source \"%s\"", source->mount);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
source.c:409:38: warning: comparison of distinct pointer types ('_Ptr<int (_Ptr<source_t>, _Ptr<client_t>)>' (aka '_Ptr<int (_Ptr<struct source_tag>, _Ptr<struct _client_tag>)>') and 'int (*)(_Ptr<source_t>, client_t * : itype(_Ptr<client_t>))' (aka 'int (*)(_Ptr<struct source_tag>, struct _client_tag * : itype(_Ptr<client_t>))')) [-Wcompare-distinct-pointer-types]
            if (client->check_buffer != format_check_http_buffer)
                ~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~~~~~~
source.c:412:38: error: assigning to '_Ptr<int (_Ptr<source_t>, _Ptr<client_t>)>' (aka '_Ptr<int (_Ptr<struct source_tag>, _Ptr<struct _client_tag>)>') from incompatible type 'int (_Ptr<source_t>, client_t * : itype(_Ptr<client_t>))' (aka 'int (_Ptr<struct source_tag>, struct _client_tag * : itype(_Ptr<client_t>))'): type mismatch at 2nd parameter ('_Ptr<client_t>' (aka '_Ptr<struct _client_tag>') vs 'client_t *' (aka 'struct _client_tag *'))
                client->check_buffer = format_check_file_buffer;
                                     ^ ~~~~~~~~~~~~~~~~~~~~~~~~
source.c:434:38: warning: comparison of distinct pointer types ('_Ptr<int (_Ptr<source_t>, _Ptr<client_t>)>' (aka '_Ptr<int (_Ptr<struct source_tag>, _Ptr<struct _client_tag>)>') and 'int (*)(_Ptr<source_t>, client_t * : itype(_Ptr<client_t>))' (aka 'int (*)(_Ptr<struct source_tag>, struct _client_tag * : itype(_Ptr<client_t>))')) [-Wcompare-distinct-pointer-types]
            if (client->check_buffer != format_check_http_buffer)
                ~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~~~~~~
source.c:437:38: error: assigning to '_Ptr<int (_Ptr<source_t>, _Ptr<client_t>)>' (aka '_Ptr<int (_Ptr<struct source_tag>, _Ptr<struct _client_tag>)>') from incompatible type 'int (_Ptr<source_t>, client_t * : itype(_Ptr<client_t>))' (aka 'int (_Ptr<struct source_tag>, struct _client_tag * : itype(_Ptr<client_t>))'): type mismatch at 2nd parameter ('_Ptr<client_t>' (aka '_Ptr<struct _client_tag>') vs 'client_t *' (aka 'struct _client_tag *'))
                client->check_buffer = format_check_file_buffer;
                                     ^ ~~~~~~~~~~~~~~~~~~~~~~~~
source.c:444:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_INFO("passing %lu listeners to \"%s\"", count, dest->mount);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:50:33: note: expanded from macro 'ICECAST_LOG_INFO'
#define ICECAST_LOG_INFO(...)   ICECAST_LOG(ICECAST_LOGLEVEL_INFO,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
source.c:392:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_WARN("stream %s and %s are of different types, ignored", source->mount, dest->mount);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
source.c:385:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_INFO("source mount %s is not available", source->mount);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:50:33: note: expanded from macro 'ICECAST_LOG_INFO'
#define ICECAST_LOG_INFO(...)   ICECAST_LOG(ICECAST_LOGLEVEL_INFO,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
source.c:368:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_WARN("destination mount %s not running, unable to move clients ", dest->mount);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
source.c:357:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_WARN("src and dst are the same \"%s\", skipping", source->mount);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
source.c:520:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_INFO("End of Stream %s", source->mount);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:50:33: note: expanded from macro 'ICECAST_LOG_INFO'
#define ICECAST_LOG_INFO(...)   ICECAST_LOG(ICECAST_LOGLEVEL_INFO,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
source.c:509:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_DEBUG("last %ld, timeout %d, now %ld", (long)source->last_read,
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
source.c:511:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_WARN("Disconnecting source due to socket timeout");
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
source.c:499:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_WARN("Error while waiting on socket, Disconnecting source");
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
source.c:561:38: warning: comparison of distinct pointer types ('_Ptr<int (_Ptr<source_t>, _Ptr<client_t>)>' (aka '_Ptr<int (_Ptr<struct source_tag>, _Ptr<struct _client_tag>)>') and 'int (*)(_Ptr<source_t>, client_t * : itype(_Ptr<client_t>))' (aka 'int (*)(_Ptr<struct source_tag>, struct _client_tag * : itype(_Ptr<client_t>))')) [-Wcompare-distinct-pointer-types]
            if (client->check_buffer != format_check_file_buffer)
                ~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~~~~~~
source.c:549:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_INFO("time limit reached for client #%lu", client->con->id);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:50:33: note: expanded from macro 'ICECAST_LOG_INFO'
#define ICECAST_LOG_INFO(...)   ICECAST_LOG(ICECAST_LOGLEVEL_INFO,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
source.c:583:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_INFO("Client %lu (%s) has fallen too far behind, removing",
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:50:33: note: expanded from macro 'ICECAST_LOG_INFO'
#define ICECAST_LOG_INFO(...)   ICECAST_LOG(ICECAST_LOGLEVEL_INFO,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
source.c:597:25: error: automatic variable 'buffer' with bounds must have initializer
    _Nt_array_ptr<char> buffer;
                        ^
source.c:607:15: error: argument does not meet declared bounds for 1st parameter
    strftime (buffer, sizeof(buffer), filename, loctime);
              ^~~~~~
source.c:607:15: note: source bounds are an empty range
source.c:607:15: note: destination upper bound is above source upper bound
source.c:607:15: note: (expanded) expected argument bounds are 'bounds((char *)buffer, (char *)buffer + sizeof (buffer))'
source.c:607:15: note: (expanded) inferred bounds are 'bounds(buffer, buffer + 0)'
    strftime (buffer, sizeof(buffer), filename, loctime);
              ^~~~~~
source.c:638:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_WARN("Cannot open dump file \"%s\" for appending: %s, disabling.",
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
source.c:655:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_DEBUG("Source creation complete");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
source.c:810:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_INFO("listener count on %s now %lu", source->mount, source->listeners);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:50:33: note: expanded from macro 'ICECAST_LOG_INFO'
#define ICECAST_LOG_INFO(...)   ICECAST_LOG(ICECAST_LOGLEVEL_INFO,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
source.c:836:21: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                    ICECAST_LOG_ERROR("queue state is unexpected");
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
source.c:790:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_DEBUG("Client added for mountpoint (%s)", source->mount);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
source.c:781:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_INFO("Client deleted, exceeding maximum listeners for this "
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:50:33: note: expanded from macro 'ICECAST_LOG_INFO'
#define ICECAST_LOG_INFO(...)   ICECAST_LOG(ICECAST_LOGLEVEL_INFO,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
source.c:759:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_DEBUG("Client removed");
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
source.c:860:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_INFO("Source at \"%s\" exiting", source->mount);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:50:33: note: expanded from macro 'ICECAST_LOG_INFO'
#define ICECAST_LOG_INFO(...)   ICECAST_LOG(ICECAST_LOGLEVEL_INFO,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
source.c:858:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_INFO("Source from %s at \"%s\" exiting", source->con->ip, source->mount);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:50:33: note: expanded from macro 'ICECAST_LOG_INFO'
#define ICECAST_LOG_INFO(...)   ICECAST_LOG(ICECAST_LOGLEVEL_INFO,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
source.c:965:31: error: initializing '_Nt_array_ptr<const char>' with an expression of incompatible type 'const char *'
    _Nt_array_ptr<const char> start =  s;
                              ^        ~
source.c:979:32: error: automatic variable 'name' with bounds must have initializer
           _Nt_array_ptr<char> name;
                               ^
source.c:980:21: error: automatic variable 'value' with bounds must have initializer
_Nt_array_ptr<char> value;
                    ^
source.c:1072:66: error: passing '_Nt_array_ptr<char>' to parameter of incompatible type 'const char *'
            stats_event_conv (source->mount, "server_name", str, source->format->charset);
                                                                 ^~~~~~~~~~~~~~~~~~~~~~~
./stats.h:82:142: note: passing argument to parameter 'charset' here
void stats_event_conv(const char *mount : itype(_Nt_array_ptr<const char> ) , _Nt_array_ptr<const char> name, const char *value, const char *charset);
                                                                                                                                             ^
source.c:1090:73: error: passing '_Nt_array_ptr<char>' to parameter of incompatible type 'const char *'
            stats_event_conv (source->mount, "server_description", str, source->format->charset);
                                                                        ^~~~~~~~~~~~~~~~~~~~~~~
./stats.h:82:142: note: passing argument to parameter 'charset' here
void stats_event_conv(const char *mount : itype(_Nt_array_ptr<const char> ) , _Nt_array_ptr<const char> name, const char *value, const char *charset);
                                                                                                                                             ^
source.c:1107:65: error: passing '_Nt_array_ptr<char>' to parameter of incompatible type 'const char *'
            stats_event_conv (source->mount, "server_url", str, source->format->charset);
                                                                ^~~~~~~~~~~~~~~~~~~~~~~
./stats.h:82:142: note: passing argument to parameter 'charset' here
void stats_event_conv(const char *mount : itype(_Nt_array_ptr<const char> ) , _Nt_array_ptr<const char> name, const char *value, const char *charset);
                                                                                                                                             ^
source.c:1125:60: error: passing '_Nt_array_ptr<char>' to parameter of incompatible type 'const char *'
            stats_event_conv (source->mount, "genre", str, source->format->charset);
                                                           ^~~~~~~~~~~~~~~~~~~~~~~
./stats.h:82:142: note: passing argument to parameter 'charset' here
void stats_event_conv(const char *mount : itype(_Nt_array_ptr<const char> ) , _Nt_array_ptr<const char> name, const char *value, const char *charset);
                                                                                                                                             ^
source.c:1175:30: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
        source->dumpfilename = strdup (mountinfo->dumpfile);
                             ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source.c:1191:29: error: initializing '_Nt_array_ptr<char>' with an expression of incompatible type 'void *'
        _Nt_array_ptr<char> path =  malloc (len);
                            ^       ~~~~~~~~~~~~
source.c:1006:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_DEBUG("Applying mount information for \"%s\"", source->mount);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
source.c:1049:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_DEBUG("YP changed to %d", val);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
source.c:1251:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_DEBUG("fallback %s", source->fallback_mount);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
source.c:1253:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_DEBUG("intro file is %s", mountinfo->intro_filename);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
source.c:1255:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_DEBUG("Dumping stream to %s", source->dumpfilename);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
source.c:1258:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_DEBUG("on_demand set");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
source.c:1268:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_DEBUG("hidden from public");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
source.c:1281:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_DEBUG("public set to %d", source->yp_public);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
source.c:1282:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_DEBUG("max listeners to %ld", source->max_listeners);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
source.c:1283:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_DEBUG("queue size to %u", source->queue_size_limit);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
source.c:1284:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_DEBUG("burst size to %u", source->burst_size);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
source.c:1285:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_DEBUG("source timeout to %u", source->timeout);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
source.c:1286:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_DEBUG("fallback_when_full to %u", source->fallback_when_full);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
source.c:1333:53: error: 'type name' declared as _Nt_array_ptr of type 'void'; only integer and pointer types are allowed
static void* source_fallback_file(void *arg : itype(_Nt_array_ptr<void> ) )
                                                    ^
source.c:1350:14: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'void *'
        path = malloc (len);
             ^ ~~~~~~~~~~~~
source.c:1373:14: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
        type = fserve_content_type (mount);
             ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~
source.c:1352:23: warning: cannot prove argument meets declared bounds for 1st parameter [-Wcheck-bounds-decls-unchecked-scope]
            snprintf (path, len, "%s%s", config->webroot_dir, mount);
                      ^~~~
source.c:1352:23: note: (expanded) expected argument bounds are 'bounds((char *)path, (char *)path + (size_t)len == 0 ? 0 : (size_t)len - 1)'
source.c:1352:23: note: (expanded) inferred bounds are 'bounds(path, path + 0)'
            snprintf (path, len, "%s%s", config->webroot_dir, mount);
                      ^~~~
source.c:1372:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_INFO("mountpoint %s is reserved", mount);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:50:33: note: expanded from macro 'ICECAST_LOG_INFO'
#define ICECAST_LOG_INFO(...)   ICECAST_LOG(ICECAST_LOGLEVEL_INFO,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
source.c:1369:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_WARN("mountpoint \"%s\" already reserved", mount);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
source.c:1361:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_WARN("unable to open file \"%s\"", path);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
5 warnings and 66 errors generated.
make[3]: [icecast-source.o] Error 1 (ignored)
In file included from stats.c:34:
./connection.h:58:36: error: 'type name' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
    _Ptr<int (_Ptr<connection_t> , _Nt_array_ptr<const void> , size_t )> send;
                                   ^
./connection.h:81:55: error: 'buf' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
ssize_t connection_send_bytes(_Ptr<connection_t> con, _Nt_array_ptr<const void> buf, size_t len);
                                                      ^
In file included from stats.c:35:
In file included from ./source.h:25:
In file included from ./format.h:25:
In file included from ./client.h:23:
./common/httpp/encoding.h:61:117: error: expected ')'
ssize_t httpp_encoding_read(_Ptr<httpp_encoding_t> self, void* buf, size_t len, ssize_t (*)(void *, void *, size_t) cb : itype(_Ptr<ssize_t (void* , void* , size_t )> ) , void* userdata);
                                                                                                                    ^
./common/httpp/encoding.h:61:28: note: to match this '('
ssize_t httpp_encoding_read(_Ptr<httpp_encoding_t> self, void* buf, size_t len, ssize_t (*)(void *, void *, size_t) cb : itype(_Ptr<ssize_t (void* , void* , size_t )> ) , void* userdata);
                           ^
./common/httpp/encoding.h:66:69: error: expected ')'
int httpp_encoding_eof(_Ptr<httpp_encoding_t> self, int (*)(void *) cb : itype(_Ptr<int (void* )> ) , void* userdata);
                                                                    ^
./common/httpp/encoding.h:66:23: note: to match this '('
int httpp_encoding_eof(_Ptr<httpp_encoding_t> self, int (*)(void *) cb : itype(_Ptr<int (void* )> ) , void* userdata);
                      ^
In file included from stats.c:35:
In file included from ./source.h:25:
In file included from ./format.h:25:
In file included from ./client.h:28:
In file included from ./module.h:15:
./refobject.h:155:67: warning: declaration of 'struct __va_list_tag' will not be visible outside of this function [-Wvisibility]
    _Ptr<int (refobject_t , _Ptr<const refobject_type_t> , struct __va_list_tag* )> type_newcb;
                                                                  ^
In file included from stats.c:35:
In file included from ./source.h:25:
In file included from ./format.h:25:
./client.h:154:91: error: 'type name' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
int client_send_bytes(client_t *client : itype(_Ptr<client_t> ) , const void *buf : itype(_Nt_array_ptr<const void> ) , unsigned int len);
                                                                                          ^
./client.h:155:85: error: 'type name' declared as _Nt_array_ptr of type 'void'; only integer and pointer types are allowed
int client_read_bytes(client_t *client : itype(_Ptr<client_t> ) , void *buf : itype(_Nt_array_ptr<void> ) , unsigned int len);
                                                                                    ^
./client.h:157:88: error: 'type name' declared as _Nt_array_ptr of type 'void'; only integer and pointer types are allowed
ssize_t client_body_read(client_t *client : itype(_Ptr<client_t> ) , void *buf : itype(_Nt_array_ptr<void> ) , size_t len);
                                                                                       ^
In file included from stats.c:42:
./auth.h:115:5: error: declaration of anonymous struct must be a definition
    struct (anonymous struct at /home/hasantouma/plum-umd-icecast/checkedc-icecast/src/auth.h:115:5) filter_admin[32];
    ^
./auth.h:115:118: error: type name requires a specifier or qualifier
    struct (anonymous struct at /home/hasantouma/plum-umd-icecast/checkedc-icecast/src/auth.h:115:5) filter_admin[32];
                                                                                                                     ^
stats.c:125:26: error: passing '_Ptr<stats_event_t>' (aka '_Ptr<struct _stats_event_tag>') to parameter of incompatible type 'stats_event_t *' (aka 'struct _stats_event_tag *')
    _add_event_to_queue (event, &_global_event_queue);
                         ^~~~~
stats.c:94:48: note: passing argument to parameter 'event' here
static void _add_event_to_queue(stats_event_t *event, _Ptr<event_queue_t> queue);
                                               ^
stats.c:169:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_INFO("stats thread finished");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:50:33: note: expanded from macro 'ICECAST_LOG_INFO'
#define ICECAST_LOG_INFO(...)   ICECAST_LOG(ICECAST_LOGLEVEL_INFO,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
stats.c:217:25: error: passing 'const char *' to parameter of incompatible type '_Nt_array_ptr<const char>'
    event = build_event(source, name, value);
                        ^~~~~~
stats.c:103:66: note: passing argument to parameter 'source' here
static _Ptr<stats_event_t> build_event(_Nt_array_ptr<const char> source, _Nt_array_ptr<const char> name, const char *value : itype(_Nt_array_ptr<const char> ) )
                                                                 ^
stats.c:214:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_WARN("seen non-UTF8 data, probably incorrect metadata (%s, %s)", name, value);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
stats.c:243:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_WARN("No charset found for \"%s\"", charset);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
stats.c:259:26: error: passing 'const char *' to parameter of incompatible type '_Nt_array_ptr<const char>'
    event = build_event (source, name, str);
                         ^~~~~~
stats.c:103:66: note: passing argument to parameter 'source' here
static _Ptr<stats_event_t> build_event(_Nt_array_ptr<const char> source, _Nt_array_ptr<const char> name, const char *value : itype(_Nt_array_ptr<const char> ) )
                                                                 ^
stats.c:282:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_WARN("problem with formatting %s stat %s",
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
stats.c:315:23: error: passing 'const char *' to parameter of incompatible type '_Nt_array_ptr<const char>'
    return(_get_stats(source, name));
                      ^~~~~~
stats.c:289:52: note: passing argument to parameter 'source' here
static char * _get_stats(_Nt_array_ptr<const char> source, _Nt_array_ptr<const char> name)
                                                   ^
stats.c:321:47: error: passing 'const char *' to parameter of incompatible type '_Nt_array_ptr<const char>'
    _Ptr<stats_event_t> event =  build_event (source, name, NULL);
                                              ^~~~~~
stats.c:103:66: note: passing argument to parameter 'source' here
static _Ptr<stats_event_t> build_event(_Nt_array_ptr<const char> source, _Nt_array_ptr<const char> name, const char *value : itype(_Nt_array_ptr<const char> ) )
                                                                 ^
stats.c:472:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_WARN("unhandled event (%d) for %s", event->action, event->source);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
stats.c:487:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_DEBUG("update global %s (%s)", node->name, node->value);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
stats.c:485:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_DEBUG("update \"%s\" %s (%s)", event->source, node->name, node->value);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
stats.c:531:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_DEBUG("new source stat %s", event->source);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
stats.c:588:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_DEBUG("delete source node %s", event->source);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
stats.c:563:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_DEBUG("delete node %s", event->name);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
stats.c:551:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_DEBUG("new node %s (%s)", event->name, event->value);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
stats.c:728:38: error: passing '_Ptr<stats_event_t>' (aka '_Ptr<struct _stats_event_tag>') to parameter of incompatible type 'stats_event_t *' (aka 'struct _stats_event_tag *')
                _add_event_to_queue (copy, &listener->queue);
                                     ^~~~
stats.c:94:48: note: passing argument to parameter 'event' here
static void _add_event_to_queue(stats_event_t *event, _Ptr<event_queue_t> queue);
                                               ^
stats.c:695:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_INFO("stats thread started");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:50:33: note: expanded from macro 'ICECAST_LOG_INFO'
#define ICECAST_LOG_INFO(...)   ICECAST_LOG(ICECAST_LOGLEVEL_INFO,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
stats.c:812:25: error: automatic variable 'buf' with bounds must have initializer
    _Nt_array_ptr<char> buf;
                        ^
stats.c:815:21: error: argument does not meet declared bounds for 1st parameter
    len = snprintf (buf, sizeof (buf), "EVENT %s %s %s\n",
                    ^~~
stats.c:815:21: note: source bounds are an empty range
stats.c:815:21: note: destination upper bound is above source upper bound
stats.c:815:21: note: (expanded) expected argument bounds are 'bounds((char *)buf, (char *)buf + sizeof (buf) == 0 ? 0 : sizeof (buf) - 1)'
stats.c:815:21: note: (expanded) inferred bounds are 'bounds(buf, buf + 0)'
    len = snprintf (buf, sizeof (buf), "EVENT %s %s %s\n",
                    ^~~
stats.c:904:50: error: passing 'char *' to parameter of incompatible type '_Nt_array_ptr<const char>'
                        __add_metadata(metadata, source_real->format->vc.user_comments[i]);
                                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
stats.c:99:71: note: passing argument to parameter 'tag' here
static void __add_metadata(xmlNodePtr node, _Nt_array_ptr<const char> tag);
                                                                      ^
stats.c:941:29: error: passing '_Ptr<stats_event_t>' (aka '_Ptr<struct _stats_event_tag>') to parameter of incompatible type 'stats_event_t *' (aka 'struct _stats_event_tag *')
        _add_event_to_queue(event, &listener->queue);
                            ^~~~~
stats.c:787:48: note: passing argument to parameter 'event' here
static void _add_event_to_queue(stats_event_t *event, _Ptr<event_queue_t> queue)
                                               ^
stats.c:953:34: error: passing '_Ptr<stats_event_t>' (aka '_Ptr<struct _stats_event_tag>') to parameter of incompatible type 'stats_event_t *' (aka 'struct _stats_event_tag *')
            _add_event_to_queue (event, &listener->queue);
                                 ^~~~~
stats.c:787:48: note: passing argument to parameter 'event' here
static void _add_event_to_queue(stats_event_t *event, _Ptr<event_queue_t> queue)
                                               ^
stats.c:974:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_INFO("stats client starting");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:50:33: note: expanded from macro 'ICECAST_LOG_INFO'
#define ICECAST_LOG_INFO(...)   ICECAST_LOG(ICECAST_LOGLEVEL_INFO,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
stats.c:1017:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_INFO("stats client finished");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:50:33: note: expanded from macro 'ICECAST_LOG_INFO'
#define ICECAST_LOG_INFO(...)   ICECAST_LOG(ICECAST_LOGLEVEL_INFO,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
stats.c:1049:31: error: initializing '_Nt_array_ptr<const char>' with an expression of incompatible type 'const char *'
    _Nt_array_ptr<const char> mount =  httpp_get_param(client->parser, "mount");
                              ^        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
stats.c:1221:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_DEBUG("releasing %s stats", src->source);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
1 warning and 36 errors generated.
make[3]: [icecast-stats.o] Error 1 (ignored)
refbuf.c:93:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_ERROR("next not null");
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
1 error generated.
make[3]: [icecast-refbuf.o] Error 1 (ignored)
In file included from client.c:34:
./refobject.h:155:67: warning: declaration of 'struct __va_list_tag' will not be visible outside of this function [-Wvisibility]
    _Ptr<int (refobject_t , _Ptr<const refobject_type_t> , struct __va_list_tag* )> type_newcb;
                                                                  ^
In file included from client.c:36:
./connection.h:58:36: error: 'type name' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
    _Ptr<int (_Ptr<connection_t> , _Nt_array_ptr<const void> , size_t )> send;
                                   ^
./connection.h:81:55: error: 'buf' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
ssize_t connection_send_bytes(_Ptr<connection_t> con, _Nt_array_ptr<const void> buf, size_t len);
                                                      ^
In file included from client.c:39:
In file included from ./format.h:25:
In file included from ./client.h:23:
./common/httpp/encoding.h:61:117: error: expected ')'
ssize_t httpp_encoding_read(_Ptr<httpp_encoding_t> self, void* buf, size_t len, ssize_t (*)(void *, void *, size_t) cb : itype(_Ptr<ssize_t (void* , void* , size_t )> ) , void* userdata);
                                                                                                                    ^
./common/httpp/encoding.h:61:28: note: to match this '('
ssize_t httpp_encoding_read(_Ptr<httpp_encoding_t> self, void* buf, size_t len, ssize_t (*)(void *, void *, size_t) cb : itype(_Ptr<ssize_t (void* , void* , size_t )> ) , void* userdata);
                           ^
./common/httpp/encoding.h:66:69: error: expected ')'
int httpp_encoding_eof(_Ptr<httpp_encoding_t> self, int (*)(void *) cb : itype(_Ptr<int (void* )> ) , void* userdata);
                                                                    ^
./common/httpp/encoding.h:66:23: note: to match this '('
int httpp_encoding_eof(_Ptr<httpp_encoding_t> self, int (*)(void *) cb : itype(_Ptr<int (void* )> ) , void* userdata);
                      ^
In file included from client.c:39:
In file included from ./format.h:25:
./client.h:154:91: error: 'type name' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
int client_send_bytes(client_t *client : itype(_Ptr<client_t> ) , const void *buf : itype(_Nt_array_ptr<const void> ) , unsigned int len);
                                                                                          ^
./client.h:155:85: error: 'type name' declared as _Nt_array_ptr of type 'void'; only integer and pointer types are allowed
int client_read_bytes(client_t *client : itype(_Ptr<client_t> ) , void *buf : itype(_Nt_array_ptr<void> ) , unsigned int len);
                                                                                    ^
./client.h:157:88: error: 'type name' declared as _Nt_array_ptr of type 'void'; only integer and pointer types are allowed
ssize_t client_body_read(client_t *client : itype(_Ptr<client_t> ) , void *buf : itype(_Nt_array_ptr<void> ) , size_t len);
                                                                                       ^
In file included from client.c:49:
./auth.h:115:5: error: declaration of anonymous struct must be a definition
    struct (anonymous struct at /home/hasantouma/plum-umd-icecast/checkedc-icecast/src/auth.h:115:5) filter_admin[32];
    ^
./auth.h:115:118: error: type name requires a specifier or qualifier
    struct (anonymous struct at /home/hasantouma/plum-umd-icecast/checkedc-icecast/src/auth.h:115:5) filter_admin[32];
                                                                                                                     ^
In file included from client.c:55:
./fastevent.h:57:153: warning: declaration of 'struct __va_list_tag' will not be visible outside of this function [-Wvisibility]
refobject_t fastevent_register(fastevent_type_t type, _Ptr<void (_Ptr<const void> , fastevent_type_t , fastevent_flag_t , fastevent_datatype_t , struct __va_list_tag* )> cb, _Ptr<void (void** )> freecb, void* userdata);
                                                                                                                                                        ^
client.c:104:29: error: assigning to '_Ptr<int (_Ptr<client_t>)>' (aka '_Ptr<int (_Ptr<struct _client_tag>)>') from incompatible type 'int (client_t * : itype(_Ptr<client_t>))' (aka 'int (struct _client_tag * : itype(_Ptr<client_t>))'): type mismatch at 1st parameter ('_Ptr<client_t>' (aka '_Ptr<struct _client_tag>') vs 'client_t *' (aka 'struct _client_tag *'))
    client->write_to_client = format_generic_write_to_client;
                            ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
client.c:105:12: error: assigning to 'client_t *' (aka 'struct _client_tag *') from incompatible type '_Ptr<client_t>' (aka '_Ptr<struct _client_tag>')
    *c_ptr = client;
           ^ ~~~~~~
client.c:87:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_WARN("server client limit reached (%d/%d)", config->client_limit, global.clients);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
client.c:107:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_DEBUG("Client %p created on connection %p (connection ID: %llu, socket real: %p \"%H\", socket effective: %p \"%H\")",
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
client.c:167:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_DEBUG("Client %p has request_body_length=%zi", client, client->request_body_length);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
client.c:233:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_DEBUG("Called to destory client %p", client);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
client.c:275:21: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    refobject_unref(client->handler_module);
                    ^~~~~~~~~~~~~~~~~~~~~~
client.c:301:85: error: 'type name' declared as _Nt_array_ptr of type 'void'; only integer and pointer types are allowed
int client_read_bytes(client_t *client : itype(_Ptr<client_t> ) , void *buf : itype(_Nt_array_ptr<void> ) , unsigned int len)
                                                                                    ^
client.c:309:18: error: assigning to 'void *' from incompatible type '_Ptr<connection_t>' (aka '_Ptr<struct connection_tag>')
        userdata = client->con;
                 ^ ~~~~~~~~~~~
client.c:319:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_DEBUG("reading from connection has failed");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
client.c:353:21: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    refobject_unref(report);
                    ^~~~~~
client.c:369:46: warning: cannot prove argument meets declared bounds for 3rd parameter [-Wcheck-bounds-decls-unchecked-scope]
    _client_send_report(client, error->uuid, error->message, error->http_status, NULL);
                                             ^~~~~~~~~~~~~~
client.c:369:46: note: (expanded) expected argument bounds are 'bounds(error->message, error->message + 0)'
client.c:369:46: note: (expanded) inferred bounds are 'bounds(error->message, error->message + 0)'
    _client_send_report(client, error->uuid, error->message, error->http_status, NULL);
                                             ^~~~~~~~~~~~~~
client.c:365:34: warning: cannot prove argument meets declared bounds for 2nd parameter [-Wcheck-bounds-decls-unchecked-scope]
         client_send_500(client, error->message);
                                 ^~~~~~~~~~~~~~
client.c:365:34: note: (expanded) expected argument bounds are 'bounds(error->message, error->message + 0)'
client.c:365:34: note: (expanded) inferred bounds are 'bounds(error->message, error->message + 0)'
         client_send_500(client, error->message);
                                 ^~~~~~~~~~~~~~
client.c:643:32: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'void *'
        fullpath_xslt_template = malloc(fullpath_xslt_template_len);
                               ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
client.c:542:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("No explicit admin format but XSLT file given. BUG. Sending 500 to client %p", client);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
client.c:536:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_ERROR("Unsupported admin format and no XSLT file given. Sending 500 to client %p", client);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
client.c:644:18: warning: cannot prove argument meets declared bounds for 1st parameter [-Wcheck-bounds-decls-unchecked-scope]
        snprintf(fullpath_xslt_template, fullpath_xslt_template_len, "%s%s%s", document_domain_path, PATH_SEPARATOR, xsl);
                 ^~~~~~~~~~~~~~~~~~~~~~
client.c:644:18: note: (expanded) expected argument bounds are 'bounds((char *)fullpath_xslt_template, (char *)fullpath_xslt_template + (size_t)fullpath_xslt_template_len == 0 ? 0 : (size_t)fullpath_xslt_template_len - 1)'
client.c:644:18: note: (expanded) inferred bounds are 'bounds(fullpath_xslt_template, fullpath_xslt_template + 0)'
        snprintf(fullpath_xslt_template, fullpath_xslt_template_len, "%s%s%s", document_domain_path, PATH_SEPARATOR, xsl);
                 ^~~~~~~~~~~~~~~~~~~~~~
client.c:647:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_DEBUG("Sending XSLT (%s)", fullpath_xslt_template);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
client.c:649:29: error: argument does not meet declared bounds for 2nd parameter
        xslt_transform(doc, fullpath_xslt_template, client, status, location);
                            ^~~~~~~~~~~~~~~~~~~~~~
client.c:649:29: note: source bounds are an empty range
client.c:649:29: note: destination upper bound is above source upper bound
client.c:649:29: note: (expanded) expected argument bounds are 'bounds((_Array_ptr<const char>)fullpath_xslt_template, (_Array_ptr<const char>)fullpath_xslt_template + 1)'
client.c:649:29: note: (expanded) inferred bounds are 'bounds(fullpath_xslt_template, fullpath_xslt_template + 0)'
        xslt_transform(doc, fullpath_xslt_template, client, status, location);
                            ^~~~~~~~~~~~~~~~~~~~~~
client.c:603:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_ERROR("Client buffer reallocation failed. Dropping client.");
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
client.c:589:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_DEBUG("Client buffer reallocation succeeded.");
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
client.c:597:21: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                    ICECAST_LOG_ERROR("Dropping client as we can not build response headers.");
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
client.c:580:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_ERROR("Dropping client as we can not build response headers.");
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
client.c:549:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("Can not render XML Document from report. Sending 500 to client %p", client);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
client.c:510:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("No report xml given. Sending 500 to client %p", client);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
client.c:669:21: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    refobject_unref(rootnode);
                    ^~~~~~~~
client.c:677:21: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    refobject_unref(extension);
                    ^~~~~~~~~
client.c:689:72: error: passing '_Ptr<const char>' to parameter of incompatible type 'const char *'
        report = reportxml_database_build_report(config->reportxml_db, state_definition, -1);
                                                                       ^~~~~~~~~~~~~~~~
./reportxml.h:145:123: note: passing argument to parameter 'id' here
reportxml_t * reportxml_database_build_report(reportxml_database_t *db : itype(_Ptr<reportxml_database_t> ) , const char *id, ssize_t depth);
                                                                                                                          ^
client.c:699:73: error: passing '_Ptr<const char>' to parameter of incompatible type 'const char *'
        statenode = reportxml_node_new(REPORTXML_NODE_TYPE_STATE, NULL, state_definition, state_akindof);
                                                                        ^~~~~~~~~~~~~~~~
./reportxml.h:100:95: note: passing argument to parameter 'definition' here
reportxml_node_t * reportxml_node_new(reportxml_node_type_t type, const char *id, const char *definition, const char *akindof);
                                                                                              ^
client.c:707:29: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            refobject_unref(textnode);
                            ^~~~~~~~
client.c:712:25: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        refobject_unref(statenode);
                        ^~~~~~~~~
client.c:713:25: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        refobject_unref(incidentnode);
                        ^~~~~~~~~~~~
client.c:714:25: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        refobject_unref(rootnode);
                        ^~~~~~~~
client.c:743:91: error: 'type name' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
int client_send_bytes(client_t *client : itype(_Ptr<client_t> ) , const void *buf : itype(_Nt_array_ptr<const void> ) , unsigned int len)
                                                                                          ^
client.c:748:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_DEBUG("Client connection died");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
client.c:767:88: error: 'type name' declared as _Nt_array_ptr of type 'void'; only integer and pointer types are allowed
ssize_t client_body_read(client_t *client : itype(_Ptr<client_t> ) , void *buf : itype(_Nt_array_ptr<void> ) , size_t len)
                                                                                       ^
client.c:776:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_DEBUG("Limiting read request to left over body size: left %zu byte, requested %zu byte", left, len);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
client.c:822:79: error: too many arguments to function call, expected 2, have 3
        ret = httpp_encoding_eof(client->encoding, (int(*)(void*))client_eof, client);
              ~~~~~~~~~~~~~~~~~~                                              ^~~~~~
./common/httpp/encoding.h:66:1: note: 'httpp_encoding_eof' declared here
int httpp_encoding_eof(_Ptr<httpp_encoding_t> self, int (*)(void *) cb : itype(_Ptr<int (void* )> ) , void* userdata);
^
client.c:891:25: error: automatic variable 'buf' with bounds must have initializer
    _Nt_array_ptr<char> buf;
                        ^
client.c:894:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_DEBUG("Slurping client %p", client);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
client.c:936:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_DEBUG("Slurping client %p ... failed", client);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
client.c:928:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_DEBUG("Slurping client %p ... needs more data", client);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
client.c:932:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_DEBUG("Slurping client %p ... was a success", client);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
client.c:918:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_DEBUG("Slurping client %p ... needs more data", client);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
client.c:915:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_DEBUG("Slurping client %p ... was a success", client);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
client.c:905:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_DEBUG("Slurping client %p ... was a success", client);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
client.c:897:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_DEBUG("Slurping client %p ... failed", client);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
5 warnings and 53 errors generated.
make[3]: [icecast-client.o] Error 1 (ignored)
playlist.c:146:35: error: passing '_Ptr<vorbis_comment>' (aka '_Ptr<struct vorbis_comment>') to parameter of incompatible type 'vorbis_comment *' (aka 'struct vorbis_comment *')
        track->title = __query_vc(vc, "TITLE");
                                  ^~
playlist.c:58:42: note: passing argument to parameter 'vc' here
static char * __query_vc(vorbis_comment *vc, const char *key)
                                         ^
playlist.c:147:37: error: passing '_Ptr<vorbis_comment>' (aka '_Ptr<struct vorbis_comment>') to parameter of incompatible type 'vorbis_comment *' (aka 'struct vorbis_comment *')
        track->creator = __query_vc(vc, "ARTIST");
                                    ^~
playlist.c:58:42: note: passing argument to parameter 'vc' here
static char * __query_vc(vorbis_comment *vc, const char *key)
                                         ^
playlist.c:148:35: error: passing '_Ptr<vorbis_comment>' (aka '_Ptr<struct vorbis_comment>') to parameter of incompatible type 'vorbis_comment *' (aka 'struct vorbis_comment *')
        track->album = __query_vc(vc, "ALBUM");
                                  ^~
playlist.c:58:42: note: passing argument to parameter 'vc' here
static char * __query_vc(vorbis_comment *vc, const char *key)
                                         ^
playlist.c:149:38: error: passing '_Ptr<vorbis_comment>' (aka '_Ptr<struct vorbis_comment>') to parameter of incompatible type 'vorbis_comment *' (aka 'struct vorbis_comment *')
        track->trackNum = __query_vc(vc, "TRACKNUMBER");
                                     ^~
playlist.c:58:42: note: passing argument to parameter 'vc' here
static char * __query_vc(vorbis_comment *vc, const char *key)
                                         ^
playlist.c:153:39: error: passing '_Ptr<vorbis_comment>' (aka '_Ptr<struct vorbis_comment>') to parameter of incompatible type 'vorbis_comment *' (aka 'struct vorbis_comment *')
            track->title = __query_vc(vc, "X_ICY_TITLE");
                                      ^~
playlist.c:58:42: note: passing argument to parameter 'vc' here
static char * __query_vc(vorbis_comment *vc, const char *key)
                                         ^
5 errors generated.
make[3]: [icecast-playlist.o] Error 1 (ignored)
In file included from xslt.c:51:
In file included from ./client.h:23:
./common/httpp/encoding.h:61:117: error: expected ')'
ssize_t httpp_encoding_read(_Ptr<httpp_encoding_t> self, void* buf, size_t len, ssize_t (*)(void *, void *, size_t) cb : itype(_Ptr<ssize_t (void* , void* , size_t )> ) , void* userdata);
                                                                                                                    ^
./common/httpp/encoding.h:61:28: note: to match this '('
ssize_t httpp_encoding_read(_Ptr<httpp_encoding_t> self, void* buf, size_t len, ssize_t (*)(void *, void *, size_t) cb : itype(_Ptr<ssize_t (void* , void* , size_t )> ) , void* userdata);
                           ^
./common/httpp/encoding.h:66:69: error: expected ')'
int httpp_encoding_eof(_Ptr<httpp_encoding_t> self, int (*)(void *) cb : itype(_Ptr<int (void* )> ) , void* userdata);
                                                                    ^
./common/httpp/encoding.h:66:23: note: to match this '('
int httpp_encoding_eof(_Ptr<httpp_encoding_t> self, int (*)(void *) cb : itype(_Ptr<int (void* )> ) , void* userdata);
                      ^
In file included from xslt.c:51:
In file included from ./client.h:28:
In file included from ./module.h:15:
./refobject.h:155:67: warning: declaration of 'struct __va_list_tag' will not be visible outside of this function [-Wvisibility]
    _Ptr<int (refobject_t , _Ptr<const refobject_type_t> , struct __va_list_tag* )> type_newcb;
                                                                  ^
In file included from xslt.c:51:
./client.h:154:91: error: 'type name' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
int client_send_bytes(client_t *client : itype(_Ptr<client_t> ) , const void *buf : itype(_Nt_array_ptr<const void> ) , unsigned int len);
                                                                                          ^
./client.h:155:85: error: 'type name' declared as _Nt_array_ptr of type 'void'; only integer and pointer types are allowed
int client_read_bytes(client_t *client : itype(_Ptr<client_t> ) , void *buf : itype(_Nt_array_ptr<void> ) , unsigned int len);
                                                                                    ^
./client.h:157:88: error: 'type name' declared as _Nt_array_ptr of type 'void'; only integer and pointer types are allowed
ssize_t client_body_read(client_t *client : itype(_Ptr<client_t> ) , void *buf : itype(_Nt_array_ptr<void> ) , size_t len);
                                                                                       ^
xslt.c:140:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_DEBUG("Clearing stylesheet cache.");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
xslt.c:175:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_DEBUG("Looking up stylesheet file \"%s\".", fn);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
xslt.c:211:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_DEBUG("Using evicted slot %i", i);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
xslt.c:208:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_DEBUG("Using empty slot %i", i);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
xslt.c:191:21: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                    ICECAST_LOG_DEBUG("Source file newer than cached copy. Reloading slot %i", i);
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
xslt.c:198:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_DEBUG("Using cached sheet %i", i);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
xslt.c:178:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_WARN("Error checking for stylesheet file \"%s\": %s", fn,
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
xslt.c:288:21: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                    ICECAST_LOG_DEBUG("Loaded and cached admin_URI \"%s\"", admin_URI);
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
xslt.c:305:15: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ret = xslt_loader(URI, dict, options, ctxt, type);
              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
xslt.c:301:15: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ret = xslt_loader(final_URI, dict, options, ctxt, type);
              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
xslt.c:432:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_WARN("problem applying stylesheet \"%s\"", xslfilename);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
xslt.c:408:21: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                    ICECAST_LOG_ERROR("Client buffer reallocation failed. Dropping client.");
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
xslt.c:398:21: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                    ICECAST_LOG_DEBUG("Client buffer reallocation succeeded.");
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
xslt.c:403:25: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                        ICECAST_LOG_ERROR("Dropping client as we can not build response headers.");
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
xslt.c:390:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_ERROR("Dropping client as we can not build response headers.");
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
xslt.c:338:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("problem reading stylesheet \"%s\"", xslfilename);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
1 warning and 21 errors generated.
make[3]: [icecast-xslt.o] Error 1 (ignored)
In file included from fserve.c:52:
./connection.h:58:36: error: 'type name' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
    _Ptr<int (_Ptr<connection_t> , _Nt_array_ptr<const void> , size_t )> send;
                                   ^
./connection.h:81:55: error: 'buf' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
ssize_t connection_send_bytes(_Ptr<connection_t> con, _Nt_array_ptr<const void> buf, size_t len);
                                                      ^
In file included from fserve.c:55:
In file included from ./client.h:23:
./common/httpp/encoding.h:61:117: error: expected ')'
ssize_t httpp_encoding_read(_Ptr<httpp_encoding_t> self, void* buf, size_t len, ssize_t (*)(void *, void *, size_t) cb : itype(_Ptr<ssize_t (void* , void* , size_t )> ) , void* userdata);
                                                                                                                    ^
./common/httpp/encoding.h:61:28: note: to match this '('
ssize_t httpp_encoding_read(_Ptr<httpp_encoding_t> self, void* buf, size_t len, ssize_t (*)(void *, void *, size_t) cb : itype(_Ptr<ssize_t (void* , void* , size_t )> ) , void* userdata);
                           ^
./common/httpp/encoding.h:66:69: error: expected ')'
int httpp_encoding_eof(_Ptr<httpp_encoding_t> self, int (*)(void *) cb : itype(_Ptr<int (void* )> ) , void* userdata);
                                                                    ^
./common/httpp/encoding.h:66:23: note: to match this '('
int httpp_encoding_eof(_Ptr<httpp_encoding_t> self, int (*)(void *) cb : itype(_Ptr<int (void* )> ) , void* userdata);
                      ^
In file included from fserve.c:55:
In file included from ./client.h:28:
In file included from ./module.h:15:
./refobject.h:155:67: warning: declaration of 'struct __va_list_tag' will not be visible outside of this function [-Wvisibility]
    _Ptr<int (refobject_t , _Ptr<const refobject_type_t> , struct __va_list_tag* )> type_newcb;
                                                                  ^
In file included from fserve.c:55:
./client.h:154:91: error: 'type name' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
int client_send_bytes(client_t *client : itype(_Ptr<client_t> ) , const void *buf : itype(_Nt_array_ptr<const void> ) , unsigned int len);
                                                                                          ^
./client.h:155:85: error: 'type name' declared as _Nt_array_ptr of type 'void'; only integer and pointer types are allowed
int client_read_bytes(client_t *client : itype(_Ptr<client_t> ) , void *buf : itype(_Nt_array_ptr<void> ) , unsigned int len);
                                                                                    ^
./client.h:157:88: error: 'type name' declared as _Nt_array_ptr of type 'void'; only integer and pointer types are allowed
ssize_t client_body_read(client_t *client : itype(_Ptr<client_t> ) , void *buf : itype(_Nt_array_ptr<void> ) , size_t len);
                                                                                       ^
fserve.c:112:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_INFO("file serving started");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:50:33: note: expanded from macro 'ICECAST_LOG_INFO'
#define ICECAST_LOG_INFO(...)   ICECAST_LOG(ICECAST_LOGLEVEL_INFO,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
fserve.c:137:24: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        avl_tree_free (mimetypes, _delete_mapping);
                       ^~~~~~~~~
fserve.c:141:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_INFO("file serving stopped");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:50:33: note: expanded from macro 'ICECAST_LOG_INFO'
#define ICECAST_LOG_INFO(...)   ICECAST_LOG(ICECAST_LOGLEVEL_INFO,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
fserve.c:343:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_DEBUG("fserve handler exit");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
fserve.c:359:14: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
        type = strdup (mime->type);
             ^ ~~~~~~~~~~~~~~~~~~~
fserve.c:364:18: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
            type = strdup ("application/ogg");
                 ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~
fserve.c:366:18: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
            type = strdup ("audio/mpeg");
                 ^ ~~~~~~~~~~~~~~~~~~~~~
fserve.c:368:18: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
            type = strdup ("text/html");
                 ^ ~~~~~~~~~~~~~~~~~~~~
fserve.c:370:18: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
            type = strdup ("text/css");
                 ^ ~~~~~~~~~~~~~~~~~~~
fserve.c:372:18: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
            type = strdup ("text/plain");
                 ^ ~~~~~~~~~~~~~~~~~~~~~
fserve.c:374:18: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
            type = strdup ("image/jpeg");
                 ^ ~~~~~~~~~~~~~~~~~~~~~
fserve.c:376:18: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
            type = strdup ("image/png");
                 ^ ~~~~~~~~~~~~~~~~~~~~
fserve.c:378:18: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
            type = strdup ("audio/x-mpegurl");
                 ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~
fserve.c:380:18: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
            type = strdup ("audio/aac");
                 ^ ~~~~~~~~~~~~~~~~~~~~
fserve.c:382:18: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
            type = strdup ("application/octet-stream");
                 ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
fserve.c:356:39: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    if (mimetypes && !avl_get_by_key (mimetypes, &exttype, &result))
                                      ^~~~~~~~~
fserve.c:358:33: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        _Ptr<mime_type> mime =  result;
                                ^~~~~~
fserve.c:455:29: error: initializing '_Nt_array_ptr<char>' with an expression of incompatible type 'char *'
        _Nt_array_ptr<char> sourceuri =  strdup(httpclient->uri);
                            ^            ~~~~~~~~~~~~~~~~~~~~~~~
fserve.c:479:29: error: initializing '_Nt_array_ptr<char>' with an expression of incompatible type 'char *'
        _Nt_array_ptr<char> reference =  strdup(httpclient->uri);
                            ^            ~~~~~~~~~~~~~~~~~~~~~~~
fserve.c:425:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_INFO("checking for file %H (%H)", httpclient->uri, fullpath);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:50:33: note: expanded from macro 'ICECAST_LOG_INFO'
#define ICECAST_LOG_INFO(...)   ICECAST_LOG(ICECAST_LOGLEVEL_INFO,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
fserve.c:587:28: error: cast source bounds are too narrow for '_Ptr<char>'
        _Ptr<char> type =  fserve_content_type(httpclient->uri);
                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
fserve.c:587:28: note: source bounds are an empty range
fserve.c:587:28: note: target upper bound is above source upper bound
fserve.c:587:28: note: (expanded) required bounds are 'bounds((_Array_ptr<char>)fserve_content_type(httpclient->uri), (_Array_ptr<char>)fserve_content_type(httpclient->uri) + 1)'
fserve.c:587:28: note: (expanded) inferred bounds are 'bounds(value of fserve_content_type(httpclient->uri), value of fserve_content_type(httpclient->uri) + 0)'
fserve.c:594:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_ERROR("Dropping client as we can not build response headers.");
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
fserve.c:557:24: error: cast source bounds are too narrow for '_Ptr<char>'
                type = fserve_content_type(httpclient->uri);
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
fserve.c:557:24: note: source bounds are an empty range
fserve.c:557:24: note: target upper bound is above source upper bound
fserve.c:557:24: note: (expanded) required bounds are 'bounds((_Array_ptr<char>)fserve_content_type(httpclient->uri), (_Array_ptr<char>)fserve_content_type(httpclient->uri) + 1)'
fserve.c:557:24: note: (expanded) inferred bounds are 'bounds(value of fserve_content_type(httpclient->uri), value of fserve_content_type(httpclient->uri) + 0)'
fserve.c:563:21: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                    ICECAST_LOG_ERROR("Dropping client as we can not build response headers.");
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
fserve.c:514:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_WARN("Problem accessing file \"%H\"", fullpath);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
fserve.c:506:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_WARN("found requested file but there is no handler for it: %H", fullpath);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
fserve.c:495:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_DEBUG("on demand file \"%H\" refused. Serving static files has been disabled in the config", fullpath);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
fserve.c:482:13: warning: out-of-bounds memory access [-Wcheck-memory-accesses]
            *eol = '\0';
            ^~~~
fserve.c:482:13: note: source bounds are an empty range
fserve.c:482:13: note: accesses memory at or above the upper bound
fserve.c:482:13: note: (expanded) inferred bounds are 'bounds(eol, eol + 0)'
fserve.c:458:9: warning: out-of-bounds memory access [-Wcheck-memory-accesses]
        *dot = 0;
        ^~~~
fserve.c:458:9: note: source bounds are an empty range
fserve.c:458:9: note: accesses memory at or above the upper bound
fserve.c:458:9: note: (expanded) inferred bounds are 'bounds(dot, dot + 0)'
fserve.c:464:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_ERROR("Dropping client as we can not build response headers.");
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
fserve.c:442:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_WARN("req for file \"%H\" %s", fullpath, strerror (errno));
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
fserve.c:631:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_DEBUG("fserve handler waking up");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
fserve.c:654:25: error: passing '_Ptr<fserve_t>' (aka '_Ptr<struct _fserve_t>') to parameter of incompatible type 'fserve_t *' (aka 'struct _fserve_t *')
    fserve_add_pending (fclient);
                        ^~~~~~~
fserve.c:623:42: note: passing argument to parameter 'fclient' here
static void fserve_add_pending(fserve_t *fclient)
                                         ^
fserve.c:645:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_DEBUG("Adding client %p to file serving engine", client);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
fserve.c:679:24: error: passing '_Ptr<fserve_t>' (aka '_Ptr<struct _fserve_t>') to parameter of incompatible type 'fserve_t *' (aka 'struct _fserve_t *')
    fserve_add_pending(fclient);
                       ^~~~~~~
fserve.c:623:42: note: passing argument to parameter 'fclient' here
static void fserve_add_pending(fserve_t *fclient)
                                         ^
fserve.c:667:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_DEBUG("Adding client to file serving engine");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
fserve.c:684:28: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    _Ptr<mime_type> map =  mapping;
                           ^~~~~~~
fserve.c:703:25: error: automatic variable 'line' with bounds must have initializer
    _Nt_array_ptr<char> line;
                        ^
fserve.c:755:30: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
                mapping->ext = strdup(ext);
                             ^ ~~~~~~~~~~~
fserve.c:756:31: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
                mapping->type = strdup(type);
                              ^ ~~~~~~~~~~~~
fserve.c:768:15: error: assigning to 'avl_tree *' (aka 'struct _avl_tree *') from incompatible type '_Ptr<avl_tree>' (aka '_Ptr<struct _avl_tree>')
    mimetypes = new_mimetypes;
              ^ ~~~~~~~~~~~~~
fserve.c:722:17: error: argument does not meet declared bounds for 1st parameter
    while(fgets(line, 4096, mimefile))
                ^~~~
fserve.c:722:17: note: source bounds are an empty range
fserve.c:722:17: note: destination upper bound is above source upper bound
fserve.c:722:17: note: (expanded) expected argument bounds are 'bounds((char *)line, (char *)line + 4096)'
fserve.c:722:17: note: (expanded) inferred bounds are 'bounds(line, line + 0)'
    while(fgets(line, 4096, mimefile))
                ^~~~
fserve.c:767:24: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        avl_tree_free (mimetypes, _delete_mapping);
                       ^~~~~~~~~
fserve.c:724:9: warning: out-of-bounds memory access [-Wcheck-memory-accesses]
        line[4095] = 0;
        ^~~~~~~~~~
fserve.c:724:9: note: source bounds are an empty range
fserve.c:724:9: note: accesses memory at or above the upper bound
fserve.c:724:9: note: (expanded) inferred bounds are 'bounds(line, line + 0)'
fserve.c:738:9: warning: out-of-bounds memory access [-Wcheck-memory-accesses]
        *cur++ = 0;
        ^~~~~~
fserve.c:738:9: note: source bounds are an empty range
fserve.c:738:9: note: (expanded) inferred bounds are 'bounds(cur, cur + 0)'
fserve.c:749:13: warning: out-of-bounds memory access [-Wcheck-memory-accesses]
            *cur++ = 0;
            ^~~~~~
fserve.c:749:13: note: source bounds are an empty range
fserve.c:749:13: note: (expanded) inferred bounds are 'bounds(cur, cur + 0)'
fserve.c:716:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_WARN("Cannot open mime types file %s", config->mimetypes_fn);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
6 warnings and 49 errors generated.
make[3]: [icecast-fserve.o] Error 1 (ignored)
In file included from admin.c:29:
./connection.h:58:36: error: 'type name' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
    _Ptr<int (_Ptr<connection_t> , _Nt_array_ptr<const void> , size_t )> send;
                                   ^
./connection.h:81:55: error: 'buf' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
ssize_t connection_send_bytes(_Ptr<connection_t> con, _Nt_array_ptr<const void> buf, size_t len);
                                                      ^
In file included from admin.c:31:
In file included from ./client.h:23:
./common/httpp/encoding.h:61:117: error: expected ')'
ssize_t httpp_encoding_read(_Ptr<httpp_encoding_t> self, void* buf, size_t len, ssize_t (*)(void *, void *, size_t) cb : itype(_Ptr<ssize_t (void* , void* , size_t )> ) , void* userdata);
                                                                                                                    ^
./common/httpp/encoding.h:61:28: note: to match this '('
ssize_t httpp_encoding_read(_Ptr<httpp_encoding_t> self, void* buf, size_t len, ssize_t (*)(void *, void *, size_t) cb : itype(_Ptr<ssize_t (void* , void* , size_t )> ) , void* userdata);
                           ^
./common/httpp/encoding.h:66:69: error: expected ')'
int httpp_encoding_eof(_Ptr<httpp_encoding_t> self, int (*)(void *) cb : itype(_Ptr<int (void* )> ) , void* userdata);
                                                                    ^
./common/httpp/encoding.h:66:23: note: to match this '('
int httpp_encoding_eof(_Ptr<httpp_encoding_t> self, int (*)(void *) cb : itype(_Ptr<int (void* )> ) , void* userdata);
                      ^
In file included from admin.c:31:
In file included from ./client.h:28:
In file included from ./module.h:15:
./refobject.h:155:67: warning: declaration of 'struct __va_list_tag' will not be visible outside of this function [-Wvisibility]
    _Ptr<int (refobject_t , _Ptr<const refobject_type_t> , struct __va_list_tag* )> type_newcb;
                                                                  ^
In file included from admin.c:31:
./client.h:154:91: error: 'type name' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
int client_send_bytes(client_t *client : itype(_Ptr<client_t> ) , const void *buf : itype(_Nt_array_ptr<const void> ) , unsigned int len);
                                                                                          ^
./client.h:155:85: error: 'type name' declared as _Nt_array_ptr of type 'void'; only integer and pointer types are allowed
int client_read_bytes(client_t *client : itype(_Ptr<client_t> ) , void *buf : itype(_Nt_array_ptr<void> ) , unsigned int len);
                                                                                    ^
./client.h:157:88: error: 'type name' declared as _Nt_array_ptr of type 'void'; only integer and pointer types are allowed
ssize_t client_body_read(client_t *client : itype(_Ptr<client_t> ) , void *buf : itype(_Nt_array_ptr<void> ) , size_t len);
                                                                                       ^
In file included from admin.c:42:
./auth.h:115:5: error: declaration of anonymous struct must be a definition
    struct (anonymous struct at /home/hasantouma/plum-umd-icecast/checkedc-icecast/src/auth.h:115:5) filter_admin[32];
    ^
./auth.h:115:118: error: type name requires a specifier or qualifier
    struct (anonymous struct at /home/hasantouma/plum-umd-icecast/checkedc-icecast/src/auth.h:115:5) filter_admin[32];
                                                                                                                     ^
admin.c:118:97: error: initializing '_Ptr<void (_Ptr<client_t>, source_t *, admin_format_t)> const' (aka '_Ptr<void (_Ptr<struct _client_tag>, struct source_tag *, admin_format_t)> const') with an expression of incompatible type 'void (_Ptr<client_t>, _Ptr<source_t>, admin_format_t)' (aka 'void (_Ptr<struct _client_tag>, _Ptr<struct source_tag>, admin_format_t)'): type mismatch at 2nd parameter ('source_t *' (aka 'struct source_tag *') vs '_Ptr<source_t>' (aka '_Ptr<struct source_tag>'))
    { FALLBACK_RAW_REQUEST,                 ADMINTYPE_MOUNT,        ADMIN_FORMAT_RAW,           command_fallback, NULL},
                                                                                                ^~~~~~~~~~~~~~~~
admin.c:119:97: error: initializing '_Ptr<void (_Ptr<client_t>, source_t *, admin_format_t)> const' (aka '_Ptr<void (_Ptr<struct _client_tag>, struct source_tag *, admin_format_t)> const') with an expression of incompatible type 'void (_Ptr<client_t>, _Ptr<source_t>, admin_format_t)' (aka 'void (_Ptr<struct _client_tag>, _Ptr<struct source_tag>, admin_format_t)'): type mismatch at 2nd parameter ('source_t *' (aka 'struct source_tag *') vs '_Ptr<source_t>' (aka '_Ptr<struct source_tag>'))
    { FALLBACK_HTML_REQUEST,                ADMINTYPE_MOUNT,        ADMIN_FORMAT_HTML,          command_fallback, NULL},
                                                                                                ^~~~~~~~~~~~~~~~
admin.c:120:97: error: initializing '_Ptr<void (_Ptr<client_t>, source_t *, admin_format_t)> const' (aka '_Ptr<void (_Ptr<struct _client_tag>, struct source_tag *, admin_format_t)> const') with an expression of incompatible type 'void (_Ptr<client_t>, _Ptr<source_t>, admin_format_t)' (aka 'void (_Ptr<struct _client_tag>, _Ptr<struct source_tag>, admin_format_t)'): type mismatch at 2nd parameter ('source_t *' (aka 'struct source_tag *') vs '_Ptr<source_t>' (aka '_Ptr<struct source_tag>'))
    { METADATA_RAW_REQUEST,                 ADMINTYPE_MOUNT,        ADMIN_FORMAT_RAW,           command_metadata, NULL},
                                                                                                ^~~~~~~~~~~~~~~~
admin.c:121:97: error: initializing '_Ptr<void (_Ptr<client_t>, source_t *, admin_format_t)> const' (aka '_Ptr<void (_Ptr<struct _client_tag>, struct source_tag *, admin_format_t)> const') with an expression of incompatible type 'void (_Ptr<client_t>, _Ptr<source_t>, admin_format_t)' (aka 'void (_Ptr<struct _client_tag>, _Ptr<struct source_tag>, admin_format_t)'): type mismatch at 2nd parameter ('source_t *' (aka 'struct source_tag *') vs '_Ptr<source_t>' (aka '_Ptr<struct source_tag>'))
    { METADATA_HTML_REQUEST,                ADMINTYPE_MOUNT,        ADMIN_FORMAT_HTML,          command_metadata, NULL},
                                                                                                ^~~~~~~~~~~~~~~~
admin.c:122:97: error: initializing '_Ptr<void (_Ptr<client_t>, source_t *, admin_format_t)> const' (aka '_Ptr<void (_Ptr<struct _client_tag>, struct source_tag *, admin_format_t)> const') with an expression of incompatible type 'void (_Ptr<client_t>, _Ptr<source_t>, admin_format_t)' (aka 'void (_Ptr<struct _client_tag>, _Ptr<struct source_tag>, admin_format_t)'): type mismatch at 2nd parameter ('source_t *' (aka 'struct source_tag *') vs '_Ptr<source_t>' (aka '_Ptr<struct source_tag>'))
    { SHOUTCAST_METADATA_REQUEST,           ADMINTYPE_MOUNT,        ADMIN_FORMAT_HTML,          command_shoutcast_metadata, NULL},
                                                                                                ^~~~~~~~~~~~~~~~~~~~~~~~~~
admin.c:123:97: error: initializing '_Ptr<void (_Ptr<client_t>, source_t *, admin_format_t)> const' (aka '_Ptr<void (_Ptr<struct _client_tag>, struct source_tag *, admin_format_t)> const') with an expression of incompatible type 'void (_Ptr<client_t>, _Ptr<source_t>, admin_format_t)' (aka 'void (_Ptr<struct _client_tag>, _Ptr<struct source_tag>, admin_format_t)'): type mismatch at 2nd parameter ('source_t *' (aka 'struct source_tag *') vs '_Ptr<source_t>' (aka '_Ptr<struct source_tag>'))
    { LISTCLIENTS_RAW_REQUEST,              ADMINTYPE_MOUNT,        ADMIN_FORMAT_RAW,           command_show_listeners, NULL},
                                                                                                ^~~~~~~~~~~~~~~~~~~~~~
admin.c:124:97: error: initializing '_Ptr<void (_Ptr<client_t>, source_t *, admin_format_t)> const' (aka '_Ptr<void (_Ptr<struct _client_tag>, struct source_tag *, admin_format_t)> const') with an expression of incompatible type 'void (_Ptr<client_t>, _Ptr<source_t>, admin_format_t)' (aka 'void (_Ptr<struct _client_tag>, _Ptr<struct source_tag>, admin_format_t)'): type mismatch at 2nd parameter ('source_t *' (aka 'struct source_tag *') vs '_Ptr<source_t>' (aka '_Ptr<struct source_tag>'))
    { LISTCLIENTS_HTML_REQUEST,             ADMINTYPE_MOUNT,        ADMIN_FORMAT_HTML,          command_show_listeners, NULL},
                                                                                                ^~~~~~~~~~~~~~~~~~~~~~
admin.c:128:97: error: initializing '_Ptr<void (_Ptr<client_t>, source_t *, admin_format_t)> const' (aka '_Ptr<void (_Ptr<struct _client_tag>, struct source_tag *, admin_format_t)> const') with an expression of incompatible type 'void (_Ptr<client_t>, _Ptr<source_t>, admin_format_t)' (aka 'void (_Ptr<struct _client_tag>, _Ptr<struct source_tag>, admin_format_t)'): type mismatch at 2nd parameter ('source_t *' (aka 'struct source_tag *') vs '_Ptr<source_t>' (aka '_Ptr<struct source_tag>'))
    { QUEUE_RELOAD_RAW_REQUEST,             ADMINTYPE_GENERAL,      ADMIN_FORMAT_RAW,           command_queue_reload, NULL},
                                                                                                ^~~~~~~~~~~~~~~~~~~~
admin.c:129:97: error: initializing '_Ptr<void (_Ptr<client_t>, source_t *, admin_format_t)> const' (aka '_Ptr<void (_Ptr<struct _client_tag>, struct source_tag *, admin_format_t)> const') with an expression of incompatible type 'void (_Ptr<client_t>, _Ptr<source_t>, admin_format_t)' (aka 'void (_Ptr<struct _client_tag>, _Ptr<struct source_tag>, admin_format_t)'): type mismatch at 2nd parameter ('source_t *' (aka 'struct source_tag *') vs '_Ptr<source_t>' (aka '_Ptr<struct source_tag>'))
    { QUEUE_RELOAD_HTML_REQUEST,            ADMINTYPE_GENERAL,      ADMIN_FORMAT_HTML,          command_queue_reload, NULL},
                                                                                                ^~~~~~~~~~~~~~~~~~~~
admin.c:130:97: error: initializing '_Ptr<void (_Ptr<client_t>, source_t *, admin_format_t)> const' (aka '_Ptr<void (_Ptr<struct _client_tag>, struct source_tag *, admin_format_t)> const') with an expression of incompatible type 'void (_Ptr<client_t>, _Ptr<source_t>, admin_format_t)' (aka 'void (_Ptr<struct _client_tag>, _Ptr<struct source_tag>, admin_format_t)'): type mismatch at 2nd parameter ('source_t *' (aka 'struct source_tag *') vs '_Ptr<source_t>' (aka '_Ptr<struct source_tag>'))
    { LISTMOUNTS_RAW_REQUEST,               ADMINTYPE_GENERAL,      ADMIN_FORMAT_RAW,           command_list_mounts, NULL},
                                                                                                ^~~~~~~~~~~~~~~~~~~
admin.c:131:97: error: initializing '_Ptr<void (_Ptr<client_t>, source_t *, admin_format_t)> const' (aka '_Ptr<void (_Ptr<struct _client_tag>, struct source_tag *, admin_format_t)> const') with an expression of incompatible type 'void (_Ptr<client_t>, _Ptr<source_t>, admin_format_t)' (aka 'void (_Ptr<struct _client_tag>, _Ptr<struct source_tag>, admin_format_t)'): type mismatch at 2nd parameter ('source_t *' (aka 'struct source_tag *') vs '_Ptr<source_t>' (aka '_Ptr<struct source_tag>'))
    { LISTMOUNTS_HTML_REQUEST,              ADMINTYPE_GENERAL,      ADMIN_FORMAT_HTML,          command_list_mounts, NULL},
                                                                                                ^~~~~~~~~~~~~~~~~~~
admin.c:132:97: error: initializing '_Ptr<void (_Ptr<client_t>, source_t *, admin_format_t)> const' (aka '_Ptr<void (_Ptr<struct _client_tag>, struct source_tag *, admin_format_t)> const') with an expression of incompatible type 'void (_Ptr<client_t>, _Ptr<source_t>, admin_format_t)' (aka 'void (_Ptr<struct _client_tag>, _Ptr<struct source_tag>, admin_format_t)'): type mismatch at 2nd parameter ('source_t *' (aka 'struct source_tag *') vs '_Ptr<source_t>' (aka '_Ptr<struct source_tag>'))
    { STREAMLIST_RAW_REQUEST,               ADMINTYPE_GENERAL,      ADMIN_FORMAT_RAW,           command_list_mounts, NULL},
                                                                                                ^~~~~~~~~~~~~~~~~~~
admin.c:133:97: error: initializing '_Ptr<void (_Ptr<client_t>, source_t *, admin_format_t)> const' (aka '_Ptr<void (_Ptr<struct _client_tag>, struct source_tag *, admin_format_t)> const') with an expression of incompatible type 'void (_Ptr<client_t>, _Ptr<source_t>, admin_format_t)' (aka 'void (_Ptr<struct _client_tag>, _Ptr<struct source_tag>, admin_format_t)'): type mismatch at 2nd parameter ('source_t *' (aka 'struct source_tag *') vs '_Ptr<source_t>' (aka '_Ptr<struct source_tag>'))
    { STREAMLIST_PLAINTEXT_REQUEST,         ADMINTYPE_GENERAL,      ADMIN_FORMAT_PLAINTEXT,     command_list_mounts, NULL},
                                                                                                ^~~~~~~~~~~~~~~~~~~
admin.c:134:97: error: initializing '_Ptr<void (_Ptr<client_t>, source_t *, admin_format_t)> const' (aka '_Ptr<void (_Ptr<struct _client_tag>, struct source_tag *, admin_format_t)> const') with an expression of incompatible type 'void (_Ptr<client_t>, _Ptr<source_t>, admin_format_t)' (aka 'void (_Ptr<struct _client_tag>, _Ptr<struct source_tag>, admin_format_t)'): type mismatch at 2nd parameter ('source_t *' (aka 'struct source_tag *') vs '_Ptr<source_t>' (aka '_Ptr<struct source_tag>'))
    { STREAMLIST_HTML_REQUEST,              ADMINTYPE_GENERAL,      ADMIN_FORMAT_HTML,          command_list_mounts, NULL},
                                                                                                ^~~~~~~~~~~~~~~~~~~
admin.c:135:97: error: initializing '_Ptr<void (_Ptr<client_t>, source_t *, admin_format_t)> const' (aka '_Ptr<void (_Ptr<struct _client_tag>, struct source_tag *, admin_format_t)> const') with an expression of incompatible type 'void (_Ptr<client_t>, _Ptr<source_t>, admin_format_t)' (aka 'void (_Ptr<struct _client_tag>, _Ptr<struct source_tag>, admin_format_t)'): type mismatch at 2nd parameter ('source_t *' (aka 'struct source_tag *') vs '_Ptr<source_t>' (aka '_Ptr<struct source_tag>'))
    { MOVECLIENTS_RAW_REQUEST,              ADMINTYPE_MOUNT,        ADMIN_FORMAT_RAW,           command_move_clients, NULL},
                                                                                                ^~~~~~~~~~~~~~~~~~~~
admin.c:136:97: error: initializing '_Ptr<void (_Ptr<client_t>, source_t *, admin_format_t)> const' (aka '_Ptr<void (_Ptr<struct _client_tag>, struct source_tag *, admin_format_t)> const') with an expression of incompatible type 'void (_Ptr<client_t>, _Ptr<source_t>, admin_format_t)' (aka 'void (_Ptr<struct _client_tag>, _Ptr<struct source_tag>, admin_format_t)'): type mismatch at 2nd parameter ('source_t *' (aka 'struct source_tag *') vs '_Ptr<source_t>' (aka '_Ptr<struct source_tag>'))
    { MOVECLIENTS_HTML_REQUEST,             ADMINTYPE_HYBRID,       ADMIN_FORMAT_HTML,          command_move_clients, NULL},
                                                                                                ^~~~~~~~~~~~~~~~~~~~
admin.c:137:97: error: initializing '_Ptr<void (_Ptr<client_t>, source_t *, admin_format_t)> const' (aka '_Ptr<void (_Ptr<struct _client_tag>, struct source_tag *, admin_format_t)> const') with an expression of incompatible type 'void (_Ptr<client_t>, _Ptr<source_t>, admin_format_t)' (aka 'void (_Ptr<struct _client_tag>, _Ptr<struct source_tag>, admin_format_t)'): type mismatch at 2nd parameter ('source_t *' (aka 'struct source_tag *') vs '_Ptr<source_t>' (aka '_Ptr<struct source_tag>'))
    { KILLCLIENT_RAW_REQUEST,               ADMINTYPE_MOUNT,        ADMIN_FORMAT_RAW,           command_kill_client, NULL},
                                                                                                ^~~~~~~~~~~~~~~~~~~
admin.c:138:97: error: initializing '_Ptr<void (_Ptr<client_t>, source_t *, admin_format_t)> const' (aka '_Ptr<void (_Ptr<struct _client_tag>, struct source_tag *, admin_format_t)> const') with an expression of incompatible type 'void (_Ptr<client_t>, _Ptr<source_t>, admin_format_t)' (aka 'void (_Ptr<struct _client_tag>, _Ptr<struct source_tag>, admin_format_t)'): type mismatch at 2nd parameter ('source_t *' (aka 'struct source_tag *') vs '_Ptr<source_t>' (aka '_Ptr<struct source_tag>'))
    { KILLCLIENT_HTML_REQUEST,              ADMINTYPE_MOUNT,        ADMIN_FORMAT_HTML,          command_kill_client, NULL},
                                                                                                ^~~~~~~~~~~~~~~~~~~
admin.c:139:97: error: initializing '_Ptr<void (_Ptr<client_t>, source_t *, admin_format_t)> const' (aka '_Ptr<void (_Ptr<struct _client_tag>, struct source_tag *, admin_format_t)> const') with an expression of incompatible type 'void (_Ptr<client_t>, _Ptr<source_t>, admin_format_t)' (aka 'void (_Ptr<struct _client_tag>, _Ptr<struct source_tag>, admin_format_t)'): type mismatch at 2nd parameter ('source_t *' (aka 'struct source_tag *') vs '_Ptr<source_t>' (aka '_Ptr<struct source_tag>'))
    { KILLSOURCE_RAW_REQUEST,               ADMINTYPE_MOUNT,        ADMIN_FORMAT_RAW,           command_kill_source, NULL},
                                                                                                ^~~~~~~~~~~~~~~~~~~
admin.c:140:97: error: initializing '_Ptr<void (_Ptr<client_t>, source_t *, admin_format_t)> const' (aka '_Ptr<void (_Ptr<struct _client_tag>, struct source_tag *, admin_format_t)> const') with an expression of incompatible type 'void (_Ptr<client_t>, _Ptr<source_t>, admin_format_t)' (aka 'void (_Ptr<struct _client_tag>, _Ptr<struct source_tag>, admin_format_t)'): type mismatch at 2nd parameter ('source_t *' (aka 'struct source_tag *') vs '_Ptr<source_t>' (aka '_Ptr<struct source_tag>'))
    { KILLSOURCE_HTML_REQUEST,              ADMINTYPE_MOUNT,        ADMIN_FORMAT_HTML,          command_kill_source, NULL},
                                                                                                ^~~~~~~~~~~~~~~~~~~
admin.c:141:97: error: initializing '_Ptr<void (_Ptr<client_t>, source_t *, admin_format_t)> const' (aka '_Ptr<void (_Ptr<struct _client_tag>, struct source_tag *, admin_format_t)> const') with an expression of incompatible type 'void (_Ptr<client_t>, _Ptr<source_t>, admin_format_t)' (aka 'void (_Ptr<struct _client_tag>, _Ptr<struct source_tag>, admin_format_t)'): type mismatch at 2nd parameter ('source_t *' (aka 'struct source_tag *') vs '_Ptr<source_t>' (aka '_Ptr<struct source_tag>'))
    { MANAGEAUTH_RAW_REQUEST,               ADMINTYPE_GENERAL,      ADMIN_FORMAT_RAW,           command_manageauth, NULL},
                                                                                                ^~~~~~~~~~~~~~~~~~
admin.c:142:97: error: initializing '_Ptr<void (_Ptr<client_t>, source_t *, admin_format_t)> const' (aka '_Ptr<void (_Ptr<struct _client_tag>, struct source_tag *, admin_format_t)> const') with an expression of incompatible type 'void (_Ptr<client_t>, _Ptr<source_t>, admin_format_t)' (aka 'void (_Ptr<struct _client_tag>, _Ptr<struct source_tag>, admin_format_t)'): type mismatch at 2nd parameter ('source_t *' (aka 'struct source_tag *') vs '_Ptr<source_t>' (aka '_Ptr<struct source_tag>'))
    { MANAGEAUTH_HTML_REQUEST,              ADMINTYPE_GENERAL,      ADMIN_FORMAT_HTML,          command_manageauth, NULL},
                                                                                                ^~~~~~~~~~~~~~~~~~
admin.c:143:97: error: initializing '_Ptr<void (_Ptr<client_t>, source_t *, admin_format_t)> const' (aka '_Ptr<void (_Ptr<struct _client_tag>, struct source_tag *, admin_format_t)> const') with an expression of incompatible type 'void (_Ptr<client_t>, _Ptr<source_t>, admin_format_t)' (aka 'void (_Ptr<struct _client_tag>, _Ptr<struct source_tag>, admin_format_t)'): type mismatch at 2nd parameter ('source_t *' (aka 'struct source_tag *') vs '_Ptr<source_t>' (aka '_Ptr<struct source_tag>'))
    { UPDATEMETADATA_RAW_REQUEST,           ADMINTYPE_MOUNT,        ADMIN_FORMAT_RAW,           command_updatemetadata, NULL},
                                                                                                ^~~~~~~~~~~~~~~~~~~~~~
admin.c:144:97: error: initializing '_Ptr<void (_Ptr<client_t>, source_t *, admin_format_t)> const' (aka '_Ptr<void (_Ptr<struct _client_tag>, struct source_tag *, admin_format_t)> const') with an expression of incompatible type 'void (_Ptr<client_t>, _Ptr<source_t>, admin_format_t)' (aka 'void (_Ptr<struct _client_tag>, _Ptr<struct source_tag>, admin_format_t)'): type mismatch at 2nd parameter ('source_t *' (aka 'struct source_tag *') vs '_Ptr<source_t>' (aka '_Ptr<struct source_tag>'))
    { UPDATEMETADATA_HTML_REQUEST,          ADMINTYPE_MOUNT,        ADMIN_FORMAT_HTML,          command_updatemetadata, NULL},
                                                                                                ^~~~~~~~~~~~~~~~~~~~~~
admin.c:145:97: error: initializing '_Ptr<void (_Ptr<client_t>, source_t *, admin_format_t)> const' (aka '_Ptr<void (_Ptr<struct _client_tag>, struct source_tag *, admin_format_t)> const') with an expression of incompatible type 'void (_Ptr<client_t>, _Ptr<source_t>, admin_format_t)' (aka 'void (_Ptr<struct _client_tag>, _Ptr<struct source_tag>, admin_format_t)'): type mismatch at 2nd parameter ('source_t *' (aka 'struct source_tag *') vs '_Ptr<source_t>' (aka '_Ptr<struct source_tag>'))
    { BUILDM3U_RAW_REQUEST,                 ADMINTYPE_MOUNT,        ADMIN_FORMAT_RAW,           command_buildm3u, NULL},
                                                                                                ^~~~~~~~~~~~~~~~
admin.c:184:9: error: assigning to '_Nt_array_ptr<const char>' from incompatible type 'char *'
    end = strchr(command, '/');
        ^ ~~~~~~~~~~~~~~~~~~~~
admin.c:218:35: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    if (!__is_command_table_valid(table))
                                  ^~~~~
admin.c:232:80: error: passing 'const char *' to parameter of incompatible type '_Nt_array_ptr<const char>'
    _Array_ptr<const admin_command_table_t> table =  admin_get_table_by_prefix(command);
                                                                               ^~~~~~~
admin.c:178:100: note: passing argument to parameter 'command' here
static _Array_ptr<const admin_command_table_t> admin_get_table_by_prefix(_Nt_array_ptr<const char> command)
                                                                                                   ^
admin.c:238:12: error: assigning to '_Nt_array_ptr<const char>' from incompatible type 'char *'
    suffix = strchr(command, '/');
           ^ ~~~~~~~~~~~~~~~~~~~~
admin.c:242:16: error: assigning to '_Nt_array_ptr<const char>' from incompatible type 'const char *'
        suffix = command;
               ^ ~~~~~~~
admin.c:245:21: error: expression has unknown bounds
    for (i = 0; i < table->length; i++)
                    ^~~~~
admin.c:246:33: error: expression has unknown bounds
        if (resourcematch_match(table->handlers[i].route, suffix, NULL) == RESOURCEMATCH_MATCH)
                                ^~~~~~~~~~~~~~~~~~
admin.c:246:33: error: expression has unknown bounds
        if (resourcematch_match(table->handlers[i].route, suffix, NULL) == RESOURCEMATCH_MATCH)
                                ^~~~~
admin.c:265:12: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    return &(table->handlers[index]);
           ^~~~~~~~~~~~~~~~~~~~~~~~~
admin.c:464:32: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'void *'
        fullpath_xslt_template = malloc(fullpath_xslt_template_len);
                               ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
admin.c:443:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_ERROR("Client buffer reallocation failed. Dropping client.");
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
admin.c:429:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_DEBUG("Client buffer reallocation succeeded.");
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
admin.c:465:18: warning: cannot prove argument meets declared bounds for 1st parameter [-Wcheck-bounds-decls-unchecked-scope]
        snprintf(fullpath_xslt_template, fullpath_xslt_template_len, "%s%s%s",
                 ^~~~~~~~~~~~~~~~~~~~~~
admin.c:465:18: note: (expanded) expected argument bounds are 'bounds((char *)fullpath_xslt_template, (char *)fullpath_xslt_template + fullpath_xslt_template_len == 0 ? 0 : fullpath_xslt_template_len - 1)'
admin.c:465:18: note: (expanded) inferred bounds are 'bounds(fullpath_xslt_template, fullpath_xslt_template + 0)'
        snprintf(fullpath_xslt_template, fullpath_xslt_template_len, "%s%s%s",
                 ^~~~~~~~~~~~~~~~~~~~~~
admin.c:469:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_DEBUG("Sending XSLT (%s)", fullpath_xslt_template);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
admin.c:470:29: error: argument does not meet declared bounds for 2nd parameter
        xslt_transform(doc, fullpath_xslt_template, client, 200, NULL);
                            ^~~~~~~~~~~~~~~~~~~~~~
admin.c:470:29: note: source bounds are an empty range
admin.c:470:29: note: destination upper bound is above source upper bound
admin.c:470:29: note: (expanded) expected argument bounds are 'bounds((_Array_ptr<const char>)fullpath_xslt_template, (_Array_ptr<const char>)fullpath_xslt_template + 1)'
admin.c:470:29: note: (expanded) inferred bounds are 'bounds(fullpath_xslt_template, fullpath_xslt_template + 0)'
        xslt_transform(doc, fullpath_xslt_template, client, 200, NULL);
                            ^~~~~~~~~~~~~~~~~~~~~~
admin.c:437:21: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                    ICECAST_LOG_ERROR("Dropping client as we can not build response headers.");
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
admin.c:420:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_ERROR("Dropping client as we can not build response headers.");
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
admin.c:498:32: warning: comparison of distinct pointer types ('_Ptr<void (_Ptr<client_t>, source_t *, admin_format_t)>' (aka '_Ptr<void (_Ptr<struct _client_tag>, struct source_tag *, admin_format_t)>') and 'void (*)(_Ptr<client_t>, _Ptr<source_t>, admin_format_t)' (aka 'void (*)(_Ptr<struct _client_tag>, _Ptr<struct source_tag>, admin_format_t)')) [-Wcompare-distinct-pointer-types]
        if ((handler->function == command_metadata && handler->format == ADMIN_FORMAT_RAW) &&
             ~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~
admin.c:510:5: error: assigning to '_Nt_array_ptr<const char>' from incompatible type 'const char *'
    COMMAND_OPTIONAL(client, "mount", mount);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
admin.c:63:7: note: expanded from macro 'COMMAND_OPTIONAL'
(var) = httpp_get_param((client)->parser, (name))
      ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
admin.c:556:43: error: initializing '_Nt_array_ptr<const char>' with an expression of incompatible type 'char *'
                _Nt_array_ptr<const char> suffix =  strchr(uri, '/');
                                          ^         ~~~~~~~~~~~~~~~~
admin.c:482:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_DEBUG("Got admin request '%s'", uri);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
admin.c:504:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_DEBUG("Client needs to authenticate.");
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
admin.c:501:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_DEBUG("Granted right to call COMMAND_RAW_METADATA_UPDATE to "
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
admin.c:534:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_INFO("Received admin command %H on mount '%s'",
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:50:33: note: expanded from macro 'ICECAST_LOG_INFO'
#define ICECAST_LOG_INFO(...)   ICECAST_LOG(ICECAST_LOGLEVEL_INFO,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
admin.c:576:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_ERROR("Wrong request type from client");
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
admin.c:529:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_INFO("Received admin command \"%H\" on unavailable mount \"%H\"",
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:50:33: note: expanded from macro 'ICECAST_LOG_INFO'
#define ICECAST_LOG_INFO(...)   ICECAST_LOG(ICECAST_LOGLEVEL_INFO,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
admin.c:522:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_WARN("Admin command \"%H\" on non-existent source \"%H\"",
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
admin.c:488:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("Error parsing command string or unrecognised command: %H",
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
admin.c:597:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("Dropping client as we can not build response headers.");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
admin.c:621:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_DEBUG("Doing optional check");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
admin.c:625:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_DEBUG("Done optional check (%d)", parameters_passed);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
admin.c:651:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_INFO("source is \"%s\", destination is \"%s\"", source->mount, dest->mount);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:50:33: note: expanded from macro 'ICECAST_LOG_INFO'
#define ICECAST_LOG_INFO(...)   ICECAST_LOG(ICECAST_LOGLEVEL_INFO,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
admin.c:770:5: error: cast source bounds are too narrow for '_Ptr<const char>'
    COMMAND_REQUIRE(client, "username", username);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
admin.c:55:17: note: expanded from macro 'COMMAND_REQUIRE'
        (var) = httpp_get_param((client)->parser, (name));        \
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
admin.c:770:5: note: source bounds are an empty range
admin.c:55:17: note: expanded from macro 'COMMAND_REQUIRE'
        (var) = httpp_get_param((client)->parser, (name));        \
                ^
admin.c:770:5: note: target upper bound is above source upper bound
admin.c:55:17: note: expanded from macro 'COMMAND_REQUIRE'
        (var) = httpp_get_param((client)->parser, (name));        \
                ^
admin.c:770:5: note: (expanded) required bounds are 'bounds((_Array_ptr<const char>)httpp_get_param((client)->parser, ("username")), (_Array_ptr<const char>)httpp_get_param((client)->parser, ("username")) + 1)'
admin.c:55:17: note: expanded from macro 'COMMAND_REQUIRE'
        (var) = httpp_get_param((client)->parser, (name));        \
                ^
admin.c:770:5: note: (expanded) inferred bounds are 'bounds(value of httpp_get_param((client)->parser, ("username")), value of httpp_get_param((client)->parser, ("username")) + 0)'
admin.c:55:17: note: expanded from macro 'COMMAND_REQUIRE'
        (var) = httpp_get_param((client)->parser, (name));        \
                ^
admin.c:771:5: error: cast source bounds are too narrow for '_Ptr<const char>'
    COMMAND_REQUIRE(client, "password", password);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
admin.c:55:17: note: expanded from macro 'COMMAND_REQUIRE'
        (var) = httpp_get_param((client)->parser, (name));        \
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
admin.c:771:5: note: source bounds are an empty range
admin.c:55:17: note: expanded from macro 'COMMAND_REQUIRE'
        (var) = httpp_get_param((client)->parser, (name));        \
                ^
admin.c:771:5: note: target upper bound is above source upper bound
admin.c:55:17: note: expanded from macro 'COMMAND_REQUIRE'
        (var) = httpp_get_param((client)->parser, (name));        \
                ^
admin.c:771:5: note: (expanded) required bounds are 'bounds((_Array_ptr<const char>)httpp_get_param((client)->parser, ("password")), (_Array_ptr<const char>)httpp_get_param((client)->parser, ("password")) + 1)'
admin.c:55:17: note: expanded from macro 'COMMAND_REQUIRE'
        (var) = httpp_get_param((client)->parser, (name));        \
                ^
admin.c:771:5: note: (expanded) inferred bounds are 'bounds(value of httpp_get_param((client)->parser, ("password")), value of httpp_get_param((client)->parser, ("password")) + 0)'
admin.c:55:17: note: expanded from macro 'COMMAND_REQUIRE'
        (var) = httpp_get_param((client)->parser, (name));        \
                ^
admin.c:780:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("Dropping client as we can not build response headers.");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
admin.c:831:9: error: assigning to '_Nt_array_ptr<const char>' from incompatible type 'const char *'
        COMMAND_REQUIRE(client, "id", idstring);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
admin.c:55:15: note: expanded from macro 'COMMAND_REQUIRE'
        (var) = httpp_get_param((client)->parser, (name));        \
              ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
admin.c:855:9: error: assigning to '_Nt_array_ptr<const char>' from incompatible type 'const char *'
        COMMAND_OPTIONAL(client, "action", action);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
admin.c:63:7: note: expanded from macro 'COMMAND_OPTIONAL'
(var) = httpp_get_param((client)->parser, (name))
      ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
admin.c:856:9: error: assigning to '_Nt_array_ptr<const char>' from incompatible type 'const char *'
        COMMAND_OPTIONAL(client, "username", username);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
admin.c:63:7: note: expanded from macro 'COMMAND_OPTIONAL'
(var) = httpp_get_param((client)->parser, (name))
      ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
admin.c:875:33: error: passing '_Ptr<auth_t>' (aka '_Ptr<struct auth_tag>') to parameter of incompatible type 'auth_t *' (aka 'struct auth_tag *')
            ret = auth->adduser(auth, username, password);
                                ^~~~
admin.c:895:36: error: passing '_Ptr<auth_t>' (aka '_Ptr<struct auth_tag>') to parameter of incompatible type 'auth_t *' (aka 'struct auth_tag *')
            ret = auth->deleteuser(auth, username);
                                   ^~~~
admin.c:917:28: error: passing '_Ptr<auth_t>' (aka '_Ptr<struct auth_tag>') to parameter of incompatible type 'auth_t *' (aka 'struct auth_tag *')
            auth->listuser(auth, usersnode);
                           ^~~~
admin.c:863:13: error: cast source bounds are too narrow for '_Ptr<const char>'
            COMMAND_OPTIONAL(client, "password", password);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
admin.c:63:9: note: expanded from macro 'COMMAND_OPTIONAL'
(var) = httpp_get_param((client)->parser, (name))
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
admin.c:863:13: note: source bounds are an empty range
admin.c:63:9: note: expanded from macro 'COMMAND_OPTIONAL'
(var) = httpp_get_param((client)->parser, (name))
        ^
admin.c:863:13: note: target upper bound is above source upper bound
admin.c:63:9: note: expanded from macro 'COMMAND_OPTIONAL'
(var) = httpp_get_param((client)->parser, (name))
        ^
admin.c:863:13: note: (expanded) required bounds are 'bounds((_Array_ptr<const char>)httpp_get_param((client)->parser, ("password")), (_Array_ptr<const char>)httpp_get_param((client)->parser, ("password")) + 1)'
admin.c:63:9: note: expanded from macro 'COMMAND_OPTIONAL'
(var) = httpp_get_param((client)->parser, (name))
        ^
admin.c:863:13: note: (expanded) inferred bounds are 'bounds(value of httpp_get_param((client)->parser, ("password")), value of httpp_get_param((client)->parser, ("password")) + 0)'
admin.c:63:9: note: expanded from macro 'COMMAND_OPTIONAL'
(var) = httpp_get_param((client)->parser, (name))
        ^
admin.c:886:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_WARN("manage auth request delete for %lu but no username", id);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
admin.c:866:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_WARN("manage auth request add for %lu but no user/pass", id);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
admin.c:850:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_WARN("Client requested mangement for unknown role %lu", id);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
admin.c:962:5: error: assigning to '_Nt_array_ptr<const char>' from incompatible type 'const char *'
    COMMAND_REQUIRE(client, "id", idtext);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
admin.c:55:15: note: expanded from macro 'COMMAND_REQUIRE'
        (var) = httpp_get_param((client)->parser, (name));        \
              ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
admin.c:971:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_DEBUG("Response is %d", response);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
admin.c:974:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_INFO("Admin request: client %d removed", id);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:50:33: note: expanded from macro 'ICECAST_LOG_INFO'
#define ICECAST_LOG_INFO(...)   ICECAST_LOG(ICECAST_LOGLEVEL_INFO,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
admin.c:1003:5: error: assigning to '_Nt_array_ptr<const char>' from incompatible type 'const char *'
    COMMAND_REQUIRE(client, "fallback", fallback);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
admin.c:55:15: note: expanded from macro 'COMMAND_REQUIRE'
        (var) = httpp_get_param((client)->parser, (name));        \
              ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
admin.c:1001:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_DEBUG("Got fallback request");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
admin.c:1036:5: error: assigning to '_Nt_array_ptr<const char>' from incompatible type 'const char *'
    COMMAND_REQUIRE(client, "mode", action);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
admin.c:55:15: note: expanded from macro 'COMMAND_REQUIRE'
        (var) = httpp_get_param((client)->parser, (name));        \
              ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
admin.c:1037:5: error: assigning to '_Nt_array_ptr<const char>' from incompatible type 'const char *'
    COMMAND_OPTIONAL(client, "song", song);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
admin.c:63:7: note: expanded from macro 'COMMAND_OPTIONAL'
(var) = httpp_get_param((client)->parser, (name))
      ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
admin.c:1038:5: error: assigning to '_Nt_array_ptr<const char>' from incompatible type 'const char *'
    COMMAND_OPTIONAL(client, "title", title);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
admin.c:63:7: note: expanded from macro 'COMMAND_OPTIONAL'
(var) = httpp_get_param((client)->parser, (name))
      ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
admin.c:1039:5: error: assigning to '_Nt_array_ptr<const char>' from incompatible type 'const char *'
    COMMAND_OPTIONAL(client, "artist", artist);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
admin.c:63:7: note: expanded from macro 'COMMAND_OPTIONAL'
(var) = httpp_get_param((client)->parser, (name))
      ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
admin.c:1029:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_DEBUG("Got metadata update request");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
admin.c:1032:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("Got legacy SOURCE-style metadata update command on "
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
admin.c:1040:5: error: cast source bounds are too narrow for '_Ptr<const char>'
    COMMAND_OPTIONAL(client, "charset", charset);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
admin.c:63:9: note: expanded from macro 'COMMAND_OPTIONAL'
(var) = httpp_get_param((client)->parser, (name))
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
admin.c:1040:5: note: source bounds are an empty range
admin.c:63:9: note: expanded from macro 'COMMAND_OPTIONAL'
(var) = httpp_get_param((client)->parser, (name))
        ^
admin.c:1040:5: note: target upper bound is above source upper bound
admin.c:63:9: note: expanded from macro 'COMMAND_OPTIONAL'
(var) = httpp_get_param((client)->parser, (name))
        ^
admin.c:1040:5: note: (expanded) required bounds are 'bounds((_Array_ptr<const char>)httpp_get_param((client)->parser, ("charset")), (_Array_ptr<const char>)httpp_get_param((client)->parser, ("charset")) + 1)'
admin.c:63:9: note: expanded from macro 'COMMAND_OPTIONAL'
(var) = httpp_get_param((client)->parser, (name))
        ^
admin.c:1040:5: note: (expanded) inferred bounds are 'bounds(value of httpp_get_param((client)->parser, ("charset")), value of httpp_get_param((client)->parser, ("charset")) + 0)'
admin.c:63:9: note: expanded from macro 'COMMAND_OPTIONAL'
(var) = httpp_get_param((client)->parser, (name))
        ^
admin.c:1070:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("Got legacy shoutcast-style metadata update command "
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
admin.c:1063:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_INFO("Metadata on mountpoint %s changed to \"%s - %s\"",
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:50:33: note: expanded from macro 'ICECAST_LOG_INFO'
#define ICECAST_LOG_INFO(...)   ICECAST_LOG(ICECAST_LOGLEVEL_INFO,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
admin.c:1058:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_INFO("Metadata on mountpoint %s changed to \"%s\"", source->mount, song);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:50:33: note: expanded from macro 'ICECAST_LOG_INFO'
#define ICECAST_LOG_INFO(...)   ICECAST_LOG(ICECAST_LOGLEVEL_INFO,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
admin.c:1108:5: error: assigning to '_Nt_array_ptr<const char>' from incompatible type 'const char *'
    COMMAND_REQUIRE(client, "mode", action);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
admin.c:55:15: note: expanded from macro 'COMMAND_REQUIRE'
        (var) = httpp_get_param((client)->parser, (name));        \
              ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
admin.c:1109:5: error: assigning to '_Nt_array_ptr<const char>' from incompatible type 'const char *'
    COMMAND_REQUIRE(client, "song", value);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
admin.c:55:15: note: expanded from macro 'COMMAND_REQUIRE'
        (var) = httpp_get_param((client)->parser, (name));        \
              ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
admin.c:1094:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_DEBUG("Got shoutcast metadata update request");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
admin.c:1104:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("Got legacy shoutcast-style metadata update command "
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
admin.c:1127:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("Got legacy shoutcast-style metadata update command "
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
admin.c:1123:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_DEBUG("Metadata on mountpoint %s changed to \"%s\"",
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
admin.c:1097:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("illegal change of metadata on non-shoutcast "
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
admin.c:1139:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_DEBUG("Stats request, sending xml stats");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
admin.c:1169:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_DEBUG("List mounts request");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
admin.c:1179:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_ERROR("Dropping client as we can not build response headers.");
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
3 warnings and 102 errors generated.
make[3]: [icecast-admin.o] Error 1 (ignored)
resourcematch.c:22:12: error: expression has unknown bounds
    while (*pattern) {
           ^~~~~~~~
resourcematch.c:23:16: error: expression has unknown bounds
        for (; *pattern && *pattern != '%'; pattern++);
               ^~~~~~~~
resourcematch.c:23:28: error: expression has unknown bounds
        for (; *pattern && *pattern != '%'; pattern++);
                           ^~~~~~~~
resourcematch.c:25:14: error: expression has unknown bounds
        if (!*pattern) {
             ^~~~~~~~
resourcematch.c:31:14: error: expression has unknown bounds
        if (!*pattern)
             ^~~~~~~~
resourcematch.c:34:13: error: expression has unknown bounds
        if (*pattern != '%')
            ^~~~~~~~
resourcematch.c:63:12: error: expression has unknown bounds
    for (; *p && *p != '%' && *p == *s; p++, s++);
           ^~
resourcematch.c:63:18: error: expression has unknown bounds
    for (; *p && *p != '%' && *p == *s; p++, s++);
                 ^~
resourcematch.c:63:31: error: expression has unknown bounds
    for (; *p && *p != '%' && *p == *s; p++, s++);
                              ^~
resourcematch.c:63:37: error: expression has unknown bounds
    for (; *p && *p != '%' && *p == *s; p++, s++);
                                    ^~
resourcematch.c:74:5: error: expression has unknown bounds
    extract->group[idx].type = type;
    ^~~~~~~~~~~~~~~~~~~
resourcematch.c:75:5: error: expression has unknown bounds
    extract->group[idx].raw = NULL;
    ^~~~~~~~~~~~~~~~~~~
resourcematch.c:84:29: error: cannot take address of variable 'endptr' with bounds
    ret = strtoll(*string, &endptr, base);
                            ^~~~~~
note: bounds declared here
resourcematch.c:91:9: error: expression has unknown bounds
        extract->group[idx].result.lli = ret;
        ^~~~~~~~~~~~~~~~~~~
resourcematch.c:163:13: error: passing '_Array_ptr<const char> *' to parameter of incompatible type '_Ptr<_Nt_array_ptr<const char>>'
            _test_int('i', 0);
            ^~~~~~~~~~~~~~~~~
resourcematch.c:153:33: note: expanded from macro '_test_int'
                ret = match_lli(&string, matches, idx, (base)); \
                                ^~~~~~~
resourcematch.c:78:73: note: passing argument to parameter 'string' here
static resourcematch_result_t match_lli(_Ptr<_Nt_array_ptr<const char>> string, _Ptr<resourcematch_extract_t> extract, size_t idx, int base)
                                                                        ^
resourcematch.c:164:13: error: passing '_Array_ptr<const char> *' to parameter of incompatible type '_Ptr<_Nt_array_ptr<const char>>'
            _test_int('d', 10);
            ^~~~~~~~~~~~~~~~~~
resourcematch.c:153:33: note: expanded from macro '_test_int'
                ret = match_lli(&string, matches, idx, (base)); \
                                ^~~~~~~
resourcematch.c:78:73: note: passing argument to parameter 'string' here
static resourcematch_result_t match_lli(_Ptr<_Nt_array_ptr<const char>> string, _Ptr<resourcematch_extract_t> extract, size_t idx, int base)
                                                                        ^
resourcematch.c:165:13: error: passing '_Array_ptr<const char> *' to parameter of incompatible type '_Ptr<_Nt_array_ptr<const char>>'
            _test_int('x', 16);
            ^~~~~~~~~~~~~~~~~~
resourcematch.c:153:33: note: expanded from macro '_test_int'
                ret = match_lli(&string, matches, idx, (base)); \
                                ^~~~~~~
resourcematch.c:78:73: note: passing argument to parameter 'string' here
static resourcematch_result_t match_lli(_Ptr<_Nt_array_ptr<const char>> string, _Ptr<resourcematch_extract_t> extract, size_t idx, int base)
                                                                        ^
resourcematch.c:166:13: error: passing '_Array_ptr<const char> *' to parameter of incompatible type '_Ptr<_Nt_array_ptr<const char>>'
            _test_int('o', 8);
            ^~~~~~~~~~~~~~~~~
resourcematch.c:153:33: note: expanded from macro '_test_int'
                ret = match_lli(&string, matches, idx, (base)); \
                                ^~~~~~~
resourcematch.c:78:73: note: passing argument to parameter 'string' here
static resourcematch_result_t match_lli(_Ptr<_Nt_array_ptr<const char>> string, _Ptr<resourcematch_extract_t> extract, size_t idx, int base)
                                                                        ^
resourcematch.c:117:14: error: expression has unknown bounds
        if (!*pattern && !*string) {
             ^~~~~~~~
resourcematch.c:117:27: error: expression has unknown bounds
        if (!*pattern && !*string) {
                          ^~~~~~~
resourcematch.c:122:21: error: expression has unknown bounds
        } else if (!*pattern || !*string) {
                    ^~~~~~~~
resourcematch.c:122:34: error: expression has unknown bounds
        } else if (!*pattern || !*string) {
                                 ^~~~~~~
resourcematch.c:129:13: error: expression has unknown bounds
        if (*pattern != '%') {
            ^~~~~~~~
resourcematch.c:138:17: error: expression has unknown bounds
        switch (*pattern) {
                ^~~~~~~~
resourcematch.c:140:21: error: expression has unknown bounds
                if (*string == '%') {
                    ^~~~~~~
resourcematch.c:163:13: error: expression has unknown bounds
            _test_int('i', 0);
            ^~~~~~~~~~~~~~~~~
resourcematch.c:151:43: note: expanded from macro '_test_int'
                setup_group(matches, idx, *pattern); \
                                          ^~~~~~~~
resourcematch.c:164:13: error: expression has unknown bounds
            _test_int('d', 10);
            ^~~~~~~~~~~~~~~~~~
resourcematch.c:151:43: note: expanded from macro '_test_int'
                setup_group(matches, idx, *pattern); \
                                          ^~~~~~~~
resourcematch.c:165:13: error: expression has unknown bounds
            _test_int('x', 16);
            ^~~~~~~~~~~~~~~~~~
resourcematch.c:151:43: note: expanded from macro '_test_int'
                setup_group(matches, idx, *pattern); \
                                          ^~~~~~~~
resourcematch.c:166:13: error: expression has unknown bounds
            _test_int('o', 8);
            ^~~~~~~~~~~~~~~~~
resourcematch.c:151:43: note: expanded from macro '_test_int'
                setup_group(matches, idx, *pattern); \
                                          ^~~~~~~~
resourcematch.c:191:10: error: argument has unknown bounds, bounds expected because the 1st parameter has bounds
    free(extract->group);
         ^~~~~~~~~~~~~~
resourcematch.c:188:14: error: expression has unknown bounds
        free(extract->group[i].raw);
             ^~~~~~~~~~~~~~~~~
31 errors generated.
make[3]: [icecast-resourcematch.o] Error 1 (ignored)
md5.c:47:48: error: type must be a checked type
static void MD5Transform(uint32_t *buf : itype(uint32_t [4]) , const uint32_t *in : itype(const uint32_t [16]) );
                                               ^
md5.c:47:97: error: type must be a checked type
static void MD5Transform(uint32_t *buf : itype(uint32_t [4]) , const uint32_t *in : itype(const uint32_t [16]) );
                                                                                                ^
md5.c:111:24: warning: cannot prove argument meets declared bounds for 1st parameter [-Wcheck-bounds-decls-unchecked-scope]
                memcpy(p, buf, t);
                       ^
md5.c:111:24: note: (expanded) expected argument bounds are 'bounds((_Array_ptr<char>)p, (_Array_ptr<char>)p + (size_t)t)'
md5.c:111:24: note: (expanded) inferred bounds are 'bounds((_Array_ptr<unsigned char>)p, (_Array_ptr<unsigned char>)p + 1)'
                memcpy(p, buf, t);
                       ^
md5.c:107:32: warning: cannot prove argument meets declared bounds for 1st parameter [-Wcheck-bounds-decls-unchecked-scope]
                        memcpy(p, buf, len);
                               ^
md5.c:107:32: note: (expanded) expected argument bounds are 'bounds((_Array_ptr<char>)p, (_Array_ptr<char>)p + (size_t)len)'
md5.c:107:32: note: (expanded) inferred bounds are 'bounds((_Array_ptr<unsigned char>)p, (_Array_ptr<unsigned char>)p + 1)'
                        memcpy(p, buf, len);
                               ^
md5.c:176:12: error: argument does not meet declared bounds for 1st parameter
    memcpy(digest, ctx->buf, HASH_LEN);
           ^~~~~~
md5.c:176:12: note: destination bounds are wider than the source bounds
md5.c:176:12: note: destination upper bound is above source upper bound
md5.c:176:12: note: (expanded) expected argument bounds are 'bounds((_Array_ptr<char>)digest, (_Array_ptr<char>)digest + (size_t)16)'
md5.c:176:12: note: (expanded) inferred bounds are 'bounds((_Array_ptr<unsigned char>)digest, (_Array_ptr<unsigned char>)digest + 1)'
    memcpy(digest, ctx->buf, HASH_LEN);
           ^~~~~~
md5.c:197:48: error: type must be a checked type
static void MD5Transform(uint32_t *buf : itype(uint32_t [4]) , const uint32_t *in : itype(const uint32_t [16]) )
                                               ^
md5.c:197:97: error: type must be a checked type
static void MD5Transform(uint32_t *buf : itype(uint32_t [4]) , const uint32_t *in : itype(const uint32_t [16]) )
                                                                                                ^
2 warnings and 5 errors generated.
make[3]: [icecast-md5.o] Error 1 (ignored)
matchfile.c:56:25: error: automatic variable 'line' with bounds must have initializer
    _Nt_array_ptr<char> line;
                        ^
matchfile.c:75:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_WARN("Failed to open file \"%s\": %s", file->filename, strerror(errno));
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
matchfile.c:64:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_WARN("failed to check status of \"%s\": %s", file->filename, strerror(errno));
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
matchfile.c:182:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_DEBUG("%s is not allowed", key);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
matchfile.c:178:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_DEBUG("%s is allowed", key);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
matchfile.c:173:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_DEBUG("%s is banned", key);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
6 errors generated.
make[3]: [icecast-matchfile.o] Error 1 (ignored)
tls.c:118:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_WARN("Invalid cipher list: %s", cipher_list);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
tls.c:120:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_INFO("Certificate found at %s", cert_file);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:50:33: note: expanded from macro 'ICECAST_LOG_INFO'
#define ICECAST_LOG_INFO(...)   ICECAST_LOG(ICECAST_LOGLEVEL_INFO,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
tls.c:121:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_INFO("Using ciphers %s", cipher_list);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:50:33: note: expanded from macro 'ICECAST_LOG_INFO'
#define ICECAST_LOG_INFO(...)   ICECAST_LOG(ICECAST_LOGLEVEL_INFO,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
tls.c:114:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_ERROR("Invalid %s - Private key does not match cert public key", key_file);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
tls.c:110:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_WARN("Invalid private key file %s", key_file);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
tls.c:106:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_WARN("Invalid cert file %s", cert_file);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
tls.c:125:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_INFO("Can not setup TLS.");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:50:33: note: expanded from macro 'ICECAST_LOG_INFO'
#define ICECAST_LOG_INFO(...)   ICECAST_LOG(ICECAST_LOGLEVEL_INFO,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
7 errors generated.
make[3]: [icecast-tls.o] Error 1 (ignored)
In file included from refobject.c:18:
./refobject.h:155:67: warning: declaration of 'struct __va_list_tag' will not be visible outside of this function [-Wvisibility]
    _Ptr<int (refobject_t , _Ptr<const refobject_type_t> , struct __va_list_tag* )> type_newcb;
                                                                  ^
refobject.c:29:9: error: initializing '_Ptr<int (refobject_t, _Ptr<const refobject_type_t>, struct __va_list_tag *)>' (aka '_Ptr<int (refobject_t, _Ptr<const struct refobject_type_tag>, struct __va_list_tag *)>') with an expression of incompatible type 'int (refobject_t, const refobject_type_t *, struct __va_list_tag *)' (aka 'int (refobject_t, const struct refobject_type_tag *, struct __va_list_tag *)'): type mismatch at 2nd parameter ('_Ptr<const refobject_type_t>' (aka '_Ptr<const struct refobject_type_tag>') vs 'const refobject_type_t *' (aka 'const struct refobject_type_tag *'))
        REFOBJECT_DEFINE_TYPE_NEW_NOOP()
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./refobject.h:107:89: note: expanded from macro 'REFOBJECT_DEFINE_TYPE'
#define REFOBJECT_DEFINE_TYPE(type, ...)            REFOBJECT_DEFINE_TYPE__RAW(type, ## __VA_ARGS__); const refobject_type_t * refobject_type__ ## type = &refobject_typedef__ ## type
                                                                                        ^~~~~~~~~~~
./refobject.h:105:10: note: expanded from macro 'REFOBJECT_DEFINE_TYPE__RAW'
    , ## __VA_ARGS__ \
         ^~~~~~~~~~~
./refobject.h:111:67: note: expanded from macro 'REFOBJECT_DEFINE_TYPE_NEW_NOOP'
#define REFOBJECT_DEFINE_TYPE_NEW_NOOP()            .type_newcb = refobject_new__return_zero
                                                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~
refobject.c:56:19: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
        ret->name = strdup(name);
                  ^ ~~~~~~~~~~~~
refobject.c:92:39: warning: incompatible pointer types passing 'va_list' (aka '__builtin_va_list') to parameter of type 'struct __va_list_tag *' [-Wincompatible-pointer-types]
    res = type->type_newcb(ret, type, ap);
                                      ^~
2 warnings and 2 errors generated.
make[3]: [icecast-refobject.o] Error 1 (ignored)
In file included from buffer.c:18:
In file included from ./buffer.h:25:
./refobject.h:155:67: warning: declaration of 'struct __va_list_tag' will not be visible outside of this function [-Wvisibility]
    _Ptr<int (refobject_t , _Ptr<const refobject_type_t> , struct __va_list_tag* )> type_newcb;
                                                                  ^
buffer.c:42:9: error: initializing '_Ptr<int (refobject_t, _Ptr<const refobject_type_t>, struct __va_list_tag *)>' (aka '_Ptr<int (refobject_t, _Ptr<const struct refobject_type_tag>, struct __va_list_tag *)>') with an expression of incompatible type 'int (refobject_t, const refobject_type_t *, struct __va_list_tag *)' (aka 'int (refobject_t, const struct refobject_type_tag *, struct __va_list_tag *)'): type mismatch at 2nd parameter ('_Ptr<const refobject_type_t>' (aka '_Ptr<const struct refobject_type_tag>') vs 'const refobject_type_t *' (aka 'const struct refobject_type_tag *'))
        REFOBJECT_DEFINE_TYPE_NEW_NOOP()
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./refobject.h:107:89: note: expanded from macro 'REFOBJECT_DEFINE_TYPE'
#define REFOBJECT_DEFINE_TYPE(type, ...)            REFOBJECT_DEFINE_TYPE__RAW(type, ## __VA_ARGS__); const refobject_type_t * refobject_type__ ## type = &refobject_typedef__ ## type
                                                                                        ^~~~~~~~~~~
./refobject.h:105:10: note: expanded from macro 'REFOBJECT_DEFINE_TYPE__RAW'
    , ## __VA_ARGS__ \
         ^~~~~~~~~~~
./refobject.h:111:67: note: expanded from macro 'REFOBJECT_DEFINE_TYPE_NEW_NOOP'
#define REFOBJECT_DEFINE_TYPE_NEW_NOOP()            .type_newcb = refobject_new__return_zero
                                                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~
buffer.c:60:12: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    return refobject_new(buffer_t);
           ^~~~~~~~~~~~~~~~~~~~~~~
./refobject.h:184:42: note: expanded from macro 'refobject_new'
#define         refobject_new(type, ...) REFOBJECT_TO_TYPE(refobject_new__simple((refobject_type__ ## type), NULL, NULL, REFOBJECT_NULL, ## __VA_ARGS__), type*)
                                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./refobject.h:54:33: note: expanded from macro 'REFOBJECT_TO_TYPE'
#define REFOBJECT_TO_TYPE(x,y)  ((y)(((refobject_t)(x)).refobject_base))
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
buffer.c:134:5: error: expression has unknown bounds
    ret[buffer->fill] = 0;
    ^~~~~~~~~~~~~~~~~
buffer.c:187:17: warning: cannot prove argument meets declared bounds for 2nd parameter [-Wcheck-bounds-decls-unchecked-scope]
    memcpy(buf, data, length);
                ^~~~
buffer.c:187:17: note: (expanded) expected argument bounds are 'bounds((_Array_ptr<char>)data, (_Array_ptr<char>)data + length)'
buffer.c:187:17: note: (expanded) inferred bounds are 'bounds((_Array_ptr<char>)data, (_Array_ptr<char>)data + 1)'
    memcpy(buf, data, length);
                ^~~~
buffer.c:199:37: error: cast source bounds are too narrow for '_Ptr<const void>'
    return buffer_push_data(buffer, string, strlen(string));
                                    ^~~~~~
buffer.c:199:37: note: source bounds are an empty range
buffer.c:199:37: note: target upper bound is above source upper bound
buffer.c:199:37: note: (expanded) required bounds are 'bounds((_Array_ptr<char>)string, (_Array_ptr<char>)string + 1)'
buffer.c:199:37: note: (expanded) inferred bounds are 'bounds(string, string + 0)'
buffer.c:215:39: error: passing '_Ptr<const char>' to parameter of incompatible type 'const char *'
    ret = buffer_push_vprintf(buffer, format, ap);
                                      ^~~~~~
./buffer.h:158:60: note: passing argument to parameter 'format' here
int buffer_push_vprintf(_Ptr<buffer_t> buffer, const char *format, va_list ap);
                                                           ^
buffer.c:271:5: error: 'data' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
    _Nt_array_ptr<const void> data = NULL;
    ^
2 warnings and 6 errors generated.
make[3]: [icecast-buffer.o] Error 1 (ignored)
In file included from module.c:19:
./refobject.h:155:67: warning: declaration of 'struct __va_list_tag' will not be visible outside of this function [-Wvisibility]
    _Ptr<int (refobject_t , _Ptr<const refobject_type_t> , struct __va_list_tag* )> type_newcb;
                                                                  ^
module.c:66:9: error: initializing '_Ptr<int (refobject_t, _Ptr<const refobject_type_t>, struct __va_list_tag *)>' (aka '_Ptr<int (refobject_t, _Ptr<const struct refobject_type_tag>, struct __va_list_tag *)>') with an expression of incompatible type 'int (refobject_t, _Ptr<const refobject_type_t>, struct __va_list_tag *)' (aka 'int (refobject_t, _Ptr<const struct refobject_type_tag>, struct __va_list_tag *)'): type mismatch at 3rd parameter ('struct __va_list_tag *' vs 'struct __va_list_tag *')
        REFOBJECT_DEFINE_TYPE_NEW(__module_container_new)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./refobject.h:107:89: note: expanded from macro 'REFOBJECT_DEFINE_TYPE'
#define REFOBJECT_DEFINE_TYPE(type, ...)            REFOBJECT_DEFINE_TYPE__RAW(type, ## __VA_ARGS__); const refobject_type_t * refobject_type__ ## type = &refobject_typedef__ ## type
                                                                                        ^~~~~~~~~~~
./refobject.h:105:10: note: expanded from macro 'REFOBJECT_DEFINE_TYPE__RAW'
    , ## __VA_ARGS__ \
         ^~~~~~~~~~~
./refobject.h:110:67: note: expanded from macro 'REFOBJECT_DEFINE_TYPE_NEW'
#define REFOBJECT_DEFINE_TYPE_NEW(cb)               .type_newcb = (cb)
                                                                  ^~~~
module.c:74:23: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    if (refobject_ref(module) != 0)
                      ^~~~~~
module.c:99:21: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    refobject_unref(module);
                    ^~~~~~
module.c:112:14: error: passing 'const char *' to parameter of incompatible type '_Nt_array_ptr<const char>'
    search = refobject_new__new(refobject_base_t, NULL, name, NULL);
             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./refobject.h:182:148: note: expanded from macro 'refobject_new__new'
#define         refobject_new__new(type, userdata, name, associated) REFOBJECT_TO_TYPE(refobject_new__real((refobject_type__ ## type), (userdata), (name), (associated)), type*)
                                                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./refobject.h:54:53: note: expanded from macro 'REFOBJECT_TO_TYPE'
#define REFOBJECT_TO_TYPE(x,y)  ((y)(((refobject_t)(x)).refobject_base))
                                                    ^
./refobject.h:183:145: note: passing argument to parameter 'name' here
refobject_t refobject_new__real(const refobject_type_t *type : itype(_Ptr<const refobject_type_t> ) , void* userdata, _Nt_array_ptr<const char> name, refobject_t associated);
                                                                                                                                                ^
module.c:121:19: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    refobject_ref(ret);
                  ^~~
module.c:144:68: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        xmlSetProp(node, XMLSTR("name"), XMLSTR(refobject_get_name(module)));
                                                                   ^~~~~~
./cfgfile.h:31:34: note: expanded from macro 'XMLSTR'
#define XMLSTR(str) ((xmlChar *)(str)) 
                                 ^~~
module.c:187:17: error: assigning to '_Ptr<int (module_t *, void **)>' (aka '_Ptr<int (struct module_tag *, void **)>') from incompatible type '_Ptr<int (_Ptr<module_t>, void **)>' (aka '_Ptr<int (_Ptr<struct module_tag>, void **)>'): type mismatch at 1st parameter ('module_t *' (aka 'struct module_tag *') vs '_Ptr<module_t>' (aka '_Ptr<struct module_tag>'))
    ret->freecb = freecb;
                ^ ~~~~~~
module.c:191:29: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            refobject_unref(ret);
                            ^~~
module.c:244:13: error: expression has unknown bounds
        if (self->client_handlers[i].name && strcmp(self->client_handlers[i].name, name) == 0) {
            ^~~~~~~~~~~~~~~~~~~~~~~~
module.c:244:53: warning: cannot prove argument meets declared bounds for 1st parameter [-Wcheck-bounds-decls-unchecked-scope]
        if (self->client_handlers[i].name && strcmp(self->client_handlers[i].name, name) == 0) {
                                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
module.c:244:53: note: (expanded) expected argument bounds are 'bounds((const char *)self->client_handlers[i].name, (const char *)self->client_handlers[i].name + 0)'
module.c:244:53: note: (expanded) inferred bounds are 'bounds(self->client_handlers[i].name, self->client_handlers[i].name + 0)'
        if (self->client_handlers[i].name && strcmp(self->client_handlers[i].name, name) == 0) {
                                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
module.c:244:53: error: expression has unknown bounds
        if (self->client_handlers[i].name && strcmp(self->client_handlers[i].name, name) == 0) {
                                                    ^~~~~~~~~~~~~~~~~~~~~~~~
module.c:246:20: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            return &(self->client_handlers[i]);
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~
2 warnings and 11 errors generated.
make[3]: [icecast-module.o] Error 1 (ignored)
In file included from reportxml.c:22:
In file included from ./reportxml.h:18:
./refobject.h:155:67: warning: declaration of 'struct __va_list_tag' will not be visible outside of this function [-Wvisibility]
    _Ptr<int (refobject_t , _Ptr<const refobject_type_t> , struct __va_list_tag* )> type_newcb;
                                                                  ^
reportxml.c:236:21: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    refobject_unref(report->root);
                    ^~~~~~~~~~~~
reportxml.c:254:9: error: initializing '_Ptr<int (refobject_t, _Ptr<const refobject_type_t>, struct __va_list_tag *)>' (aka '_Ptr<int (refobject_t, _Ptr<const struct refobject_type_tag>, struct __va_list_tag *)>') with an expression of incompatible type 'int (refobject_t, _Ptr<const refobject_type_t>, struct __va_list_tag *)' (aka 'int (refobject_t, _Ptr<const struct refobject_type_tag>, struct __va_list_tag *)'): type mismatch at 3rd parameter ('struct __va_list_tag *' vs 'struct __va_list_tag *')
        REFOBJECT_DEFINE_TYPE_NEW(__report_new)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./refobject.h:107:89: note: expanded from macro 'REFOBJECT_DEFINE_TYPE'
#define REFOBJECT_DEFINE_TYPE(type, ...)            REFOBJECT_DEFINE_TYPE__RAW(type, ## __VA_ARGS__); const refobject_type_t * refobject_type__ ## type = &refobject_typedef__ ## type
                                                                                        ^~~~~~~~~~~
./refobject.h:105:10: note: expanded from macro 'REFOBJECT_DEFINE_TYPE__RAW'
    , ## __VA_ARGS__ \
         ^~~~~~~~~~~
./refobject.h:110:67: note: expanded from macro 'REFOBJECT_DEFINE_TYPE_NEW'
#define REFOBJECT_DEFINE_TYPE_NEW(cb)               .type_newcb = (cb)
                                                                  ^~~~
reportxml.c:272:12: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    return refobject_new(reportxml_t);
           ^~~~~~~~~~~~~~~~~~~~~~~~~~
./refobject.h:184:42: note: expanded from macro 'refobject_new'
#define         refobject_new(type, ...) REFOBJECT_TO_TYPE(refobject_new__simple((refobject_type__ ## type), NULL, NULL, REFOBJECT_NULL, ## __VA_ARGS__), type*)
                                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./refobject.h:54:33: note: expanded from macro 'REFOBJECT_TO_TYPE'
#define REFOBJECT_TO_TYPE(x,y)  ((y)(((refobject_t)(x)).refobject_base))
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
reportxml.c:280:23: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    if (refobject_ref(report->root) != 0)
                      ^~~~~~~~~~~~
reportxml.c:326:25: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        refobject_unref(root);
                        ^~~~
reportxml.c:320:25: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        refobject_unref(root);
                        ^~~~
reportxml.c:364:25: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        refobject_unref(node->childs[i]);
                        ^~~~~~~~~~~~~~~
reportxml.c:410:33: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                refobject_unref(ret);
                                ^~~
reportxml.c:426:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    _set_attr(akindof)
    ^~~~~~~~~~~~~~~~~~
reportxml.c:419:29: note: expanded from macro '_set_attr'
            refobject_unref(ret); \
                            ^~~
reportxml.c:425:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    _set_attr(definition)
    ^~~~~~~~~~~~~~~~~~~~~
reportxml.c:419:29: note: expanded from macro '_set_attr'
            refobject_unref(ret); \
                            ^~~
reportxml.c:424:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    _set_attr(id)
    ^~~~~~~~~~~~~
reportxml.c:419:29: note: expanded from macro '_set_attr'
            refobject_unref(ret); \
                            ^~~
reportxml.c:399:25: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        refobject_unref(ret);
                        ^~~
reportxml.c:451:30: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        _Ptr<xmlAttr> cur =  xmlnode->properties;
                             ^~~~~~~~~~~~~~~~~~~
reportxml.c:467:25: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        } while ((cur = cur->next));
                        ^~~~~~~~~
reportxml.c:516:33: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                refobject_unref(child);
                                ^~~~~
reportxml.c:512:37: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                    refobject_unref(child);
                                    ^~~~~
reportxml.c:513:37: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                    refobject_unref(node);
                                    ^~~~
reportxml.c:507:37: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                    refobject_unref(node);
                                    ^~~~
reportxml.c:497:41: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                        refobject_unref(node);
                                        ^~~~
reportxml.c:492:41: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                        refobject_unref(node);
                                        ^~~~
reportxml.c:476:37: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                    refobject_unref(node);
                                    ^~~~
reportxml.c:461:33: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                refobject_unref(node);
                                ^~~~
reportxml.c:462:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_DEBUG("Can not parse XML node: attribute \"%H\" value \"%H\" is invalid on node of type <%s>", cur->name, value, nodedef->name);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
reportxml.c:456:33: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                refobject_unref(node);
                                ^~~~
reportxml.c:442:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("Can not parse XML node: Unknown name <%s>", xmlnode->name);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
reportxml.c:587:29: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            refobject_unref(ret);
                            ^~~
reportxml.c:566:29: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            refobject_unref(child);
                            ^~~~~
reportxml.c:579:29: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            refobject_unref(copy);
                            ^~~~
reportxml.c:574:33: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                refobject_unref(copy);
                                ^~~~
reportxml.c:575:33: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                refobject_unref(ret);
                                ^~~
reportxml.c:569:33: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                refobject_unref(ret);
                                ^~~
reportxml.c:562:29: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            refobject_unref(child);
                            ^~~~~
reportxml.c:558:33: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                refobject_unref(child);
                                ^~~~~
reportxml.c:559:33: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                refobject_unref(ret);
                                ^~~
reportxml.c:548:29: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            refobject_unref(ret);
                            ^~~
reportxml.c:641:25: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        refobject_unref(child);
                        ^~~~~
reportxml.c:704:24: warning: cannot prove argument meets declared bounds for 1st parameter [-Wcheck-bounds-decls-unchecked-scope]
            if (strcmp(nodeattr->values[i], value) == 0) {
                       ^~~~~~~~~~~~~~~~~~~
reportxml.c:704:24: note: (expanded) expected argument bounds are 'bounds((const char *)nodeattr->values[i], (const char *)nodeattr->values[i] + 0)'
reportxml.c:704:24: note: (expanded) inferred bounds are 'bounds(nodeattr->values[i], nodeattr->values[i] + 0)'
            if (strcmp(nodeattr->values[i], value) == 0) {
                       ^~~~~~~~~~~~~~~~~~~
reportxml.c:738:7: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
    n = strdup((char*)k);
      ^ ~~~~~~~~~~~~~~~~
reportxml.c:776:23: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    if (refobject_ref(child) != 0)
                      ^~~~~
reportxml.c:802:23: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    if (refobject_ref(node->childs[idx]) != 0)
                      ^~~~~~~~~~~~~~~~~
reportxml.c:1002:9: error: initializing '_Ptr<int (refobject_t, _Ptr<const refobject_type_t>, struct __va_list_tag *)>' (aka '_Ptr<int (refobject_t, _Ptr<const struct refobject_type_tag>, struct __va_list_tag *)>') with an expression of incompatible type 'int (refobject_t, _Ptr<const refobject_type_t>, struct __va_list_tag *)' (aka 'int (refobject_t, _Ptr<const struct refobject_type_tag>, struct __va_list_tag *)'): type mismatch at 3rd parameter ('struct __va_list_tag *' vs 'struct __va_list_tag *')
        REFOBJECT_DEFINE_TYPE_NEW(__database_new)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./refobject.h:107:89: note: expanded from macro 'REFOBJECT_DEFINE_TYPE'
#define REFOBJECT_DEFINE_TYPE(type, ...)            REFOBJECT_DEFINE_TYPE__RAW(type, ## __VA_ARGS__); const refobject_type_t * refobject_type__ ## type = &refobject_typedef__ ## type
                                                                                        ^~~~~~~~~~~
./refobject.h:105:10: note: expanded from macro 'REFOBJECT_DEFINE_TYPE__RAW'
    , ## __VA_ARGS__ \
         ^~~~~~~~~~~
./refobject.h:110:67: note: expanded from macro 'REFOBJECT_DEFINE_TYPE_NEW'
#define REFOBJECT_DEFINE_TYPE_NEW(cb)               .type_newcb = (cb)
                                                                  ^~~~
reportxml.c:1007:12: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    return refobject_new(reportxml_database_t);
           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./refobject.h:184:42: note: expanded from macro 'refobject_new'
#define         refobject_new(type, ...) REFOBJECT_TO_TYPE(refobject_new__simple((refobject_type__ ## type), NULL, NULL, REFOBJECT_NULL, ## __VA_ARGS__), type*)
                                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./refobject.h:54:33: note: expanded from macro 'REFOBJECT_TO_TYPE'
#define REFOBJECT_TO_TYPE(x,y)  ((y)(((refobject_t)(x)).refobject_base))
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
reportxml.c:1049:21: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    refobject_unref(root);
                    ^~~~
reportxml.c:1039:25: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        refobject_unref(node);
                        ^~~~
reportxml.c:1034:29: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            refobject_unref(node);
                            ^~~~
reportxml.c:1067:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_DEBUG("parent=%p, node=%p, depth=%zi, definition=\"%H\"", parent, node, depth, definition);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
reportxml.c:1069:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_DEBUG("parent=%p, node=%p, depth=%zi, Definition for \"%H\" at %p", parent, node, depth, definition, def);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
reportxml.c:1108:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_DEBUG("parent=%p, node=%p, depth=%zi, Found no definition.", parent, node, depth);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
reportxml.c:1118:25: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        refobject_unref(copy);
                        ^~~~
reportxml.c:1120:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_DEBUG("parent=%p, node=%p, depth=%zi <- %i", parent, node, depth, ret);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
reportxml.c:1112:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_DEBUG("parent=%p, node=%p, depth=%zi <- -1", parent, node, depth);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
reportxml.c:1078:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_DEBUG("parent=%p, node=%p, depth=%zi, Found definition.", parent, node, depth);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
reportxml.c:1101:25: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        refobject_unref(def);
                        ^~~
reportxml.c:1103:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_DEBUG("parent=%p, node=%p, depth=%zi <- 0", parent, node, depth);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
reportxml.c:1089:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_DEBUG("parent=%p, node=%p, depth=%zi, Itering, child #%zu (%p)", parent, node, depth, i, child);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
reportxml.c:1098:29: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            refobject_unref(child);
                            ^~~~~
reportxml.c:1092:33: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                refobject_unref(child);
                                ^~~~~
reportxml.c:1093:33: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                refobject_unref(def);
                                ^~~
reportxml.c:1094:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_DEBUG("parent=%p, node=%p, depth=%zi <- -1", parent, node, depth);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
reportxml.c:1081:29: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            refobject_unref(def);
                            ^~~
reportxml.c:1082:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_DEBUG("parent=%p, node=%p, depth=%zi <- -1", parent, node, depth);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
reportxml.c:1162:41: error: cast to union type from type 'reportxml_node_t *' (aka 'struct reportxml_node_tag *') not present in union
    if (avl_get_by_key(db->definitions, REFOBJECT_TO_TYPE(search, void *), (void**)&found) != 0) {
                                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./refobject.h:54:39: note: expanded from macro 'REFOBJECT_TO_TYPE'
#define REFOBJECT_TO_TYPE(x,y)  ((y)(((refobject_t)(x)).refobject_base))
                                      ^            ~~~
reportxml.c:1147:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_DEBUG("Looking up \"%H\" in database %p with depth %zu", id, db, depth);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
reportxml.c:1168:21: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    refobject_unref(search);
                    ^~~~~~
reportxml.c:1170:23: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    if (refobject_ref(found) != 0) {
                      ^~~~~
reportxml.c:1190:29: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            refobject_unref(tpl);
                            ^~~
reportxml.c:1235:21: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    refobject_unref(found);
                    ^~~~~
reportxml.c:1258:29: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            refobject_unref(node);
                            ^~~~
reportxml.c:1253:33: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                refobject_unref(node);
                                ^~~~
reportxml.c:1254:33: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                refobject_unref(ret);
                                ^~~
reportxml.c:1248:33: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                refobject_unref(ret);
                                ^~~
reportxml.c:1240:29: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            refobject_unref(ret);
                            ^~~
reportxml.c:1232:25: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        refobject_unref(node);
                        ^~~~
reportxml.c:1225:29: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            refobject_unref(node);
                            ^~~~
reportxml.c:1226:29: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            refobject_unref(found);
                            ^~~~~
reportxml.c:1227:29: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            refobject_unref(ret);
                            ^~~
reportxml.c:1228:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_ERROR("Can not attach child #%zu (%p) to attachment point (%p) in report. BAD.", i, node, ret);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
reportxml.c:1199:25: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        refobject_unref(found);
                        ^~~~~
reportxml.c:1178:25: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        refobject_unref(found);
                        ^~~~~
reportxml.c:1164:25: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        refobject_unref(search);
                        ^~~~~~
reportxml.c:1157:25: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        refobject_unref(search);
                        ^~~~~~
reportxml.c:1323:25: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        refobject_unref(child);
                        ^~~~~
reportxml.c:1332:29: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            refobject_unref(definition);
                            ^~~~~~~~~~
reportxml.c:1333:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_WARN("Unsupported type of first child.");
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
reportxml.c:1359:33: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                refobject_unref(attach_to);
                                ^~~~~~~~~
reportxml.c:1354:23: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        refobject_ref(attach_to = root);
                      ^~~~~~~~~~~~~~~~
reportxml.c:1367:21: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    refobject_unref(root);
                    ^~~~
reportxml.c:1401:21: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    refobject_unref(definition);
                    ^~~~~~~~~~
reportxml.c:1402:21: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    refobject_unref(attach_to);
                    ^~~~~~~~~
reportxml.c:1398:25: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        refobject_unref(child);
                        ^~~~~
reportxml.c:1391:29: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            refobject_unref(definition);
                            ^~~~~~~~~~
reportxml.c:1392:29: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            refobject_unref(attach_to);
                            ^~~~~~~~~
reportxml.c:1393:29: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            refobject_unref(ret);
                            ^~~
reportxml.c:1394:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_ERROR("Can not attach child #%zu (%p) to attachment point (%p) in report. BAD.", i, child, attach_to);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
reportxml.c:1370:25: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        refobject_unref(definition);
                        ^~~~~~~~~~
reportxml.c:1371:25: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        refobject_unref(ret);
                        ^~~
reportxml.c:1372:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("No point to attach to in report. BAD.");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
reportxml.c:1347:25: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        refobject_unref(definition);
                        ^~~~~~~~~~
reportxml.c:1348:25: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        refobject_unref(ret);
                        ^~~
reportxml.c:1349:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("Can not get root node from report. BAD.");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
reportxml.c:1340:25: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        refobject_unref(definition);
                        ^~~~~~~~~~
reportxml.c:1341:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("Can not allocate new report. BAD.");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
reportxml.c:1317:29: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            refobject_unref(definition);
                            ^~~~~~~~~~
reportxml.c:1318:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_ERROR("Can not get first child. BAD.");
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
reportxml.c:1308:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_WARN("Empty definition for \"%H\". Returning empty report. This is likely an error.", id);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
reportxml.c:1309:25: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        refobject_unref(definition);
                        ^~~~~~~~~~
reportxml.c:1303:25: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        refobject_unref(definition);
                        ^~~~~~~~~~
reportxml.c:1304:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("Can not get child count from definition. BAD.");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
reportxml.c:1296:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_WARN("No matching definition for \"%H\"", id);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
2 warnings and 108 errors generated.
make[3]: [icecast-reportxml.o] Error 1 (ignored)
In file included from listensocket.c:28:
In file included from ./listensocket.h:13:
./refobject.h:155:67: warning: declaration of 'struct __va_list_tag' will not be visible outside of this function [-Wvisibility]
    _Ptr<int (refobject_t , _Ptr<const refobject_type_t> , struct __va_list_tag* )> type_newcb;
                                                                  ^
In file included from listensocket.c:30:
./connection.h:58:36: error: 'type name' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
    _Ptr<int (_Ptr<connection_t> , _Nt_array_ptr<const void> , size_t )> send;
                                   ^
./connection.h:81:55: error: 'buf' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
ssize_t connection_send_bytes(_Ptr<connection_t> con, _Nt_array_ptr<const void> buf, size_t len);
                                                      ^
listensocket.c:84:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_WARN("Listen backlog for listen socket on %s port %i is set insanely high. Limiting to sane range.", __string_default(listener->bind_address, "<ANY>"), listener->port);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
listensocket.c:129:29: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            refobject_unref(self->sock[i]);
                            ^~~~~~~~~~~~~
listensocket.c:169:9: error: initializing '_Ptr<int (refobject_t, _Ptr<const refobject_type_t>, struct __va_list_tag *)>' (aka '_Ptr<int (refobject_t, _Ptr<const struct refobject_type_tag>, struct __va_list_tag *)>') with an expression of incompatible type 'int (refobject_t, _Ptr<const refobject_type_t>, struct __va_list_tag *)' (aka 'int (refobject_t, _Ptr<const struct refobject_type_tag>, struct __va_list_tag *)'): type mismatch at 3rd parameter ('struct __va_list_tag *' vs 'struct __va_list_tag *')
        REFOBJECT_DEFINE_TYPE_NEW(__listensocket_container_new)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./refobject.h:107:89: note: expanded from macro 'REFOBJECT_DEFINE_TYPE'
#define REFOBJECT_DEFINE_TYPE(type, ...)            REFOBJECT_DEFINE_TYPE__RAW(type, ## __VA_ARGS__); const refobject_type_t * refobject_type__ ## type = &refobject_typedef__ ## type
                                                                                        ^~~~~~~~~~~
./refobject.h:105:10: note: expanded from macro 'REFOBJECT_DEFINE_TYPE__RAW'
    , ## __VA_ARGS__ \
         ^~~~~~~~~~~
./refobject.h:110:67: note: expanded from macro 'REFOBJECT_DEFINE_TYPE_NEW'
#define REFOBJECT_DEFINE_TYPE_NEW(cb)               .type_newcb = (cb)
                                                                  ^~~~
listensocket.c:186:28: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                    *ref = &(self->sockref[i]);
                           ^~~~~~~~~~~~~~~~~~~
listensocket.c:239:46: error: passing '_Ptr<listensocket_t *> *' (aka '_Ptr<struct listensocket_tag *> *') to parameter of incompatible type 'listensocket_t ***' (aka 'struct listensocket_tag ***')
            __find_matching_entry(self, cur, &match, &m);
                                             ^~~~~~
listensocket.c:172:160: note: passing argument to parameter 'found' here
static void __find_matching_entry(listensocket_container_t *self : itype(_Ptr<listensocket_container_t> ) , _Ptr<const listener_t> listener, listensocket_t ***found : itype(_Ptr<listensocket_t**> ) , _Ptr<_Ptr<int>> ref)
                                                                                                                                                               ^
listensocket.c:254:33: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                refobject_unref(n[i - 1]);
                                ^~~~~~~~
listensocket.c:327:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_DEBUG("Can not ref socket.");
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
listensocket.c:342:21: error: definition of variable with array type needs an explicit size or an initializer
    listensocket_t* socks[];
                    ^
listensocket.c:381:21: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                    ICECAST_LOG_ERROR("Closing listen socket in error state.");
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
listensocket.c:362:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("No sockets found to poll on.");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
listensocket.c:350:58: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        if (ok && listensocket__poll_fill(self->sock[i], &(ufds[found])) == -1) {
                                                         ^~~~~~~~~~~~~~
listensocket.c:351:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_WARN("Can not poll on closed socket.");
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
listensocket.c:437:19: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    refobject_ref(ls);
                  ^~
listensocket.c:441:21: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    refobject_unref(ls);
                    ^~
listensocket.c:498:39: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                    if (refobject_ref(self->sock[i]) == 0) {
                                      ^~~~~~~~~~~~~
listensocket.c:519:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("BUG: listensocket->sockrefc == 0 && listensocket->sockrefc == %zu", listensocket->sockrefc);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
listensocket.c:554:25: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        refobject_unref(self);
                        ^~~~
listensocket.c:585:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_ERROR("Tried to apply incomplete configuration to listensocket: bind address missmatch: have %s:%i, got %s:%i",
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
listensocket.c:662:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("Can not listen on socket: %s port %i", __string_default(self->listener->bind_address, "<ANY>"), self->listener->port);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
listensocket.c:729:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_DEBUG("Client on socket %p \"%H\".", self, self->listener->id);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
listensocket.c:732:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_DEBUG("This socket is acting on behalf of \"%H\"", self->listener->on_behalf_of);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
listensocket.c:735:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_ERROR("Can not find listen socket with ID \"%H\". Will continue on behalf of myself.", self->listener->on_behalf_of);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
listensocket.c:741:23: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        refobject_ref(effective);
                      ^~~~~~~~~
listensocket.c:746:21: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    refobject_unref(effective);
                    ^~~~~~~~~
1 warning and 26 errors generated.
make[3]: [icecast-listensocket.o] Error 1 (ignored)
In file included from fastevent.c:22:
In file included from ./fastevent.h:18:
./refobject.h:155:67: warning: declaration of 'struct __va_list_tag' will not be visible outside of this function [-Wvisibility]
    _Ptr<int (refobject_t , _Ptr<const refobject_type_t> , struct __va_list_tag* )> type_newcb;
                                                                  ^
In file included from fastevent.c:22:
./fastevent.h:57:153: warning: declaration of 'struct __va_list_tag' will not be visible outside of this function [-Wvisibility]
refobject_t fastevent_register(fastevent_type_t type, _Ptr<void (_Ptr<const void> , fastevent_type_t , fastevent_flag_t , fastevent_datatype_t , struct __va_list_tag* )> cb, _Ptr<void (void** )> freecb, void* userdata);
                                                                                                                                                        ^
fastevent.c:33:103: warning: declaration of 'struct __va_list_tag' will not be visible outside of this function [-Wvisibility]
    _Ptr<void (_Ptr<const void> , fastevent_type_t , fastevent_flag_t , fastevent_datatype_t , struct __va_list_tag* )> cb;
                                                                                                      ^
fastevent.c:66:21: error: argument has unknown bounds, bounds expected because the 1st parameter has bounds
        n = realloc(row->registrations, sizeof(*n)*(row->length + 4));
                    ^~~~~~~~~~~~~~~~~~
fastevent.c:76:5: error: expression has unknown bounds
    row->registrations[row->used++] = registration;
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
fastevent.c:68:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_ERROR("Can not allocate row space.");
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
fastevent.c:88:13: error: expression has unknown bounds
        if (row->registrations[i] == registration) {
            ^~~~~~~~~~~~~~~~~~~~~
fastevent.c:109:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("Can not remove fast event from row. BUG.");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
fastevent.c:137:14: error: argument has unknown bounds, bounds expected because the 1st parameter has bounds
        free(fastevent_registrations[i].registrations);
             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
fastevent.c:133:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_ERROR("Subsystem shutdown but elements still in use. BUG.");
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
fastevent.c:150:153: warning: declaration of 'struct __va_list_tag' will not be visible outside of this function [-Wvisibility]
refobject_t fastevent_register(fastevent_type_t type, _Ptr<void (_Ptr<const void> , fastevent_type_t , fastevent_flag_t , fastevent_datatype_t , struct __va_list_tag* )> cb, _Ptr<void (void** )> freecb, void* userdata)
                                                                                                                                                        ^
fastevent.c:150:13: error: conflicting types for 'fastevent_register'
refobject_t fastevent_register(fastevent_type_t type, _Ptr<void (_Ptr<const void> , fastevent_type_t , fastevent_flag_t , fastevent_datatype_t , struct __va_list_tag* )> cb, _Ptr<void (void** )> freecb, void* userdata)
            ^
./fastevent.h:57:13: note: previous declaration is here
refobject_t fastevent_register(fastevent_type_t type, _Ptr<void (_Ptr<const void> , fastevent_type_t , fastevent_flag_t , fastevent_datatype_t , struct __va_list_tag* )> cb, _Ptr<void (void** )> freecb, void* userdata);
            ^
fastevent.c:174:22: error: assigning to '_Ptr<void (_Ptr<const void>, fastevent_type_t, fastevent_flag_t, fastevent_datatype_t, struct __va_list_tag *)>' (aka '_Ptr<void (_Ptr<const void>, fastevent_type_t, int, fastevent_datatype_t, struct __va_list_tag *)>') from incompatible type '_Ptr<void (_Ptr<const void>, fastevent_type_t, fastevent_flag_t, fastevent_datatype_t, struct __va_list_tag *)>' (aka '_Ptr<void (_Ptr<const void>, fastevent_type_t, int, fastevent_datatype_t, struct __va_list_tag *)>'): type mismatch at 5th parameter ('struct __va_list_tag *' vs 'struct __va_list_tag *')
    registration->cb = cb;
                     ^ ~~
fastevent.c:207:91: warning: incompatible pointer types passing 'va_list' (aka '__builtin_va_list') to parameter of type 'struct __va_list_tag *' [-Wincompatible-pointer-types]
        row->registrations[i]->cb(row->registrations[i]->userdata, type, flags, datatype, apx);
                                                                                          ^~~
fastevent.c:207:9: error: expression has unknown bounds
        row->registrations[i]->cb(row->registrations[i]->userdata, type, flags, datatype, apx);
        ^~~~~~~~~~~~~~~~~~~~~
fastevent.c:207:35: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        row->registrations[i]->cb(row->registrations[i]->userdata, type, flags, datatype, apx);
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
fastevent.c:207:35: error: expression has unknown bounds
        row->registrations[i]->cb(row->registrations[i]->userdata, type, flags, datatype, apx);
                                  ^~~~~~~~~~~~~~~~~~~~~
5 warnings and 12 errors generated.
make[3]: [icecast-fastevent.o] Error 1 (ignored)
In file included from format.c:36:
./connection.h:58:36: error: 'type name' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
    _Ptr<int (_Ptr<connection_t> , _Nt_array_ptr<const void> , size_t )> send;
                                   ^
./connection.h:81:55: error: 'buf' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
ssize_t connection_send_bytes(_Ptr<connection_t> con, _Nt_array_ptr<const void> buf, size_t len);
                                                      ^
In file included from format.c:39:
In file included from ./source.h:25:
In file included from ./format.h:25:
In file included from ./client.h:23:
./common/httpp/encoding.h:61:117: error: expected ')'
ssize_t httpp_encoding_read(_Ptr<httpp_encoding_t> self, void* buf, size_t len, ssize_t (*)(void *, void *, size_t) cb : itype(_Ptr<ssize_t (void* , void* , size_t )> ) , void* userdata);
                                                                                                                    ^
./common/httpp/encoding.h:61:28: note: to match this '('
ssize_t httpp_encoding_read(_Ptr<httpp_encoding_t> self, void* buf, size_t len, ssize_t (*)(void *, void *, size_t) cb : itype(_Ptr<ssize_t (void* , void* , size_t )> ) , void* userdata);
                           ^
./common/httpp/encoding.h:66:69: error: expected ')'
int httpp_encoding_eof(_Ptr<httpp_encoding_t> self, int (*)(void *) cb : itype(_Ptr<int (void* )> ) , void* userdata);
                                                                    ^
./common/httpp/encoding.h:66:23: note: to match this '('
int httpp_encoding_eof(_Ptr<httpp_encoding_t> self, int (*)(void *) cb : itype(_Ptr<int (void* )> ) , void* userdata);
                      ^
In file included from format.c:39:
In file included from ./source.h:25:
In file included from ./format.h:25:
In file included from ./client.h:28:
In file included from ./module.h:15:
./refobject.h:155:67: warning: declaration of 'struct __va_list_tag' will not be visible outside of this function [-Wvisibility]
    _Ptr<int (refobject_t , _Ptr<const refobject_type_t> , struct __va_list_tag* )> type_newcb;
                                                                  ^
In file included from format.c:39:
In file included from ./source.h:25:
In file included from ./format.h:25:
./client.h:154:91: error: 'type name' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
int client_send_bytes(client_t *client : itype(_Ptr<client_t> ) , const void *buf : itype(_Nt_array_ptr<const void> ) , unsigned int len);
                                                                                          ^
./client.h:155:85: error: 'type name' declared as _Nt_array_ptr of type 'void'; only integer and pointer types are allowed
int client_read_bytes(client_t *client : itype(_Ptr<client_t> ) , void *buf : itype(_Nt_array_ptr<void> ) , unsigned int len);
                                                                                    ^
./client.h:157:88: error: 'type name' declared as _Nt_array_ptr of type 'void'; only integer and pointer types are allowed
ssize_t client_body_read(client_t *client : itype(_Ptr<client_t> ) , void *buf : itype(_Nt_array_ptr<void> ) , size_t len);
                                                                                       ^
format.c:78:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_WARN("Unsupported or legacy stream type: \"%s\". Falling back to generic minimal handler for best effort.", contenttype);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
format.c:133:34: error: assigning to '_Ptr<int (_Ptr<source_t>, _Ptr<client_t>)>' (aka '_Ptr<int (_Ptr<struct source_tag>, _Ptr<struct _client_tag>)>') from incompatible type 'int (_Ptr<source_t>, client_t * : itype(_Ptr<client_t>))' (aka 'int (_Ptr<struct source_tag>, struct _client_tag * : itype(_Ptr<client_t>))'): type mismatch at 2nd parameter ('_Ptr<client_t>' (aka '_Ptr<struct _client_tag>') vs 'client_t *' (aka 'struct _client_tag *'))
            client->check_buffer = format_advance_queue;
                                 ^ ~~~~~~~~~~~~~~~~~~~~
format.c:234:30: error: assigning to '_Ptr<int (_Ptr<source_t>, _Ptr<client_t>)>' (aka '_Ptr<int (_Ptr<struct source_tag>, _Ptr<struct _client_tag>)>') from incompatible type 'int (_Ptr<source_t>, client_t * : itype(_Ptr<client_t>))' (aka 'int (_Ptr<struct source_tag>, struct _client_tag * : itype(_Ptr<client_t>))'): type mismatch at 2nd parameter ('_Ptr<client_t>' (aka '_Ptr<struct _client_tag>') vs 'client_t *' (aka 'struct _client_tag *'))
        client->check_buffer = format_check_file_buffer;
                             ^ ~~~~~~~~~~~~~~~~~~~~~~~~
format.c:217:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_DEBUG("processing pending client headers");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
format.c:221:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_ERROR("internal problem, dropping client");
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
format.c:298:69: error: expression has unknown bounds
        ret = snprintf(str + done, remaining - done, format, first, var->value[i]);
                                                                    ^~~~~~~~~~~~~
format.c:314:13: error: assigning to '_Nt_array_ptr<const char>' from incompatible type 'char *'
        ret = strstr(var->value[i], "bitrate=");
            ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
format.c:352:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_ERROR("Client buffer reallocation failed. Dropping client.");
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
format.c:342:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_DEBUG("Client buffer reallocation succeeded.");
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
format.c:456:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_ERROR("Client format header generation failed. "
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
format.c:446:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("Can not allocate headers for client %p", client);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
format.c:432:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_ERROR("Can not allocate headers for client %p", client);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
format.c:359:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("Can not allocate headers for client %p", client);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
format.c:347:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_ERROR("Dropping client as we can not build response headers.");
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
format.c:336:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("Dropping client as we can not build response headers.");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
1 warning and 22 errors generated.
make[3]: [icecast-format.o] Error 1 (ignored)
In file included from format_ogg.c:31:
In file included from ./source.h:25:
In file included from ./format.h:25:
In file included from ./client.h:23:
./common/httpp/encoding.h:61:117: error: expected ')'
ssize_t httpp_encoding_read(_Ptr<httpp_encoding_t> self, void* buf, size_t len, ssize_t (*)(void *, void *, size_t) cb : itype(_Ptr<ssize_t (void* , void* , size_t )> ) , void* userdata);
                                                                                                                    ^
./common/httpp/encoding.h:61:28: note: to match this '('
ssize_t httpp_encoding_read(_Ptr<httpp_encoding_t> self, void* buf, size_t len, ssize_t (*)(void *, void *, size_t) cb : itype(_Ptr<ssize_t (void* , void* , size_t )> ) , void* userdata);
                           ^
./common/httpp/encoding.h:66:69: error: expected ')'
int httpp_encoding_eof(_Ptr<httpp_encoding_t> self, int (*)(void *) cb : itype(_Ptr<int (void* )> ) , void* userdata);
                                                                    ^
./common/httpp/encoding.h:66:23: note: to match this '('
int httpp_encoding_eof(_Ptr<httpp_encoding_t> self, int (*)(void *) cb : itype(_Ptr<int (void* )> ) , void* userdata);
                      ^
In file included from format_ogg.c:31:
In file included from ./source.h:25:
In file included from ./format.h:25:
In file included from ./client.h:28:
In file included from ./module.h:15:
./refobject.h:155:67: warning: declaration of 'struct __va_list_tag' will not be visible outside of this function [-Wvisibility]
    _Ptr<int (refobject_t , _Ptr<const refobject_type_t> , struct __va_list_tag* )> type_newcb;
                                                                  ^
In file included from format_ogg.c:31:
In file included from ./source.h:25:
In file included from ./format.h:25:
./client.h:154:91: error: 'type name' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
int client_send_bytes(client_t *client : itype(_Ptr<client_t> ) , const void *buf : itype(_Nt_array_ptr<const void> ) , unsigned int len);
                                                                                          ^
./client.h:155:85: error: 'type name' declared as _Nt_array_ptr of type 'void'; only integer and pointer types are allowed
int client_read_bytes(client_t *client : itype(_Ptr<client_t> ) , void *buf : itype(_Nt_array_ptr<void> ) , unsigned int len);
                                                                                    ^
./client.h:157:88: error: 'type name' declared as _Nt_array_ptr of type 'void'; only integer and pointer types are allowed
ssize_t client_body_read(client_t *client : itype(_Ptr<client_t> ) , void *buf : itype(_Nt_array_ptr<void> ) , size_t len);
                                                                                       ^
format_ogg.c:105:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_DEBUG("attaching header page");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
format_ogg.c:97:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_DEBUG("attaching BOS page");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
format_ogg.c:120:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_DEBUG("releasing header pages");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
format_ogg.c:146:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_DEBUG("freeing codecs");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
format_ogg.c:173:32: error: assigning to '_Ptr<int (_Ptr<source_t>, _Ptr<client_t>)>' (aka '_Ptr<int (_Ptr<struct source_tag>, _Ptr<struct _client_tag>)>') from incompatible type 'int (source_t * : itype(_Ptr<source_t>), client_t * : itype(_Ptr<client_t>))' (aka 'int (struct source_tag * : itype(_Ptr<source_t>), struct _client_tag * : itype(_Ptr<client_t>))'): type mismatch at 1st parameter ('_Ptr<source_t>' (aka '_Ptr<struct source_tag>') vs 'source_t *' (aka 'struct source_tag *'))
    plugin->create_client_data = create_ogg_client_data;
                               ^ ~~~~~~~~~~~~~~~~~~~~~~
format_ogg.c:183:20: error: assigning to 'void *' from incompatible type '_Ptr<ogg_state_t>' (aka '_Ptr<struct ogg_state_tag>')
    plugin->_state = state;
                   ^ ~~~~~
format_ogg.c:194:32: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    _Ptr<ogg_state_t> state =  plugin->_state;
                               ^~~~~~~~~~~~~~
format_ogg.c:230:37: error: passing '_Ptr<format_plugin_t>' (aka '_Ptr<struct _format_plugin_tag>') to parameter of incompatible type 'format_plugin_t *' (aka 'struct _format_plugin_tag *')
        codec = initial_vorbis_page(plugin, page);
                                    ^~~~~~
./format_vorbis.h:19:52: note: passing argument to parameter 'plugin' here
ogg_codec_t *initial_vorbis_page (format_plugin_t *plugin, ogg_page *page);
                                                   ^
format_ogg.c:238:35: error: passing '_Ptr<format_plugin_t>' (aka '_Ptr<struct _format_plugin_tag>') to parameter of incompatible type 'format_plugin_t *' (aka 'struct _format_plugin_tag *')
        codec = initial_midi_page(plugin, page);
                                  ^~~~~~
./format_midi.h:20:49: note: passing argument to parameter 'plugin' here
ogg_codec_t *initial_midi_page(format_plugin_t *plugin, ogg_page *page);
                                                ^
format_ogg.c:241:35: error: passing '_Ptr<format_plugin_t>' (aka '_Ptr<struct _format_plugin_tag>') to parameter of incompatible type 'format_plugin_t *' (aka 'struct _format_plugin_tag *')
        codec = initial_flac_page(plugin, page);
                                  ^~~~~~
./format_flac.h:20:49: note: passing argument to parameter 'plugin' here
ogg_codec_t *initial_flac_page(format_plugin_t *plugin, ogg_page *page);
                                                ^
format_ogg.c:249:43: error: passing '_Ptr<ogg_page>' to parameter of incompatible type 'ogg_page *'
        codec = initial_kate_page(plugin, page);
                                          ^~~~
./format_kate.h:20:77: note: passing argument to parameter 'page' here
_Ptr<ogg_codec_t> initial_kate_page(_Ptr<format_plugin_t> plugin, ogg_page *page);
                                                                            ^
format_ogg.c:252:47: error: passing '_Ptr<ogg_page>' to parameter of incompatible type 'ogg_page *'
        codec = initial_skeleton_page(plugin, page);
                                              ^~~~
./format_skeleton.h:19:81: note: passing argument to parameter 'page' here
_Ptr<ogg_codec_t> initial_skeleton_page(_Ptr<format_plugin_t> plugin, ogg_page *page);
                                                                                ^
format_ogg.c:255:43: error: passing '_Ptr<ogg_page>' to parameter of incompatible type 'ogg_page *'
        codec = initial_opus_page(plugin, page);
                                          ^~~~
./format_opus.h:19:77: note: passing argument to parameter 'page' here
_Ptr<ogg_codec_t> initial_opus_page(_Ptr<format_plugin_t> plugin, ogg_page *page);
                                                                            ^
format_ogg.c:212:35: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    _Ptr<ogg_state_t> ogg_info =  plugin->_state;
                                  ^~~~~~~~~~~~~~
format_ogg.c:260:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("Seen BOS page with unknown type");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
format_ogg.c:226:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_ERROR("many codecs in stream, playing safe, dropping source");
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
format_ogg.c:296:22: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'void *'
            metadata = calloc (1, len);
                     ^ ~~~~~~~~~~~~~~~
format_ogg.c:302:22: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'void *'
            metadata = calloc (1, len);
                     ^ ~~~~~~~~~~~~~~~
format_ogg.c:311:22: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'void *'
            metadata = calloc (1, len);
                     ^ ~~~~~~~~~~~~~~~
format_ogg.c:283:35: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    _Ptr<ogg_state_t> ogg_info =  source->format->_state;
                                  ^~~~~~~~~~~~~~~~~~~~~~
format_ogg.c:312:23: warning: cannot prove argument meets declared bounds for 1st parameter [-Wcheck-bounds-decls-unchecked-scope]
            snprintf (metadata, len, "%s", title);
                      ^~~~~~~~
format_ogg.c:312:23: note: (expanded) expected argument bounds are 'bounds((char *)metadata, (char *)metadata + (size_t)len == 0 ? 0 : (size_t)len - 1)'
format_ogg.c:312:23: note: (expanded) inferred bounds are 'bounds(metadata, metadata + 0)'
            snprintf (metadata, len, "%s", title);
                      ^~~~~~~~
format_ogg.c:303:23: warning: cannot prove argument meets declared bounds for 1st parameter [-Wcheck-bounds-decls-unchecked-scope]
            snprintf (metadata, len, "%s", artist);
                      ^~~~~~~~
format_ogg.c:303:23: note: (expanded) expected argument bounds are 'bounds((char *)metadata, (char *)metadata + (size_t)len == 0 ? 0 : (size_t)len - 1)'
format_ogg.c:303:23: note: (expanded) inferred bounds are 'bounds(metadata, metadata + 0)'
            snprintf (metadata, len, "%s", artist);
                      ^~~~~~~~
format_ogg.c:297:23: warning: cannot prove argument meets declared bounds for 1st parameter [-Wcheck-bounds-decls-unchecked-scope]
            snprintf (metadata, len, "%s - %s", artist, title);
                      ^~~~~~~~
format_ogg.c:297:23: note: (expanded) expected argument bounds are 'bounds((char *)metadata, (char *)metadata + (size_t)len == 0 ? 0 : (size_t)len - 1)'
format_ogg.c:297:23: note: (expanded) inferred bounds are 'bounds(metadata, metadata + 0)'
            snprintf (metadata, len, "%s - %s", artist, title);
                      ^~~~~~~~
format_ogg.c:317:42: error: argument does not meet declared bounds for 2nd parameter
        logging_playlist (source->mount, metadata, source->listeners);
                                         ^~~~~~~~
format_ogg.c:317:42: note: source bounds are an empty range
format_ogg.c:317:42: note: destination upper bound is above source upper bound
format_ogg.c:317:42: note: (expanded) expected argument bounds are 'bounds((_Array_ptr<const char>)metadata, (_Array_ptr<const char>)metadata + 1)'
format_ogg.c:317:42: note: (expanded) inferred bounds are 'bounds(metadata, metadata + 0)'
        logging_playlist (source->mount, metadata, source->listeners);
                                         ^~~~~~~~
format_ogg.c:350:35: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    _Ptr<ogg_state_t> ogg_info =  source->format->_state;
                                  ^~~~~~~~~~~~~~~~~~~~~~
format_ogg.c:403:35: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    _Ptr<ogg_state_t> ogg_info =  source->format->_state;
                                  ^~~~~~~~~~~~~~~~~~~~~~
format_ogg.c:439:21: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                    ICECAST_LOG_ERROR("Problem processing stream");
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
format_ogg.c:473:29: error: assigning to 'void *' from incompatible type '_Ptr<struct ogg_client>'
        client->format_data = client_data;
                            ^ ~~~~~~~~~~~
format_ogg.c:474:34: error: assigning to '_Ptr<void (_Ptr<client_t>)>' (aka '_Ptr<void (_Ptr<struct _client_tag>)>') from incompatible type 'void (client_t * : itype(_Ptr<client_t>))' (aka 'void (struct _client_tag * : itype(_Ptr<client_t>))'): type mismatch at 1st parameter ('_Ptr<client_t>' (aka '_Ptr<struct _client_tag>') vs 'client_t *' (aka 'struct _client_tag *'))
        client->free_client_data = free_ogg_client_data;
                                 ^ ~~~~~~~~~~~~~~~~~~~~
format_ogg.c:493:44: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    _Ptr<struct ogg_client> client_data =  client->format_data;
                                           ^~~~~~~~~~~~~~~~~~~
format_ogg.c:537:44: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    _Ptr<struct ogg_client> client_data =  client->format_data;
                                           ^~~~~~~~~~~~~~~~~~~
format_ogg.c:573:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_WARN("Write to dump file failed, disabling");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
format_ogg.c:584:35: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    _Ptr<ogg_state_t> ogg_info =  source->format->_state;
                                  ^~~~~~~~~~~~~~~~~~~~~~
4 warnings and 35 errors generated.
make[3]: [icecast-format_ogg.o] Error 1 (ignored)
In file included from format_mp3.c:33:
In file included from ./source.h:25:
In file included from ./format.h:25:
In file included from ./client.h:23:
./common/httpp/encoding.h:61:117: error: expected ')'
ssize_t httpp_encoding_read(_Ptr<httpp_encoding_t> self, void* buf, size_t len, ssize_t (*)(void *, void *, size_t) cb : itype(_Ptr<ssize_t (void* , void* , size_t )> ) , void* userdata);
                                                                                                                    ^
./common/httpp/encoding.h:61:28: note: to match this '('
ssize_t httpp_encoding_read(_Ptr<httpp_encoding_t> self, void* buf, size_t len, ssize_t (*)(void *, void *, size_t) cb : itype(_Ptr<ssize_t (void* , void* , size_t )> ) , void* userdata);
                           ^
./common/httpp/encoding.h:66:69: error: expected ')'
int httpp_encoding_eof(_Ptr<httpp_encoding_t> self, int (*)(void *) cb : itype(_Ptr<int (void* )> ) , void* userdata);
                                                                    ^
./common/httpp/encoding.h:66:23: note: to match this '('
int httpp_encoding_eof(_Ptr<httpp_encoding_t> self, int (*)(void *) cb : itype(_Ptr<int (void* )> ) , void* userdata);
                      ^
In file included from format_mp3.c:33:
In file included from ./source.h:25:
In file included from ./format.h:25:
In file included from ./client.h:28:
In file included from ./module.h:15:
./refobject.h:155:67: warning: declaration of 'struct __va_list_tag' will not be visible outside of this function [-Wvisibility]
    _Ptr<int (refobject_t , _Ptr<const refobject_type_t> , struct __va_list_tag* )> type_newcb;
                                                                  ^
In file included from format_mp3.c:33:
In file included from ./source.h:25:
In file included from ./format.h:25:
./client.h:154:91: error: 'type name' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
int client_send_bytes(client_t *client : itype(_Ptr<client_t> ) , const void *buf : itype(_Nt_array_ptr<const void> ) , unsigned int len);
                                                                                          ^
./client.h:155:85: error: 'type name' declared as _Nt_array_ptr of type 'void'; only integer and pointer types are allowed
int client_read_bytes(client_t *client : itype(_Ptr<client_t> ) , void *buf : itype(_Nt_array_ptr<void> ) , unsigned int len);
                                                                                    ^
./client.h:157:88: error: 'type name' declared as _Nt_array_ptr of type 'void'; only integer and pointer types are allowed
ssize_t client_body_read(client_t *client : itype(_Ptr<client_t> ) , void *buf : itype(_Nt_array_ptr<void> ) , size_t len);
                                                                                       ^
In file included from format_mp3.c:35:
./connection.h:58:36: error: 'type name' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
    _Ptr<int (_Ptr<connection_t> , _Nt_array_ptr<const void> , size_t )> send;
                                   ^
./connection.h:81:55: error: 'buf' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
ssize_t connection_send_bytes(_Ptr<connection_t> con, _Nt_array_ptr<const void> buf, size_t len);
                                                      ^
format_mp3.c:85:32: error: assigning to '_Ptr<int (_Ptr<source_t>, _Ptr<client_t>)>' (aka '_Ptr<int (_Ptr<struct source_tag>, _Ptr<struct _client_tag>)>') from incompatible type 'int (source_t * : itype(_Ptr<source_t>), client_t * : itype(_Ptr<client_t>))' (aka 'int (struct source_tag * : itype(_Ptr<source_t>), struct _client_tag * : itype(_Ptr<client_t>))'): type mismatch at 1st parameter ('_Ptr<source_t>' (aka '_Ptr<struct source_tag>') vs 'source_t *' (aka 'struct source_tag *'))
    plugin->create_client_data = format_mp3_create_client_data;
                               ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
format_mp3.c:87:21: error: assigning to '_Ptr<void (_Ptr<struct _format_plugin_tag>, _Nt_array_ptr<const char> : count(0), _Nt_array_ptr<const char> : count(0), _Ptr<const char>)>' from incompatible type 'void (_Ptr<format_plugin_t>, _Nt_array_ptr<const char> : count(0), const char * : count(0) itype(_Nt_array_ptr<const char>), const char * : itype(_Ptr<const char>))' (aka 'void (_Ptr<struct _format_plugin_tag>, _Nt_array_ptr<const char> : count(0), const char * : count(0) itype(_Nt_array_ptr<const char>), const char * : itype(_Ptr<const char>))'): type mismatch at 3rd parameter ('_Nt_array_ptr<const char>' vs 'const char *')
    plugin->set_tag = mp3_set_tag;
                    ^ ~~~~~~~~~~~
format_mp3.c:88:28: error: assigning to '_Ptr<void (_Ptr<client_t>, _Ptr<struct _format_plugin_tag>, _Ptr<mount_proxy>)>' (aka '_Ptr<void (_Ptr<struct _client_tag>, _Ptr<struct _format_plugin_tag>, _Ptr<struct _mount_proxy>)>') from incompatible type 'void (client_t * : itype(_Ptr<client_t>), _Ptr<format_plugin_t>, _Ptr<mount_proxy>)' (aka 'void (struct _client_tag * : itype(_Ptr<client_t>), _Ptr<struct _format_plugin_tag>, _Ptr<struct _mount_proxy>)'): type mismatch at 1st parameter ('_Ptr<client_t>' (aka '_Ptr<struct _client_tag>') vs 'client_t *' (aka 'struct _client_tag *'))
    plugin->apply_settings = format_mp3_apply_settings;
                           ^ ~~~~~~~~~~~~~~~~~~~~~~~~~
format_mp3.c:96:20: error: assigning to 'void *' from incompatible type '_Ptr<mp3_state>'
    plugin->_state = state;
                   ^ ~~~~~
format_mp3.c:105:14: error: assigning to '_Nt_array_ptr<const char>' from incompatible type 'const char *'
    metadata = httpp_getvar (source->parser, "icy-metaint");
             ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
format_mp3.c:142:54: error: passing '_Nt_array_ptr<char>' to parameter of incompatible type 'const char *'
        value = util_conv_string (in_value, charset, plugin->charset);
                                                     ^~~~~~~~~~~~~~~
./util.h:122:80: note: passing argument to parameter 'out_charset' here
char *util_conv_string(const char *string, const char *in_charset, const char *out_charset) : itype(_Nt_array_ptr<char> ) ;
                                                                               ^
format_mp3.c:155:38: error: passing '_Nt_array_ptr<const char>' to parameter of incompatible type 'const char *'
    format_set_vorbiscomment(plugin, tag, value);
                                     ^~~
./format.h:78:73: note: passing argument to parameter 'tag' here
void format_set_vorbiscomment(_Ptr<format_plugin_t> plugin, const char *tag, const char *value);
                                                                        ^
format_mp3.c:127:35: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    _Ptr<mp3_state> source_mp3 =  plugin->_state;
                                  ^~~~~~~~~~~~~~
format_mp3.c:176:22: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
            if ((end = strstr (metadata+13, "\';")) == NULL)
                     ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~
format_mp3.c:184:62: error: passing '_Nt_array_ptr<char>' to parameter of incompatible type 'const char *'
                stats_event_conv (source->mount, "title", p, source->format->charset);
                                                             ^~~~~~~~~~~~~~~~~~~~~~~
./stats.h:82:142: note: passing argument to parameter 'charset' here
void stats_event_conv(const char *mount : itype(_Nt_array_ptr<const char> ) , _Nt_array_ptr<const char> name, const char *value, const char *charset);
                                                                                                                                             ^
format_mp3.c:207:29: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
            format->charset = strdup (mount->charset);
                            ^ ~~~~~~~~~~~~~~~~~~~~~~~
format_mp3.c:211:35: error: initializing '_Nt_array_ptr<const char>' with an expression of incompatible type 'const char *'
        _Nt_array_ptr<const char> metadata =  httpp_getvar (client->parser, "icy-metaint");
                                  ^           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
format_mp3.c:222:25: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
        format->charset = strdup ("ISO8859-1");
                        ^ ~~~~~~~~~~~~~~~~~~~~
format_mp3.c:196:35: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    _Ptr<mp3_state> source_mp3 =  format->_state;
                                  ^~~~~~~~~~~~~~
format_mp3.c:224:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_DEBUG("sending metadata interval %d", source_mp3->interval);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
format_mp3.c:225:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_DEBUG("charset %s", format->charset);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
format_mp3.c:257:29: error: initializing '_Nt_array_ptr<char>' with an expression of incompatible type 'char *'
        _Nt_array_ptr<char> end =  strstr (source_mp3->inline_url, "';");
                            ^      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
format_mp3.c:297:37: error: initializing '_Nt_array_ptr<char>' with an expression of incompatible type 'char *'
                _Nt_array_ptr<char> end =  strstr (source_mp3->inline_url, "';");
                                    ^      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
format_mp3.c:243:35: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    _Ptr<mp3_state> source_mp3 =  source->format->_state;
                                  ^~~~~~~~~~~~~~~~~~~~~~
format_mp3.c:279:39: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        _Ptr<mp3_state> source_mp3 =  source->format->_state;
                                      ^~~~~~~~~~~~~~~~~~~~~~
format_mp3.c:306:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_DEBUG("shoutcast metadata block setup with %s", p->data+1);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
format_mp3.c:267:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_WARN("Metadata too long at %d chars", len);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
format_mp3.c:325:41: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    _Ptr<mp3_client_data> client_mp3 =  client->format_data;
                                        ^~~~~~~~~~~~~~~~~~~
format_mp3.c:375:41: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    _Ptr<mp3_client_data> client_mp3 =  client->format_data;
                                        ^~~~~~~~~~~~~~~~~~~
format_mp3.c:451:30: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    _Ptr<mp3_state> state =  self->_state;
                             ^~~~~~~~~~~~
format_mp3.c:472:35: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    _Ptr<mp3_state> source_mp3 =  format->_state;
                                  ^~~~~~~~~~~~~~
format_mp3.c:518:35: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    _Ptr<mp3_state> source_mp3 =  source->format->_state;
                                  ^~~~~~~~~~~~~~~~~~~~~~
format_mp3.c:632:40: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
                source_mp3->inline_url = strstr (meta->data+1, "StreamUrl='");
                                       ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
format_mp3.c:546:35: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    _Ptr<mp3_state> source_mp3 =  plugin->_state;
                                  ^~~~~~~~~~~~~~
format_mp3.c:592:21: error: argument does not meet declared bounds for 1st parameter
            memset (source_mp3->build_metadata, 0,
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~
format_mp3.c:592:21: note: source bounds are an empty range
format_mp3.c:592:21: note: destination upper bound is above source upper bound
format_mp3.c:592:21: note: (expanded) expected argument bounds are 'bounds((_Array_ptr<char>)source_mp3->build_metadata, (_Array_ptr<char>)source_mp3->build_metadata + sizeof (source_mp3->build_metadata))'
format_mp3.c:592:21: note: (expanded) inferred bounds are 'bounds(source_mp3->build_metadata, source_mp3->build_metadata + 0)'
            memset (source_mp3->build_metadata, 0,
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~
format_mp3.c:610:17: warning: cannot prove argument meets declared bounds for 1st parameter [-Wcheck-bounds-decls-unchecked-scope]
        memcpy (source_mp3->build_metadata + source_mp3->build_metadata_offset,
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
format_mp3.c:610:17: note: (expanded) expected argument bounds are 'bounds((_Array_ptr<char>)source_mp3->build_metadata + source_mp3->build_metadata_offset, (_Array_ptr<char>)source_mp3->build_metadata + source_mp3->build_metadata_offset + (size_t)metadata_remaining - 1)'
format_mp3.c:610:17: note: (expanded) inferred bounds are 'bounds(source_mp3->build_metadata, source_mp3->build_metadata + 0)'
        memcpy (source_mp3->build_metadata + source_mp3->build_metadata_offset,
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
format_mp3.c:619:25: warning: cannot prove argument meets declared bounds for 1st parameter [-Wcheck-bounds-decls-unchecked-scope]
                strcmp (source_mp3->build_metadata+1, source_mp3->metadata->data+1) != 0)
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
format_mp3.c:619:25: note: (expanded) expected argument bounds are 'bounds((const char *)source_mp3->build_metadata + 1, (const char *)source_mp3->build_metadata + 1 + 0)'
format_mp3.c:619:25: note: (expanded) inferred bounds are 'bounds(source_mp3->build_metadata, source_mp3->build_metadata + 0)'
                strcmp (source_mp3->build_metadata+1, source_mp3->metadata->data+1) != 0)
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
format_mp3.c:622:33: warning: cannot prove argument meets declared bounds for 2nd parameter [-Wcheck-bounds-decls-unchecked-scope]
            memcpy (meta->data, source_mp3->build_metadata,
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~
format_mp3.c:622:33: note: (expanded) expected argument bounds are 'bounds((_Array_ptr<char>)source_mp3->build_metadata, (_Array_ptr<char>)source_mp3->build_metadata + (size_t)source_mp3->build_metadata_len)'
format_mp3.c:622:33: note: (expanded) inferred bounds are 'bounds(source_mp3->build_metadata, source_mp3->build_metadata + 0)'
            memcpy (meta->data, source_mp3->build_metadata,
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~
format_mp3.c:625:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_DEBUG("shoutcast metadata %.*s", 4080, meta->data+1);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
format_mp3.c:636:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_ERROR("Incorrect metadata format, ending stream");
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
format_mp3.c:603:21: warning: cannot prove argument meets declared bounds for 1st parameter [-Wcheck-bounds-decls-unchecked-scope]
            memcpy (source_mp3->build_metadata +
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
format_mp3.c:603:21: note: (expanded) expected argument bounds are 'bounds((_Array_ptr<char>)source_mp3->build_metadata + source_mp3->build_metadata_offset, (_Array_ptr<char>)source_mp3->build_metadata + source_mp3->build_metadata_offset + (size_t)bytes)'
format_mp3.c:603:21: note: (expanded) inferred bounds are 'bounds(source_mp3->build_metadata, source_mp3->build_metadata + 0)'
            memcpy (source_mp3->build_metadata +
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
format_mp3.c:593:41: warning: 'memset' call operates on objects of type 'char' while the size is based on a different type '_Nt_array_ptr<char>' [-Wsizeof-pointer-memaccess]
                    sizeof (source_mp3->build_metadata));
                            ~~~~~~~~~~~~^~~~~~~~~~~~~~
format_mp3.c:593:41: note: did you mean to provide an explicit length?
                    sizeof (source_mp3->build_metadata));
                            ~~~~~~~~~~~~^~~~~~~~~~~~~~
format_mp3.c:676:15: error: assigning to '_Nt_array_ptr<const char>' from incompatible type 'const char *'
    useragent = httpp_getvar (client->parser, "user-agent");
              ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
format_mp3.c:685:25: error: assigning to 'void *' from incompatible type '_Ptr<mp3_client_data>'
    client->format_data = client_mp3;
                        ^ ~~~~~~~~~~
format_mp3.c:686:30: error: assigning to '_Ptr<void (_Ptr<client_t>)>' (aka '_Ptr<void (_Ptr<struct _client_tag>)>') from incompatible type 'void (client_t * : itype(_Ptr<client_t>))' (aka 'void (struct _client_tag * : itype(_Ptr<client_t>))'): type mismatch at 1st parameter ('_Ptr<client_t>' (aka '_Ptr<struct _client_tag>') vs 'client_t *' (aka 'struct _client_tag *'))
    client->free_client_data = free_mp3_client_data;
                             ^ ~~~~~~~~~~~~~~~~~~~~
format_mp3.c:687:14: error: assigning to '_Nt_array_ptr<const char>' from incompatible type 'const char *'
    metadata = httpp_getvar(client->parser, "icy-metadata");
             ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
format_mp3.c:663:35: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    _Ptr<mp3_state> source_mp3 =  source->format->_state;
                                  ^~~~~~~~~~~~~~~~~~~~~~
format_mp3.c:728:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_WARN("Write to dump file failed, disabling");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
6 warnings and 45 errors generated.
make[3]: [icecast-format_mp3.o] Error 1 (ignored)
In file included from format_midi.c:26:
In file included from ./format_ogg.h:24:
In file included from ./format.h:25:
In file included from ./client.h:23:
./common/httpp/encoding.h:61:117: error: expected ')'
ssize_t httpp_encoding_read(_Ptr<httpp_encoding_t> self, void* buf, size_t len, ssize_t (*)(void *, void *, size_t) cb : itype(_Ptr<ssize_t (void* , void* , size_t )> ) , void* userdata);
                                                                                                                    ^
./common/httpp/encoding.h:61:28: note: to match this '('
ssize_t httpp_encoding_read(_Ptr<httpp_encoding_t> self, void* buf, size_t len, ssize_t (*)(void *, void *, size_t) cb : itype(_Ptr<ssize_t (void* , void* , size_t )> ) , void* userdata);
                           ^
./common/httpp/encoding.h:66:69: error: expected ')'
int httpp_encoding_eof(_Ptr<httpp_encoding_t> self, int (*)(void *) cb : itype(_Ptr<int (void* )> ) , void* userdata);
                                                                    ^
./common/httpp/encoding.h:66:23: note: to match this '('
int httpp_encoding_eof(_Ptr<httpp_encoding_t> self, int (*)(void *) cb : itype(_Ptr<int (void* )> ) , void* userdata);
                      ^
In file included from format_midi.c:26:
In file included from ./format_ogg.h:24:
In file included from ./format.h:25:
In file included from ./client.h:28:
In file included from ./module.h:15:
./refobject.h:155:67: warning: declaration of 'struct __va_list_tag' will not be visible outside of this function [-Wvisibility]
    _Ptr<int (refobject_t , _Ptr<const refobject_type_t> , struct __va_list_tag* )> type_newcb;
                                                                  ^
In file included from format_midi.c:26:
In file included from ./format_ogg.h:24:
In file included from ./format.h:25:
./client.h:154:91: error: 'type name' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
int client_send_bytes(client_t *client : itype(_Ptr<client_t> ) , const void *buf : itype(_Nt_array_ptr<const void> ) , unsigned int len);
                                                                                          ^
./client.h:155:85: error: 'type name' declared as _Nt_array_ptr of type 'void'; only integer and pointer types are allowed
int client_read_bytes(client_t *client : itype(_Ptr<client_t> ) , void *buf : itype(_Nt_array_ptr<void> ) , unsigned int len);
                                                                                    ^
./client.h:157:88: error: 'type name' declared as _Nt_array_ptr of type 'void'; only integer and pointer types are allowed
ssize_t client_body_read(client_t *client : itype(_Ptr<client_t> ) , void *buf : itype(_Nt_array_ptr<void> ) , size_t len);
                                                                                       ^
format_midi.c:36:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_DEBUG("freeing MIDI codec");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
format_midi.c:61:35: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    _Ptr<ogg_state_t> ogg_info =  plugin->_state;
                                  ^~~~~~~~~~~~~~
format_midi.c:70:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_DEBUG("checking for MIDI codec");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
format_midi.c:80:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_INFO("seen initial MIDI header");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:50:33: note: expanded from macro 'ICECAST_LOG_INFO'
#define ICECAST_LOG_INFO(...)   ICECAST_LOG(ICECAST_LOGLEVEL_INFO,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
1 warning and 9 errors generated.
make[3]: [icecast-format_midi.o] Error 1 (ignored)
In file included from format_flac.c:26:
In file included from ./format_ogg.h:24:
In file included from ./format.h:25:
In file included from ./client.h:23:
./common/httpp/encoding.h:61:117: error: expected ')'
ssize_t httpp_encoding_read(_Ptr<httpp_encoding_t> self, void* buf, size_t len, ssize_t (*)(void *, void *, size_t) cb : itype(_Ptr<ssize_t (void* , void* , size_t )> ) , void* userdata);
                                                                                                                    ^
./common/httpp/encoding.h:61:28: note: to match this '('
ssize_t httpp_encoding_read(_Ptr<httpp_encoding_t> self, void* buf, size_t len, ssize_t (*)(void *, void *, size_t) cb : itype(_Ptr<ssize_t (void* , void* , size_t )> ) , void* userdata);
                           ^
./common/httpp/encoding.h:66:69: error: expected ')'
int httpp_encoding_eof(_Ptr<httpp_encoding_t> self, int (*)(void *) cb : itype(_Ptr<int (void* )> ) , void* userdata);
                                                                    ^
./common/httpp/encoding.h:66:23: note: to match this '('
int httpp_encoding_eof(_Ptr<httpp_encoding_t> self, int (*)(void *) cb : itype(_Ptr<int (void* )> ) , void* userdata);
                      ^
In file included from format_flac.c:26:
In file included from ./format_ogg.h:24:
In file included from ./format.h:25:
In file included from ./client.h:28:
In file included from ./module.h:15:
./refobject.h:155:67: warning: declaration of 'struct __va_list_tag' will not be visible outside of this function [-Wvisibility]
    _Ptr<int (refobject_t , _Ptr<const refobject_type_t> , struct __va_list_tag* )> type_newcb;
                                                                  ^
In file included from format_flac.c:26:
In file included from ./format_ogg.h:24:
In file included from ./format.h:25:
./client.h:154:91: error: 'type name' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
int client_send_bytes(client_t *client : itype(_Ptr<client_t> ) , const void *buf : itype(_Nt_array_ptr<const void> ) , unsigned int len);
                                                                                          ^
./client.h:155:85: error: 'type name' declared as _Nt_array_ptr of type 'void'; only integer and pointer types are allowed
int client_read_bytes(client_t *client : itype(_Ptr<client_t> ) , void *buf : itype(_Nt_array_ptr<void> ) , unsigned int len);
                                                                                    ^
./client.h:157:88: error: 'type name' declared as _Nt_array_ptr of type 'void'; only integer and pointer types are allowed
ssize_t client_body_read(client_t *client : itype(_Ptr<client_t> ) , void *buf : itype(_Nt_array_ptr<void> ) , size_t len);
                                                                                       ^
format_flac.c:36:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_DEBUG("freeing FLAC codec");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
format_flac.c:86:35: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    _Ptr<ogg_state_t> ogg_info =  plugin->_state;
                                  ^~~~~~~~~~~~~~
format_flac.c:95:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_DEBUG("checking for FLAC codec");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
format_flac.c:102:13: error: expression has unknown bounds
        if (*parse != 0x7F)
            ^~~~~~
format_flac.c:105:20: error: argument has unknown bounds, bounds expected because the 1st parameter has bounds
        if (memcmp(parse, "FLAC", 4) != 0)
                   ^~~~~
format_flac.c:108:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_INFO("seen initial FLAC header");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:50:33: note: expanded from macro 'ICECAST_LOG_INFO'
#define ICECAST_LOG_INFO(...)   ICECAST_LOG(ICECAST_LOGLEVEL_INFO,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
format_flac.c:111:70: error: expression has unknown bounds
        stats_event_args (ogg_info->mount, "FLAC_version", "%d.%d",  parse[0], parse[1]);
                                                                     ^~~~~~~~
format_flac.c:111:80: error: expression has unknown bounds
        stats_event_args (ogg_info->mount, "FLAC_version", "%d.%d",  parse[0], parse[1]);
                                                                               ^~~~~~~~
1 warning and 13 errors generated.
make[3]: [icecast-format_flac.o] Error 1 (ignored)
In file included from format_ebml.c:30:
In file included from ./source.h:25:
In file included from ./format.h:25:
In file included from ./client.h:23:
./common/httpp/encoding.h:61:117: error: expected ')'
ssize_t httpp_encoding_read(_Ptr<httpp_encoding_t> self, void* buf, size_t len, ssize_t (*)(void *, void *, size_t) cb : itype(_Ptr<ssize_t (void* , void* , size_t )> ) , void* userdata);
                                                                                                                    ^
./common/httpp/encoding.h:61:28: note: to match this '('
ssize_t httpp_encoding_read(_Ptr<httpp_encoding_t> self, void* buf, size_t len, ssize_t (*)(void *, void *, size_t) cb : itype(_Ptr<ssize_t (void* , void* , size_t )> ) , void* userdata);
                           ^
./common/httpp/encoding.h:66:69: error: expected ')'
int httpp_encoding_eof(_Ptr<httpp_encoding_t> self, int (*)(void *) cb : itype(_Ptr<int (void* )> ) , void* userdata);
                                                                    ^
./common/httpp/encoding.h:66:23: note: to match this '('
int httpp_encoding_eof(_Ptr<httpp_encoding_t> self, int (*)(void *) cb : itype(_Ptr<int (void* )> ) , void* userdata);
                      ^
In file included from format_ebml.c:30:
In file included from ./source.h:25:
In file included from ./format.h:25:
In file included from ./client.h:28:
In file included from ./module.h:15:
./refobject.h:155:67: warning: declaration of 'struct __va_list_tag' will not be visible outside of this function [-Wvisibility]
    _Ptr<int (refobject_t , _Ptr<const refobject_type_t> , struct __va_list_tag* )> type_newcb;
                                                                  ^
In file included from format_ebml.c:30:
In file included from ./source.h:25:
In file included from ./format.h:25:
./client.h:154:91: error: 'type name' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
int client_send_bytes(client_t *client : itype(_Ptr<client_t> ) , const void *buf : itype(_Nt_array_ptr<const void> ) , unsigned int len);
                                                                                          ^
./client.h:155:85: error: 'type name' declared as _Nt_array_ptr of type 'void'; only integer and pointer types are allowed
int client_read_bytes(client_t *client : itype(_Ptr<client_t> ) , void *buf : itype(_Nt_array_ptr<void> ) , unsigned int len);
                                                                                    ^
./client.h:157:88: error: 'type name' declared as _Nt_array_ptr of type 'void'; only integer and pointer types are allowed
ssize_t client_body_read(client_t *client : itype(_Ptr<client_t> ) , void *buf : itype(_Nt_array_ptr<void> ) , size_t len);
                                                                                       ^
format_ebml.c:197:32: error: assigning to '_Ptr<int (_Ptr<source_t>, _Ptr<client_t>)>' (aka '_Ptr<int (_Ptr<struct source_tag>, _Ptr<struct _client_tag>)>') from incompatible type 'int (source_t * : itype(_Ptr<source_t>), client_t * : itype(_Ptr<client_t>))' (aka 'int (struct source_tag * : itype(_Ptr<source_t>), struct _client_tag * : itype(_Ptr<client_t>))'): type mismatch at 1st parameter ('_Ptr<source_t>' (aka '_Ptr<struct source_tag>') vs 'source_t *' (aka 'struct source_tag *'))
    plugin->create_client_data = ebml_create_client_data;
                               ^ ~~~~~~~~~~~~~~~~~~~~~~~
format_ebml.c:205:20: error: assigning to 'void *' from incompatible type '_Ptr<ebml_source_state_t>' (aka '_Ptr<struct ebml_source_state_st>')
    plugin->_state = ebml_source_state;
                   ^ ~~~~~~~~~~~~~~~~~
format_ebml.c:217:52: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    _Ptr<ebml_source_state_t> ebml_source_state =  plugin->_state;
                                                   ^~~~~~~~~~~~~~
format_ebml.c:231:50: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    _Ptr<ebml_client_data_t> ebml_client_data =  client->format_data;
                                                 ^~~~~~~~~~~~~~~~~~~
format_ebml.c:267:33: error: assigning to '_Ptr<int (_Ptr<client_t>)>' (aka '_Ptr<int (_Ptr<struct _client_tag>)>') from incompatible type 'int (client_t * : itype(_Ptr<client_t>))' (aka 'int (struct _client_tag * : itype(_Ptr<client_t>))'): type mismatch at 1st parameter ('_Ptr<client_t>' (aka '_Ptr<struct _client_tag>') vs 'client_t *' (aka 'struct _client_tag *'))
        client->write_to_client = format_generic_write_to_client;
                                ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
format_ebml.c:257:50: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    _Ptr<ebml_client_data_t> ebml_client_data =  client->format_data;
                                                 ^~~~~~~~~~~~~~~~~~~
format_ebml.c:310:26: error: assigning to '_Nt_array_ptr<unsigned char>' from incompatible type 'unsigned char *'
            write_buffer = ebml_get_write_buffer(ebml_source_state->ebml, &write_bytes);
                         ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
format_ebml.c:278:52: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    _Ptr<ebml_source_state_t> ebml_source_state =  source->format->_state;
                                                   ^~~~~~~~~~~~~~~~~~~~~~
format_ebml.c:324:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_ERROR("Problem processing stream");
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
format_ebml.c:319:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_ERROR("Problem processing stream");
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
format_ebml.c:347:25: error: assigning to 'void *' from incompatible type '_Ptr<ebml_client_data_t>' (aka '_Ptr<struct ebml_client_data_st>')
    client->format_data = ebml_client_data;
                        ^ ~~~~~~~~~~~~~~~~
format_ebml.c:348:30: error: assigning to '_Ptr<void (_Ptr<client_t>)>' (aka '_Ptr<void (_Ptr<struct _client_tag>)>') from incompatible type 'void (client_t * : itype(_Ptr<client_t>))' (aka 'void (struct _client_tag * : itype(_Ptr<client_t>))'): type mismatch at 1st parameter ('_Ptr<client_t>' (aka '_Ptr<struct _client_tag>') vs 'client_t *' (aka 'struct _client_tag *'))
    client->free_client_data = ebml_free_client_data;
                             ^ ~~~~~~~~~~~~~~~~~~~~~
format_ebml.c:336:52: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    _Ptr<ebml_source_state_t> ebml_source_state =  source->format->_state;
                                                   ^~~~~~~~~~~~~~~~~~~~~~
format_ebml.c:355:50: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    _Ptr<ebml_client_data_t> ebml_client_data =  client->format_data;
                                                 ^~~~~~~~~~~~~~~~~~~
format_ebml.c:364:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_WARN("Write to dump file failed, disabling");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
format_ebml.c:372:52: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    _Ptr<ebml_source_state_t> ebml_source_state =  source->format->_state;
                                                   ^~~~~~~~~~~~~~~~~~~~~~
format_ebml.c:396:10: error: argument has unknown bounds, bounds expected because the 1st parameter has bounds
    free(ebml->header);
         ^~~~~~~~~~~~
format_ebml.c:398:10: error: argument has unknown bounds, bounds expected because the 1st parameter has bounds
    free(ebml->buffer);
         ^~~~~~~~~~~~
format_ebml.c:412:24: error: assigning to '_Nt_array_ptr<unsigned char>' from incompatible type 'void *'
    ebml->input_buffer = calloc(1, EBML_SLICE_SIZE);
                       ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~
format_ebml.c:510:32: error: argument has unknown bounds, bounds expected because the 2nd parameter has bounds
                memcpy(buffer, ebml->header, to_read);
                               ^~~~~~~~~~~~
format_ebml.c:560:28: error: argument has unknown bounds, bounds expected because the 2nd parameter has bounds
            memcpy(buffer, ebml->buffer, to_read);
                           ^~~~~~~~~~~~
format_ebml.c:563:21: error: argument has unknown bounds, bounds expected because the 1st parameter has bounds
            memmove(ebml->buffer, ebml->buffer + to_read, ebml->position - to_read);
                    ^~~~~~~~~~~~
format_ebml.c:563:35: error: argument has unknown bounds, bounds expected because the 2nd parameter has bounds
            memmove(ebml->buffer, ebml->buffer + to_read, ebml->position - to_read);
                                  ^~~~~~~~~~~~~~~~~~~~~~
format_ebml.c:608:19: warning: cannot prove declared bounds for end_of_buffer are valid after assignment [-Wcheck-bounds-decls-unchecked-scope]
    end_of_buffer = ebml->input_buffer + ebml->input_position;
    ~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
format_ebml.c:608:5: note: (expanded) declared bounds are 'bounds(end_of_buffer, end_of_buffer + 0)'
    end_of_buffer = ebml->input_buffer + ebml->input_position;
    ^
format_ebml.c:608:40: note: (expanded) inferred bounds are 'bounds(ebml->input_buffer, ebml->input_buffer + 0)'
    end_of_buffer = ebml->input_buffer + ebml->input_position;
                    ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~
format_ebml.c:825:13: warning: cannot prove argument meets declared bounds for 1st parameter [-Wcheck-bounds-decls-unchecked-scope]
    memmove(ebml->input_buffer, ebml->input_buffer + cursor, ebml->input_position - cursor);
            ^~~~~~~~~~~~~~~~~~
format_ebml.c:825:13: note: (expanded) expected argument bounds are 'bounds((_Array_ptr<char>)ebml->input_buffer, (_Array_ptr<char>)ebml->input_buffer + ebml->input_position - cursor)'
format_ebml.c:825:13: note: (expanded) inferred bounds are 'bounds(ebml->input_buffer, ebml->input_buffer + 0)'
    memmove(ebml->input_buffer, ebml->input_buffer + cursor, ebml->input_position - cursor);
            ^~~~~~~~~~~~~~~~~~
format_ebml.c:825:33: warning: cannot prove argument meets declared bounds for 2nd parameter [-Wcheck-bounds-decls-unchecked-scope]
    memmove(ebml->input_buffer, ebml->input_buffer + cursor, ebml->input_position - cursor);
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~
format_ebml.c:825:33: note: (expanded) expected argument bounds are 'bounds((_Array_ptr<char>)ebml->input_buffer + cursor, (_Array_ptr<char>)ebml->input_buffer + cursor + ebml->input_position - cursor)'
format_ebml.c:825:33: note: (expanded) inferred bounds are 'bounds(ebml->input_buffer, ebml->input_buffer + 0)'
    memmove(ebml->input_buffer, ebml->input_buffer + cursor, ebml->input_position - cursor);
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~
format_ebml.c:623:45: warning: cannot prove argument meets declared bounds for 1st parameter [-Wcheck-bounds-decls-unchecked-scope]
                tag_length = ebml_parse_tag(ebml->input_buffer + cursor,
                                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~
format_ebml.c:623:45: note: (expanded) expected argument bounds are 'bounds(ebml->input_buffer + cursor, ebml->input_buffer + cursor + 0)'
format_ebml.c:623:64: note: (expanded) inferred bounds are 'bounds(ebml->input_buffer, ebml->input_buffer + 0)'
                tag_length = ebml_parse_tag(ebml->input_buffer + cursor,
                                            ~~~~~~~~~~~~~~~~~~~^~~~~~~~
format_ebml.c:642:37: error: argument does not meet declared bounds for 1st parameter
                        if (!memcmp(ebml->input_buffer + cursor, CLUSTER_MAGIC, UNCOMMON_MAGIC_LEN)) {
                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~
format_ebml.c:642:37: note: source bounds are an empty range
format_ebml.c:642:37: note: (expanded) expected argument bounds are 'bounds((_Array_ptr<char>)ebml->input_buffer + cursor, (_Array_ptr<char>)ebml->input_buffer + cursor + (size_t)4)'
format_ebml.c:642:37: note: (expanded) inferred bounds are 'bounds(ebml->input_buffer, ebml->input_buffer + 0)'
                        if (!memcmp(ebml->input_buffer + cursor, CLUSTER_MAGIC, UNCOMMON_MAGIC_LEN)) {
                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~
format_ebml.c:646:44: error: argument does not meet declared bounds for 1st parameter
                        } else if (!memcmp(ebml->input_buffer + cursor, SEGMENT_MAGIC, UNCOMMON_MAGIC_LEN)) {
                                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~
format_ebml.c:646:44: note: source bounds are an empty range
format_ebml.c:646:44: note: (expanded) expected argument bounds are 'bounds((_Array_ptr<char>)ebml->input_buffer + cursor, (_Array_ptr<char>)ebml->input_buffer + cursor + (size_t)4)'
format_ebml.c:646:44: note: (expanded) inferred bounds are 'bounds(ebml->input_buffer, ebml->input_buffer + 0)'
                        } else if (!memcmp(ebml->input_buffer + cursor, SEGMENT_MAGIC, UNCOMMON_MAGIC_LEN)) {
                                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~
format_ebml.c:650:44: error: argument does not meet declared bounds for 1st parameter
                        } else if (!memcmp(ebml->input_buffer + cursor, TRACKS_MAGIC, UNCOMMON_MAGIC_LEN)) {
                                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~
format_ebml.c:650:44: note: source bounds are an empty range
format_ebml.c:650:44: note: (expanded) expected argument bounds are 'bounds((_Array_ptr<char>)ebml->input_buffer + cursor, (_Array_ptr<char>)ebml->input_buffer + cursor + (size_t)4)'
format_ebml.c:650:44: note: (expanded) inferred bounds are 'bounds(ebml->input_buffer, ebml->input_buffer + 0)'
                        } else if (!memcmp(ebml->input_buffer + cursor, TRACKS_MAGIC, UNCOMMON_MAGIC_LEN)) {
                                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~
format_ebml.c:659:37: error: argument does not meet declared bounds for 1st parameter
                        if (!memcmp(ebml->input_buffer + cursor, SIMPLE_BLOCK_MAGIC, COMMON_MAGIC_LEN)) {
                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~
format_ebml.c:659:37: note: source bounds are an empty range
format_ebml.c:659:37: note: (expanded) expected argument bounds are 'bounds((_Array_ptr<char>)ebml->input_buffer + cursor, (_Array_ptr<char>)ebml->input_buffer + cursor + (size_t)1)'
format_ebml.c:659:37: note: (expanded) inferred bounds are 'bounds(ebml->input_buffer, ebml->input_buffer + 0)'
                        if (!memcmp(ebml->input_buffer + cursor, SIMPLE_BLOCK_MAGIC, COMMON_MAGIC_LEN)) {
                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~
format_ebml.c:694:44: error: argument does not meet declared bounds for 1st parameter
                        } else if (!memcmp(ebml->input_buffer + cursor, TRACK_ENTRY_MAGIC, COMMON_MAGIC_LEN)) {
                                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~
format_ebml.c:694:44: note: source bounds are an empty range
format_ebml.c:694:44: note: (expanded) expected argument bounds are 'bounds((_Array_ptr<char>)ebml->input_buffer + cursor, (_Array_ptr<char>)ebml->input_buffer + cursor + (size_t)1)'
format_ebml.c:694:44: note: (expanded) inferred bounds are 'bounds(ebml->input_buffer, ebml->input_buffer + 0)'
                        } else if (!memcmp(ebml->input_buffer + cursor, TRACK_ENTRY_MAGIC, COMMON_MAGIC_LEN)) {
                                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~
format_ebml.c:700:44: error: argument does not meet declared bounds for 1st parameter
                        } else if (!memcmp(ebml->input_buffer + cursor, TRACK_NUMBER_MAGIC, COMMON_MAGIC_LEN)) {
                                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~
format_ebml.c:700:44: note: source bounds are an empty range
format_ebml.c:700:44: note: (expanded) expected argument bounds are 'bounds((_Array_ptr<char>)ebml->input_buffer + cursor, (_Array_ptr<char>)ebml->input_buffer + cursor + (size_t)1)'
format_ebml.c:700:44: note: (expanded) inferred bounds are 'bounds(ebml->input_buffer, ebml->input_buffer + 0)'
                        } else if (!memcmp(ebml->input_buffer + cursor, TRACK_NUMBER_MAGIC, COMMON_MAGIC_LEN)) {
                                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~
format_ebml.c:715:44: error: argument does not meet declared bounds for 1st parameter
                        } else if (!memcmp(ebml->input_buffer + cursor, TRACK_TYPE_MAGIC, COMMON_MAGIC_LEN)) {
                                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~
format_ebml.c:715:44: note: source bounds are an empty range
format_ebml.c:715:44: note: (expanded) expected argument bounds are 'bounds((_Array_ptr<char>)ebml->input_buffer + cursor, (_Array_ptr<char>)ebml->input_buffer + cursor + (size_t)1)'
format_ebml.c:715:44: note: (expanded) inferred bounds are 'bounds(ebml->input_buffer, ebml->input_buffer + 0)'
                        } else if (!memcmp(ebml->input_buffer + cursor, TRACK_TYPE_MAGIC, COMMON_MAGIC_LEN)) {
                                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~
format_ebml.c:718:65: error: cast source bounds are too narrow for '_Ptr<unsigned char>'
                                                                end_of_buffer, payload_length, 0, &data_value);
                                                                ^~~~~~~~~~~~~
format_ebml.c:718:65: note: source bounds are an empty range
format_ebml.c:718:65: note: target upper bound is above source upper bound
format_ebml.c:718:65: note: (expanded) required bounds are 'bounds((_Array_ptr<unsigned char>)end_of_buffer, (_Array_ptr<unsigned char>)end_of_buffer + 1)'
format_ebml.c:718:65: note: (expanded) inferred bounds are 'bounds(end_of_buffer, end_of_buffer + 0)'
format_ebml.c:703:65: error: cast source bounds are too narrow for '_Ptr<unsigned char>'
                                                                end_of_buffer, payload_length, 0, &data_value);
                                                                ^~~~~~~~~~~~~
format_ebml.c:703:65: note: source bounds are an empty range
format_ebml.c:703:65: note: target upper bound is above source upper bound
format_ebml.c:703:65: note: (expanded) required bounds are 'bounds((_Array_ptr<unsigned char>)end_of_buffer, (_Array_ptr<unsigned char>)end_of_buffer + 1)'
format_ebml.c:703:65: note: (expanded) inferred bounds are 'bounds(end_of_buffer, end_of_buffer + 0)'
format_ebml.c:663:67: error: cast source bounds are too narrow for '_Ptr<unsigned char>'
                                                                  end_of_buffer, &track_number);
                                                                  ^~~~~~~~~~~~~
format_ebml.c:663:67: note: source bounds are an empty range
format_ebml.c:663:67: note: target upper bound is above source upper bound
format_ebml.c:663:67: note: (expanded) required bounds are 'bounds((_Array_ptr<unsigned char>)end_of_buffer, (_Array_ptr<unsigned char>)end_of_buffer + 1)'
format_ebml.c:663:67: note: (expanded) inferred bounds are 'bounds(end_of_buffer, end_of_buffer + 0)'
format_ebml.c:756:49: warning: cannot prove argument meets declared bounds for 1st parameter [-Wcheck-bounds-decls-unchecked-scope]
                    tag_length = ebml_parse_tag(ebml->input_buffer + cursor,
                                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~
format_ebml.c:756:49: note: (expanded) expected argument bounds are 'bounds(ebml->input_buffer + cursor, ebml->input_buffer + cursor + 0)'
format_ebml.c:756:68: note: (expanded) inferred bounds are 'bounds(ebml->input_buffer, ebml->input_buffer + 0)'
                    tag_length = ebml_parse_tag(ebml->input_buffer + cursor,
                                                ~~~~~~~~~~~~~~~~~~~^~~~~~~~
format_ebml.c:796:28: error: argument has unknown bounds, bounds expected because the 1st parameter has bounds
                    memcpy(ebml->buffer + ebml->position, ebml->input_buffer + cursor, to_copy);
                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
format_ebml.c:796:59: warning: cannot prove argument meets declared bounds for 2nd parameter [-Wcheck-bounds-decls-unchecked-scope]
                    memcpy(ebml->buffer + ebml->position, ebml->input_buffer + cursor, to_copy);
                                                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~
format_ebml.c:796:59: note: (expanded) expected argument bounds are 'bounds((_Array_ptr<char>)ebml->input_buffer + cursor, (_Array_ptr<char>)ebml->input_buffer + cursor + to_copy)'
format_ebml.c:796:59: note: (expanded) inferred bounds are 'bounds(ebml->input_buffer, ebml->input_buffer + 0)'
                    memcpy(ebml->buffer + ebml->position, ebml->input_buffer + cursor, to_copy);
                                                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~
format_ebml.c:788:28: error: argument has unknown bounds, bounds expected because the 1st parameter has bounds
                    memcpy(ebml->header + ebml->header_position, ebml->input_buffer + cursor, to_copy);
                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
format_ebml.c:788:66: warning: cannot prove argument meets declared bounds for 2nd parameter [-Wcheck-bounds-decls-unchecked-scope]
                    memcpy(ebml->header + ebml->header_position, ebml->input_buffer + cursor, to_copy);
                                                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~
format_ebml.c:788:66: note: (expanded) expected argument bounds are 'bounds((_Array_ptr<char>)ebml->input_buffer + cursor, (_Array_ptr<char>)ebml->input_buffer + cursor + to_copy)'
format_ebml.c:788:66: note: (expanded) inferred bounds are 'bounds(ebml->input_buffer, ebml->input_buffer + 0)'
                    memcpy(ebml->header + ebml->header_position, ebml->input_buffer + cursor, to_copy);
                                                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~
format_ebml.c:784:25: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                        ICECAST_LOG_ERROR("EBML Header too large, failing");
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
format_ebml.c:839:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_DEBUG("Identified track #%llu as the video track", (long long unsigned int)ebml->keyframe_track_number);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
format_ebml.c:864:46: error: cast source bounds are too narrow for '_Ptr<unsigned char>'
    type_length = ebml_parse_var_int(buffer, buffer_end, tag_id);
                                             ^~~~~~~~~~
format_ebml.c:864:46: note: source bounds are an empty range
format_ebml.c:864:46: note: target upper bound is above source upper bound
format_ebml.c:864:46: note: (expanded) required bounds are 'bounds((_Array_ptr<unsigned char>)buffer_end, (_Array_ptr<unsigned char>)buffer_end + 1)'
format_ebml.c:864:46: note: (expanded) inferred bounds are 'bounds(buffer_end, buffer_end + 0)'
format_ebml.c:871:60: error: cast source bounds are too narrow for '_Ptr<unsigned char>'
    size_length = ebml_parse_var_int(buffer + type_length, buffer_end, payload_length);
                                                           ^~~~~~~~~~
format_ebml.c:871:60: note: source bounds are an empty range
format_ebml.c:871:60: note: target upper bound is above source upper bound
format_ebml.c:871:60: note: (expanded) required bounds are 'bounds((_Array_ptr<unsigned char>)buffer_end, (_Array_ptr<unsigned char>)buffer_end + 1)'
format_ebml.c:871:60: note: (expanded) inferred bounds are 'bounds(buffer_end, buffer_end + 0)'
format_ebml.c:899:13: error: expression has unknown bounds
    value = buffer[0];
            ^~~~~~~~~
format_ebml.c:924:32: error: expression has unknown bounds
        value = (value << 8) + buffer[i];
                               ^~~~~~~~~
format_ebml.c:913:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_DEBUG("Corrupt var-int");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
format_ebml.c:967:37: error: expression has unknown bounds
    if (is_signed && ((signed char) buffer[0]) < 0) {
                                    ^~~~~~~~~
format_ebml.c:974:49: error: expression has unknown bounds
        value = (value << 8) + ((unsigned char) buffer[i]);
                                                ^~~~~~~~~
format_ebml.c:959:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_DEBUG("Sized int of %i bytes", len);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
8 warnings and 50 errors generated.
make[3]: [icecast-format_ebml.o] Error 1 (ignored)
In file included from format_kate.c:27:
In file included from ./format_ogg.h:24:
In file included from ./format.h:25:
In file included from ./client.h:23:
./common/httpp/encoding.h:61:117: error: expected ')'
ssize_t httpp_encoding_read(_Ptr<httpp_encoding_t> self, void* buf, size_t len, ssize_t (*)(void *, void *, size_t) cb : itype(_Ptr<ssize_t (void* , void* , size_t )> ) , void* userdata);
                                                                                                                    ^
./common/httpp/encoding.h:61:28: note: to match this '('
ssize_t httpp_encoding_read(_Ptr<httpp_encoding_t> self, void* buf, size_t len, ssize_t (*)(void *, void *, size_t) cb : itype(_Ptr<ssize_t (void* , void* , size_t )> ) , void* userdata);
                           ^
./common/httpp/encoding.h:66:69: error: expected ')'
int httpp_encoding_eof(_Ptr<httpp_encoding_t> self, int (*)(void *) cb : itype(_Ptr<int (void* )> ) , void* userdata);
                                                                    ^
./common/httpp/encoding.h:66:23: note: to match this '('
int httpp_encoding_eof(_Ptr<httpp_encoding_t> self, int (*)(void *) cb : itype(_Ptr<int (void* )> ) , void* userdata);
                      ^
In file included from format_kate.c:27:
In file included from ./format_ogg.h:24:
In file included from ./format.h:25:
In file included from ./client.h:28:
In file included from ./module.h:15:
./refobject.h:155:67: warning: declaration of 'struct __va_list_tag' will not be visible outside of this function [-Wvisibility]
    _Ptr<int (refobject_t , _Ptr<const refobject_type_t> , struct __va_list_tag* )> type_newcb;
                                                                  ^
In file included from format_kate.c:27:
In file included from ./format_ogg.h:24:
In file included from ./format.h:25:
./client.h:154:91: error: 'type name' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
int client_send_bytes(client_t *client : itype(_Ptr<client_t> ) , const void *buf : itype(_Nt_array_ptr<const void> ) , unsigned int len);
                                                                                          ^
./client.h:155:85: error: 'type name' declared as _Nt_array_ptr of type 'void'; only integer and pointer types are allowed
int client_read_bytes(client_t *client : itype(_Ptr<client_t> ) , void *buf : itype(_Nt_array_ptr<void> ) , unsigned int len);
                                                                                    ^
./client.h:157:88: error: 'type name' declared as _Nt_array_ptr of type 'void'; only integer and pointer types are allowed
ssize_t client_body_read(client_t *client : itype(_Ptr<client_t> ) , void *buf : itype(_Nt_array_ptr<void> ) , size_t len);
                                                                                       ^
format_kate.c:47:32: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    _Ptr<kate_codec_t> kate =  codec->specific;
                               ^~~~~~~~~~~~~~~
format_kate.c:49:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_DEBUG("freeing kate codec");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
format_kate.c:67:32: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    _Ptr<kate_codec_t> kate =  codec->specific;
                               ^~~~~~~~~~~~~~~
format_kate.c:100:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_ERROR("Not enough header packets");
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
format_kate.c:163:21: error: assigning to 'void *' from incompatible type '_Ptr<kate_codec_t>' (aka '_Ptr<struct _kate_codec_tag>')
    codec->specific = kate_codec;
                    ^ ~~~~~~~~~~
format_kate.c:141:35: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    _Ptr<ogg_state_t> ogg_info =  plugin->_state;
                                  ^~~~~~~~~~~~~~
format_kate.c:152:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_DEBUG("checking for kate codec");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
format_kate.c:162:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_INFO("seen initial kate header");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:50:33: note: expanded from macro 'ICECAST_LOG_INFO'
#define ICECAST_LOG_INFO(...)   ICECAST_LOG(ICECAST_LOGLEVEL_INFO,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
1 warning and 13 errors generated.
make[3]: [icecast-format_kate.o] Error 1 (ignored)
In file included from format_skeleton.c:26:
In file included from ./format_ogg.h:24:
In file included from ./format.h:25:
In file included from ./client.h:23:
./common/httpp/encoding.h:61:117: error: expected ')'
ssize_t httpp_encoding_read(_Ptr<httpp_encoding_t> self, void* buf, size_t len, ssize_t (*)(void *, void *, size_t) cb : itype(_Ptr<ssize_t (void* , void* , size_t )> ) , void* userdata);
                                                                                                                    ^
./common/httpp/encoding.h:61:28: note: to match this '('
ssize_t httpp_encoding_read(_Ptr<httpp_encoding_t> self, void* buf, size_t len, ssize_t (*)(void *, void *, size_t) cb : itype(_Ptr<ssize_t (void* , void* , size_t )> ) , void* userdata);
                           ^
./common/httpp/encoding.h:66:69: error: expected ')'
int httpp_encoding_eof(_Ptr<httpp_encoding_t> self, int (*)(void *) cb : itype(_Ptr<int (void* )> ) , void* userdata);
                                                                    ^
./common/httpp/encoding.h:66:23: note: to match this '('
int httpp_encoding_eof(_Ptr<httpp_encoding_t> self, int (*)(void *) cb : itype(_Ptr<int (void* )> ) , void* userdata);
                      ^
In file included from format_skeleton.c:26:
In file included from ./format_ogg.h:24:
In file included from ./format.h:25:
In file included from ./client.h:28:
In file included from ./module.h:15:
./refobject.h:155:67: warning: declaration of 'struct __va_list_tag' will not be visible outside of this function [-Wvisibility]
    _Ptr<int (refobject_t , _Ptr<const refobject_type_t> , struct __va_list_tag* )> type_newcb;
                                                                  ^
In file included from format_skeleton.c:26:
In file included from ./format_ogg.h:24:
In file included from ./format.h:25:
./client.h:154:91: error: 'type name' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
int client_send_bytes(client_t *client : itype(_Ptr<client_t> ) , const void *buf : itype(_Nt_array_ptr<const void> ) , unsigned int len);
                                                                                          ^
./client.h:155:85: error: 'type name' declared as _Nt_array_ptr of type 'void'; only integer and pointer types are allowed
int client_read_bytes(client_t *client : itype(_Ptr<client_t> ) , void *buf : itype(_Nt_array_ptr<void> ) , unsigned int len);
                                                                                    ^
./client.h:157:88: error: 'type name' declared as _Nt_array_ptr of type 'void'; only integer and pointer types are allowed
ssize_t client_body_read(client_t *client : itype(_Ptr<client_t> ) , void *buf : itype(_Nt_array_ptr<void> ) , size_t len);
                                                                                       ^
format_skeleton.c:37:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_DEBUG("freeing skeleton codec");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
format_skeleton.c:72:35: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    _Ptr<ogg_state_t> ogg_info =  plugin->_state;
                                  ^~~~~~~~~~~~~~
format_skeleton.c:81:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_DEBUG("checking for skeleton codec");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
format_skeleton.c:90:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_INFO("seen initial skeleton header");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:50:33: note: expanded from macro 'ICECAST_LOG_INFO'
#define ICECAST_LOG_INFO(...)   ICECAST_LOG(ICECAST_LOGLEVEL_INFO,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
1 warning and 9 errors generated.
make[3]: [icecast-format_skeleton.o] Error 1 (ignored)
In file included from format_opus.c:24:
In file included from ./format_opus.h:17:
In file included from ./format_ogg.h:24:
In file included from ./format.h:25:
In file included from ./client.h:23:
./common/httpp/encoding.h:61:117: error: expected ')'
ssize_t httpp_encoding_read(_Ptr<httpp_encoding_t> self, void* buf, size_t len, ssize_t (*)(void *, void *, size_t) cb : itype(_Ptr<ssize_t (void* , void* , size_t )> ) , void* userdata);
                                                                                                                    ^
./common/httpp/encoding.h:61:28: note: to match this '('
ssize_t httpp_encoding_read(_Ptr<httpp_encoding_t> self, void* buf, size_t len, ssize_t (*)(void *, void *, size_t) cb : itype(_Ptr<ssize_t (void* , void* , size_t )> ) , void* userdata);
                           ^
./common/httpp/encoding.h:66:69: error: expected ')'
int httpp_encoding_eof(_Ptr<httpp_encoding_t> self, int (*)(void *) cb : itype(_Ptr<int (void* )> ) , void* userdata);
                                                                    ^
./common/httpp/encoding.h:66:23: note: to match this '('
int httpp_encoding_eof(_Ptr<httpp_encoding_t> self, int (*)(void *) cb : itype(_Ptr<int (void* )> ) , void* userdata);
                      ^
In file included from format_opus.c:24:
In file included from ./format_opus.h:17:
In file included from ./format_ogg.h:24:
In file included from ./format.h:25:
In file included from ./client.h:28:
In file included from ./module.h:15:
./refobject.h:155:67: warning: declaration of 'struct __va_list_tag' will not be visible outside of this function [-Wvisibility]
    _Ptr<int (refobject_t , _Ptr<const refobject_type_t> , struct __va_list_tag* )> type_newcb;
                                                                  ^
In file included from format_opus.c:24:
In file included from ./format_opus.h:17:
In file included from ./format_ogg.h:24:
In file included from ./format.h:25:
./client.h:154:91: error: 'type name' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
int client_send_bytes(client_t *client : itype(_Ptr<client_t> ) , const void *buf : itype(_Nt_array_ptr<const void> ) , unsigned int len);
                                                                                          ^
./client.h:155:85: error: 'type name' declared as _Nt_array_ptr of type 'void'; only integer and pointer types are allowed
int client_read_bytes(client_t *client : itype(_Ptr<client_t> ) , void *buf : itype(_Nt_array_ptr<void> ) , unsigned int len);
                                                                                    ^
./client.h:157:88: error: 'type name' declared as _Nt_array_ptr of type 'void'; only integer and pointer types are allowed
ssize_t client_body_read(client_t *client : itype(_Ptr<client_t> ) , void *buf : itype(_Nt_array_ptr<void> ) , size_t len);
                                                                                       ^
format_opus.c:43:12: error: expression has unknown bounds
    ret += in[3];
           ^~~~~
format_opus.c:45:12: error: expression has unknown bounds
    ret += in[2];
           ^~~~~
format_opus.c:47:12: error: expression has unknown bounds
    ret += in[1];
           ^~~~~
format_opus.c:49:12: error: expression has unknown bounds
    ret += in[0];
           ^~~~~
format_opus.c:61:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_WARN("Bad Opus header: bad header version, expected major 0, got %i", (int)packet->packet[8]);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
format_opus.c:56:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_WARN("Bad Opus header: header too small, expected at least 19 byte, got %li", (long int)packet->bytes);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
format_opus.c:85:7: error: arithmetic on a pointer to void
    p += 8;
    ~ ^
format_opus.c:90:7: error: arithmetic on a pointer to void
    p += 4;
    ~ ^
format_opus.c:97:7: error: arithmetic on a pointer to void
    p += next;
    ~ ^
format_opus.c:102:7: error: arithmetic on a pointer to void
    p += 4;
    ~ ^
format_opus.c:116:11: error: arithmetic on a pointer to void
        p += 4;
        ~ ^
format_opus.c:142:11: error: arithmetic on a pointer to void
        p += next;
        ~ ^
format_opus.c:137:25: error: argument has unknown bounds, bounds expected because the 2nd parameter has bounds
            memcpy(buf, p, next);
                        ^
format_opus.c:151:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_WARN("Bad Opus header: corrupted OpusTags header.");
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
format_opus.c:124:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_WARN("Bad Opus header: corrupted OpusTags header.");
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
format_opus.c:107:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_WARN("Bad Opus header: corrupted OpusTags header.");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
format_opus.c:94:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_WARN("Bad Opus header: corrupted OpusTags header.");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
format_opus.c:80:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_WARN("Bad Opus header: header too small, expected at least 16 byte, got %li", (long int)packet->bytes);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
format_opus.c:164:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_DEBUG("Got Opus header");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
format_opus.c:177:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_DEBUG("Unknown header or data.");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
format_opus.c:174:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_DEBUG("Got Opus header: OpusTags");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
format_opus.c:171:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_DEBUG("Got Opus header: OpusHead");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
format_opus.c:166:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_DEBUG("Not a real header, less than 8 bytes in size.");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
format_opus.c:208:35: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    _Ptr<ogg_state_t> ogg_info =  plugin->_state;
                                  ^~~~~~~~~~~~~~
format_opus.c:217:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_DEBUG("checking for opus codec");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
format_opus.c:225:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_INFO("seen initial opus header");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:50:33: note: expanded from macro 'ICECAST_LOG_INFO'
#define ICECAST_LOG_INFO(...)   ICECAST_LOG(ICECAST_LOGLEVEL_INFO,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
1 warning and 31 errors generated.
make[3]: [icecast-format_opus.o] Error 1 (ignored)
In file included from event.c:21:
In file included from ./fastevent.h:18:
./refobject.h:155:67: warning: declaration of 'struct __va_list_tag' will not be visible outside of this function [-Wvisibility]
    _Ptr<int (refobject_t , _Ptr<const refobject_type_t> , struct __va_list_tag* )> type_newcb;
                                                                  ^
In file included from event.c:21:
./fastevent.h:57:153: warning: declaration of 'struct __va_list_tag' will not be visible outside of this function [-Wvisibility]
refobject_t fastevent_register(fastevent_type_t type, _Ptr<void (_Ptr<const void> , fastevent_type_t , fastevent_flag_t , fastevent_datatype_t , struct __va_list_tag* )> cb, _Ptr<void (void** )> freecb, void* userdata);
                                                                                                                                                        ^
In file included from event.c:24:
./connection.h:58:36: error: 'type name' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
    _Ptr<int (_Ptr<connection_t> , _Nt_array_ptr<const void> , size_t )> send;
                                   ^
./connection.h:81:55: error: 'buf' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
ssize_t connection_send_bytes(_Ptr<connection_t> con, _Nt_array_ptr<const void> buf, size_t len);
                                                      ^
In file included from event.c:25:
In file included from ./client.h:23:
./common/httpp/encoding.h:61:117: error: expected ')'
ssize_t httpp_encoding_read(_Ptr<httpp_encoding_t> self, void* buf, size_t len, ssize_t (*)(void *, void *, size_t) cb : itype(_Ptr<ssize_t (void* , void* , size_t )> ) , void* userdata);
                                                                                                                    ^
./common/httpp/encoding.h:61:28: note: to match this '('
ssize_t httpp_encoding_read(_Ptr<httpp_encoding_t> self, void* buf, size_t len, ssize_t (*)(void *, void *, size_t) cb : itype(_Ptr<ssize_t (void* , void* , size_t )> ) , void* userdata);
                           ^
./common/httpp/encoding.h:66:69: error: expected ')'
int httpp_encoding_eof(_Ptr<httpp_encoding_t> self, int (*)(void *) cb : itype(_Ptr<int (void* )> ) , void* userdata);
                                                                    ^
./common/httpp/encoding.h:66:23: note: to match this '('
int httpp_encoding_eof(_Ptr<httpp_encoding_t> self, int (*)(void *) cb : itype(_Ptr<int (void* )> ) , void* userdata);
                      ^
In file included from event.c:25:
./client.h:154:91: error: 'type name' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
int client_send_bytes(client_t *client : itype(_Ptr<client_t> ) , const void *buf : itype(_Nt_array_ptr<const void> ) , unsigned int len);
                                                                                          ^
./client.h:155:85: error: 'type name' declared as _Nt_array_ptr of type 'void'; only integer and pointer types are allowed
int client_read_bytes(client_t *client : itype(_Ptr<client_t> ) , void *buf : itype(_Nt_array_ptr<void> ) , unsigned int len);
                                                                                    ^
./client.h:157:88: error: 'type name' declared as _Nt_array_ptr of type 'void'; only integer and pointer types are allowed
ssize_t client_body_read(client_t *client : itype(_Ptr<client_t> ) , void *buf : itype(_Nt_array_ptr<void> ) , size_t len);
                                                                                       ^
event.c:87:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("Can not push event %p into queue. Queue is full.", event);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
event.c:107:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_ERROR("Can not push reglist %p into event %p. No space left on event.", reglist, event);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
event.c:179:25: error: assigning to 'event_t *' (aka 'struct event_tag *') from incompatible type '_Ptr<event_t>' (aka '_Ptr<struct event_tag>')
            event_queue = event_queue->next;
                        ^ ~~~~~~~~~~~~~~~~~
event.c:178:21: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            event = event_queue;
                    ^~~~~~~~~~~
event.c:231:27: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    event_queue_to_free = event_queue;
                          ^~~~~~~~~~~
event.c:265:28: error: passing '_Ptr<event_registration_t>' (aka '_Ptr<struct event_registration_tag>') to parameter of incompatible type 'event_registration_t *' (aka 'struct event_registration_tag *')
        rv = event_get_log(ret, options);
                           ^~~
./event_log.h:12:41: note: passing argument to parameter 'er' here
int event_get_log(event_registration_t *er, config_options_t *options);
                                        ^
event.c:273:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("Unknown Event backend %s.", ret->type);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
event.c:279:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("Can not set up event backend %s for trigger %s", ret->type, ret->trigger);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
event.c:258:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("Event node isn't complete. Type or Trigger missing.");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
event.c:357:16: error: passing 'event_t **' (aka 'struct event_tag **') to parameter of incompatible type '_Ptr<_Ptr<event_t>>' (aka '_Ptr<_Ptr<struct event_tag>>')
    event_push(&event_queue, event);
               ^~~~~~~~~~~~
event.c:75:44: note: passing argument to parameter 'event' here
static void event_push(_Ptr<_Ptr<event_t>> event, _Ptr<event_t> next) {
                                           ^
event.c:411:13: error: assigning to '_Nt_array_ptr<const char>' from incompatible type 'const char *'
        tmp = httpp_getvar(client->parser, "user-agent");
            ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
event.c:370:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("Can not create event.");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
2 warnings and 19 errors generated.
make[3]: [icecast-event.o] Error 1 (ignored)
event_log.c:28:31: error: cast source bounds are too narrow for '_Ptr<event_log_t>' (aka '_Ptr<struct event_log>')
    _Ptr<event_log_t> self =  state;
                              ^~~~~
event_log.c:28:31: note: target upper bound is above source upper bound
event_log.c:28:31: note: (expanded) required bounds are 'bounds((_Array_ptr<event_log_t>)state, (_Array_ptr<event_log_t>)state + 1)'
event_log.c:28:31: note: (expanded) inferred bounds are 'bounds((_Array_ptr<char>)state, (_Array_ptr<char>)state + 1)'
event_log.c:30:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG(self->level, ICECAST_LOGFLAG_NONE,
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
event_log.c:74:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_ERROR("Unknown <option> tag with name %s.", options->name);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
3 errors generated.
make[3]: [icecast-event_log.o] Error 1 (ignored)
In file included from event_exec.c:25:
In file included from ./source.h:25:
In file included from ./format.h:25:
In file included from ./client.h:23:
./common/httpp/encoding.h:61:117: error: expected ')'
ssize_t httpp_encoding_read(_Ptr<httpp_encoding_t> self, void* buf, size_t len, ssize_t (*)(void *, void *, size_t) cb : itype(_Ptr<ssize_t (void* , void* , size_t )> ) , void* userdata);
                                                                                                                    ^
./common/httpp/encoding.h:61:28: note: to match this '('
ssize_t httpp_encoding_read(_Ptr<httpp_encoding_t> self, void* buf, size_t len, ssize_t (*)(void *, void *, size_t) cb : itype(_Ptr<ssize_t (void* , void* , size_t )> ) , void* userdata);
                           ^
./common/httpp/encoding.h:66:69: error: expected ')'
int httpp_encoding_eof(_Ptr<httpp_encoding_t> self, int (*)(void *) cb : itype(_Ptr<int (void* )> ) , void* userdata);
                                                                    ^
./common/httpp/encoding.h:66:23: note: to match this '('
int httpp_encoding_eof(_Ptr<httpp_encoding_t> self, int (*)(void *) cb : itype(_Ptr<int (void* )> ) , void* userdata);
                      ^
In file included from event_exec.c:25:
In file included from ./source.h:25:
In file included from ./format.h:25:
In file included from ./client.h:28:
In file included from ./module.h:15:
./refobject.h:155:67: warning: declaration of 'struct __va_list_tag' will not be visible outside of this function [-Wvisibility]
    _Ptr<int (refobject_t , _Ptr<const refobject_type_t> , struct __va_list_tag* )> type_newcb;
                                                                  ^
In file included from event_exec.c:25:
In file included from ./source.h:25:
In file included from ./format.h:25:
./client.h:154:91: error: 'type name' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
int client_send_bytes(client_t *client : itype(_Ptr<client_t> ) , const void *buf : itype(_Nt_array_ptr<const void> ) , unsigned int len);
                                                                                          ^
./client.h:155:85: error: 'type name' declared as _Nt_array_ptr of type 'void'; only integer and pointer types are allowed
int client_read_bytes(client_t *client : itype(_Ptr<client_t> ) , void *buf : itype(_Nt_array_ptr<void> ) , unsigned int len);
                                                                                    ^
./client.h:157:88: error: 'type name' declared as _Nt_array_ptr of type 'void'; only integer and pointer types are allowed
ssize_t client_body_read(client_t *client : itype(_Ptr<client_t> ) , void *buf : itype(_Nt_array_ptr<void> ) , size_t len);
                                                                                       ^
event_exec.c:76:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("Unknown argument type %s, using \"default\"", str);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
event_exec.c:212:21: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                    ICECAST_LOG_ERROR("Unable to fork %s (%s)", self->executable, strerror (errno));
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
event_exec.c:219:21: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                    ICECAST_LOG_DEBUG("Starting command %s", self->executable);
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
event_exec.c:216:25: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                        ICECAST_LOG_ERROR("Unable to run command %s (%s)", self->executable, strerror(errno));
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
event_exec.c:228:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_ERROR("Unable to fork %s", strerror (errno));
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
event_exec.c:238:32: error: cast source bounds are too narrow for '_Ptr<event_exec_t>' (aka '_Ptr<struct event_exec>')
    _Ptr<event_exec_t> self =  state;
                               ^~~~~
event_exec.c:238:32: note: target upper bound is above source upper bound
event_exec.c:238:32: note: (expanded) required bounds are 'bounds((_Array_ptr<event_exec_t>)state, (_Array_ptr<event_exec_t>)state + 1)'
event_exec.c:238:32: note: (expanded) inferred bounds are 'bounds((_Array_ptr<char>)state, (_Array_ptr<char>)state + 1)'
event_exec.c:288:21: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                    ICECAST_LOG_ERROR("Unknown <option> tag with type %s.", cur->type);
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
event_exec.c:282:21: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                    ICECAST_LOG_ERROR("Unknown <option> tag with name %s.", cur->name);
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
event_exec.c:326:21: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                    ICECAST_LOG_ERROR("Unknown <option> tag with type %s.", cur->type);
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
event_exec.c:319:29: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                            ICECAST_LOG_ERROR("Can not allocate argv[x]");
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
event_exec.c:302:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("Can not allocate argv[]");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
event_exec.c:295:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("No executable given.");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
1 warning and 17 errors generated.
make[3]: [icecast-event_exec.o] Error 1 (ignored)
acl.c:34:5: error: declaration of anonymous struct must be a definition
    struct (anonymous struct at acl.c:34:5) admin_commands[32];
    ^
acl.c:34:63: error: type name requires a specifier or qualifier
    struct (anonymous struct at acl.c:34:5) admin_commands[32];
                                                              ^
acl.c:54:17: error: expression has unknown bounds
 for (p = *str; *p == ' '; p++);
                ^~
acl.c:69:23: error: passing 'const char **' to parameter of incompatible type '_Ptr<_Array_ptr<const char>>'
        __skip_spaces(&str);
                      ^~~~
acl.c:50:56: note: passing argument to parameter 'str' here
static void __skip_spaces(_Ptr<_Array_ptr<const char>> str)
                                                       ^
acl.c:70:13: error: assigning to '_Nt_array_ptr<const char>' from incompatible type 'char *'
        end = strstr(str, ",");
            ^ ~~~~~~~~~~~~~~~~
acl.c:101:5: error: passing 'int (_Ptr<acl_t>, acl_policy_t, const char *)' (aka 'int (_Ptr<struct acl_tag>, enum acl_policy_tag, const char *)') to parameter of incompatible type '_Ptr<int (_Ptr<acl_t>, acl_policy_t, _Array_ptr<const char>)>' (aka '_Ptr<int (_Ptr<struct acl_tag>, enum acl_policy_tag, _Array_ptr<const char>)>'): type mismatch at 3rd parameter ('const char *' vs '_Array_ptr<const char>')
    acl_set_method_str(ret, ACL_POLICY_DENY, "*");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./acl.h:46:84: note: expanded from macro 'acl_set_method_str'
#define acl_set_method_str(acl,policy,str) acl_set_ANY_str((acl), (policy), (str), acl_set_method_str__callback)
                                                                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
acl.c:58:178: note: passing argument to parameter 'callback' here
int acl_set_ANY_str(_Ptr<acl_t> acl, acl_policy_t policy, const char *str : itype(_Nt_array_ptr<const char> ) , _Ptr<int (_Ptr<acl_t> , acl_policy_t , _Array_ptr<const char> )> callback)
                                                                                                                                                                                 ^
acl.c:102:5: error: passing 'int (_Ptr<acl_t>, acl_policy_t, const char *)' (aka 'int (_Ptr<struct acl_tag>, enum acl_policy_tag, const char *)') to parameter of incompatible type '_Ptr<int (_Ptr<acl_t>, acl_policy_t, _Array_ptr<const char>)>' (aka '_Ptr<int (_Ptr<struct acl_tag>, enum acl_policy_tag, _Array_ptr<const char>)>'): type mismatch at 3rd parameter ('const char *' vs '_Array_ptr<const char>')
    acl_set_method_str(ret, ACL_POLICY_ALLOW, "get,options");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./acl.h:46:84: note: expanded from macro 'acl_set_method_str'
#define acl_set_method_str(acl,policy,str) acl_set_ANY_str((acl), (policy), (str), acl_set_method_str__callback)
                                                                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
acl.c:58:178: note: passing argument to parameter 'callback' here
int acl_set_ANY_str(_Ptr<acl_t> acl, acl_policy_t policy, const char *str : itype(_Nt_array_ptr<const char> ) , _Ptr<int (_Ptr<acl_t> , acl_policy_t , _Array_ptr<const char> )> callback)
                                                                                                                                                                                 ^
acl.c:104:5: error: passing 'int (_Ptr<acl_t>, acl_policy_t, _Nt_array_ptr<const char> : count(0))' (aka 'int (_Ptr<struct acl_tag>, enum acl_policy_tag, _Nt_array_ptr<const char> : count(0))') to parameter of incompatible type '_Ptr<int (_Ptr<acl_t>, acl_policy_t, _Array_ptr<const char>)>' (aka '_Ptr<int (_Ptr<struct acl_tag>, enum acl_policy_tag, _Array_ptr<const char>)>'): type mismatch at 3rd parameter ('_Nt_array_ptr<const char>' vs '_Array_ptr<const char>')
    acl_set_admin_str(ret, ACL_POLICY_DENY, "*");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./acl.h:51:83: note: expanded from macro 'acl_set_admin_str'
#define acl_set_admin_str(acl,policy,str) acl_set_ANY_str((acl), (policy), (str), acl_set_admin_str__callbck)
                                                                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~
acl.c:58:178: note: passing argument to parameter 'callback' here
int acl_set_ANY_str(_Ptr<acl_t> acl, acl_policy_t policy, const char *str : itype(_Nt_array_ptr<const char> ) , _Ptr<int (_Ptr<acl_t> , acl_policy_t , _Array_ptr<const char> )> callback)
                                                                                                                                                                                 ^
acl.c:105:5: error: passing 'int (_Ptr<acl_t>, acl_policy_t, _Nt_array_ptr<const char> : count(0))' (aka 'int (_Ptr<struct acl_tag>, enum acl_policy_tag, _Nt_array_ptr<const char> : count(0))') to parameter of incompatible type '_Ptr<int (_Ptr<acl_t>, acl_policy_t, _Array_ptr<const char>)>' (aka '_Ptr<int (_Ptr<struct acl_tag>, enum acl_policy_tag, _Array_ptr<const char>)>'): type mismatch at 3rd parameter ('_Nt_array_ptr<const char>' vs '_Array_ptr<const char>')
    acl_set_admin_str(ret, ACL_POLICY_ALLOW, "buildm3u");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./acl.h:51:83: note: expanded from macro 'acl_set_admin_str'
#define acl_set_admin_str(acl,policy,str) acl_set_ANY_str((acl), (policy), (str), acl_set_admin_str__callbck)
                                                                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~
acl.c:58:178: note: passing argument to parameter 'callback' here
int acl_set_ANY_str(_Ptr<acl_t> acl, acl_policy_t policy, const char *str : itype(_Nt_array_ptr<const char> ) , _Ptr<int (_Ptr<acl_t> , acl_policy_t , _Array_ptr<const char> )> callback)
                                                                                                                                                                                 ^
acl.c:134:17: error: passing 'int (_Ptr<acl_t>, acl_policy_t, const char *)' (aka 'int (_Ptr<struct acl_tag>, enum acl_policy_tag, const char *)') to parameter of incompatible type '_Ptr<int (_Ptr<acl_t>, acl_policy_t, _Array_ptr<const char>)>' (aka '_Ptr<int (_Ptr<struct acl_tag>, enum acl_policy_tag, _Array_ptr<const char>)>'): type mismatch at 3rd parameter ('const char *' vs '_Array_ptr<const char>')
                acl_set_method_str(ret, ACL_POLICY_ALLOW, tmp);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./acl.h:46:84: note: expanded from macro 'acl_set_method_str'
#define acl_set_method_str(acl,policy,str) acl_set_ANY_str((acl), (policy), (str), acl_set_method_str__callback)
                                                                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
acl.c:58:178: note: passing argument to parameter 'callback' here
int acl_set_ANY_str(_Ptr<acl_t> acl, acl_policy_t policy, const char *str : itype(_Nt_array_ptr<const char> ) , _Ptr<int (_Ptr<acl_t> , acl_policy_t , _Array_ptr<const char> )> callback)
                                                                                                                                                                                 ^
acl.c:136:17: error: passing 'int (_Ptr<acl_t>, acl_policy_t, const char *)' (aka 'int (_Ptr<struct acl_tag>, enum acl_policy_tag, const char *)') to parameter of incompatible type '_Ptr<int (_Ptr<acl_t>, acl_policy_t, _Array_ptr<const char>)>' (aka '_Ptr<int (_Ptr<struct acl_tag>, enum acl_policy_tag, _Array_ptr<const char>)>'): type mismatch at 3rd parameter ('const char *' vs '_Array_ptr<const char>')
                acl_set_method_str(ret, ACL_POLICY_DENY, tmp);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./acl.h:46:84: note: expanded from macro 'acl_set_method_str'
#define acl_set_method_str(acl,policy,str) acl_set_ANY_str((acl), (policy), (str), acl_set_method_str__callback)
                                                                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
acl.c:58:178: note: passing argument to parameter 'callback' here
int acl_set_ANY_str(_Ptr<acl_t> acl, acl_policy_t policy, const char *str : itype(_Nt_array_ptr<const char> ) , _Ptr<int (_Ptr<acl_t> , acl_policy_t , _Array_ptr<const char> )> callback)
                                                                                                                                                                                 ^
acl.c:138:17: error: passing 'int (_Ptr<acl_t>, acl_policy_t, _Nt_array_ptr<const char> : count(0))' (aka 'int (_Ptr<struct acl_tag>, enum acl_policy_tag, _Nt_array_ptr<const char> : count(0))') to parameter of incompatible type '_Ptr<int (_Ptr<acl_t>, acl_policy_t, _Array_ptr<const char>)>' (aka '_Ptr<int (_Ptr<struct acl_tag>, enum acl_policy_tag, _Array_ptr<const char>)>'): type mismatch at 3rd parameter ('_Nt_array_ptr<const char>' vs '_Array_ptr<const char>')
                acl_set_admin_str(ret, ACL_POLICY_ALLOW, tmp);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./acl.h:51:83: note: expanded from macro 'acl_set_admin_str'
#define acl_set_admin_str(acl,policy,str) acl_set_ANY_str((acl), (policy), (str), acl_set_admin_str__callbck)
                                                                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~
acl.c:58:178: note: passing argument to parameter 'callback' here
int acl_set_ANY_str(_Ptr<acl_t> acl, acl_policy_t policy, const char *str : itype(_Nt_array_ptr<const char> ) , _Ptr<int (_Ptr<acl_t> , acl_policy_t , _Array_ptr<const char> )> callback)
                                                                                                                                                                                 ^
acl.c:140:17: error: passing 'int (_Ptr<acl_t>, acl_policy_t, _Nt_array_ptr<const char> : count(0))' (aka 'int (_Ptr<struct acl_tag>, enum acl_policy_tag, _Nt_array_ptr<const char> : count(0))') to parameter of incompatible type '_Ptr<int (_Ptr<acl_t>, acl_policy_t, _Array_ptr<const char>)>' (aka '_Ptr<int (_Ptr<struct acl_tag>, enum acl_policy_tag, _Array_ptr<const char>)>'): type mismatch at 3rd parameter ('_Nt_array_ptr<const char>' vs '_Array_ptr<const char>')
                acl_set_admin_str(ret, ACL_POLICY_DENY, tmp);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./acl.h:51:83: note: expanded from macro 'acl_set_admin_str'
#define acl_set_admin_str(acl,policy,str) acl_set_ANY_str((acl), (policy), (str), acl_set_admin_str__callbck)
                                                                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~
acl.c:58:178: note: passing argument to parameter 'callback' here
int acl_set_ANY_str(_Ptr<acl_t> acl, acl_policy_t policy, const char *str : itype(_Nt_array_ptr<const char> ) , _Ptr<int (_Ptr<acl_t> , acl_policy_t , _Array_ptr<const char> )> callback)
                                                                                                                                                                                 ^
acl.c:157:21: error: passing 'int (_Ptr<acl_t>, acl_policy_t, const char *)' (aka 'int (_Ptr<struct acl_tag>, enum acl_policy_tag, const char *)') to parameter of incompatible type '_Ptr<int (_Ptr<acl_t>, acl_policy_t, _Array_ptr<const char>)>' (aka '_Ptr<int (_Ptr<struct acl_tag>, enum acl_policy_tag, _Array_ptr<const char>)>'): type mismatch at 3rd parameter ('const char *' vs '_Array_ptr<const char>')
                    acl_set_method_str(ret, ACL_POLICY_ALLOW, "*");
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./acl.h:46:84: note: expanded from macro 'acl_set_method_str'
#define acl_set_method_str(acl,policy,str) acl_set_ANY_str((acl), (policy), (str), acl_set_method_str__callback)
                                                                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
acl.c:58:178: note: passing argument to parameter 'callback' here
int acl_set_ANY_str(_Ptr<acl_t> acl, acl_policy_t policy, const char *str : itype(_Nt_array_ptr<const char> ) , _Ptr<int (_Ptr<acl_t> , acl_policy_t , _Array_ptr<const char> )> callback)
                                                                                                                                                                                 ^
acl.c:158:21: error: passing 'int (_Ptr<acl_t>, acl_policy_t, _Nt_array_ptr<const char> : count(0))' (aka 'int (_Ptr<struct acl_tag>, enum acl_policy_tag, _Nt_array_ptr<const char> : count(0))') to parameter of incompatible type '_Ptr<int (_Ptr<acl_t>, acl_policy_t, _Array_ptr<const char>)>' (aka '_Ptr<int (_Ptr<struct acl_tag>, enum acl_policy_tag, _Array_ptr<const char>)>'): type mismatch at 3rd parameter ('_Nt_array_ptr<const char>' vs '_Array_ptr<const char>')
                    acl_set_admin_str(ret,  ACL_POLICY_ALLOW, "*");
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./acl.h:51:83: note: expanded from macro 'acl_set_admin_str'
#define acl_set_admin_str(acl,policy,str) acl_set_ANY_str((acl), (policy), (str), acl_set_admin_str__callbck)
                                                                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~
acl.c:58:178: note: passing argument to parameter 'callback' here
int acl_set_ANY_str(_Ptr<acl_t> acl, acl_policy_t policy, const char *str : itype(_Nt_array_ptr<const char> ) , _Ptr<int (_Ptr<acl_t> , acl_policy_t , _Array_ptr<const char> )> callback)
                                                                                                                                                                                 ^
acl.c:161:21: error: passing 'int (_Ptr<acl_t>, acl_policy_t, const char *)' (aka 'int (_Ptr<struct acl_tag>, enum acl_policy_tag, const char *)') to parameter of incompatible type '_Ptr<int (_Ptr<acl_t>, acl_policy_t, _Array_ptr<const char>)>' (aka '_Ptr<int (_Ptr<struct acl_tag>, enum acl_policy_tag, _Array_ptr<const char>)>'): type mismatch at 3rd parameter ('const char *' vs '_Array_ptr<const char>')
                    acl_set_method_str(ret, ACL_POLICY_DENY, "*");
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./acl.h:46:84: note: expanded from macro 'acl_set_method_str'
#define acl_set_method_str(acl,policy,str) acl_set_ANY_str((acl), (policy), (str), acl_set_method_str__callback)
                                                                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
acl.c:58:178: note: passing argument to parameter 'callback' here
int acl_set_ANY_str(_Ptr<acl_t> acl, acl_policy_t policy, const char *str : itype(_Nt_array_ptr<const char> ) , _Ptr<int (_Ptr<acl_t> , acl_policy_t , _Array_ptr<const char> )> callback)
                                                                                                                                                                                 ^
acl.c:162:21: error: passing 'int (_Ptr<acl_t>, acl_policy_t, _Nt_array_ptr<const char> : count(0))' (aka 'int (_Ptr<struct acl_tag>, enum acl_policy_tag, _Nt_array_ptr<const char> : count(0))') to parameter of incompatible type '_Ptr<int (_Ptr<acl_t>, acl_policy_t, _Array_ptr<const char>)>' (aka '_Ptr<int (_Ptr<struct acl_tag>, enum acl_policy_tag, _Array_ptr<const char>)>'): type mismatch at 3rd parameter ('_Nt_array_ptr<const char>' vs '_Array_ptr<const char>')
                    acl_set_admin_str(ret,  ACL_POLICY_DENY, "*");
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./acl.h:51:83: note: expanded from macro 'acl_set_admin_str'
#define acl_set_admin_str(acl,policy,str) acl_set_ANY_str((acl), (policy), (str), acl_set_admin_str__callbck)
                                                                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~
acl.c:58:178: note: passing argument to parameter 'callback' here
int acl_set_ANY_str(_Ptr<acl_t> acl, acl_policy_t policy, const char *str : itype(_Nt_array_ptr<const char> ) , _Ptr<int (_Ptr<acl_t> , acl_policy_t , _Array_ptr<const char> )> callback)
                                                                                                                                                                                 ^
acl.c:167:21: error: passing 'int (_Ptr<acl_t>, acl_policy_t, const char *)' (aka 'int (_Ptr<struct acl_tag>, enum acl_policy_tag, const char *)') to parameter of incompatible type '_Ptr<int (_Ptr<acl_t>, acl_policy_t, _Array_ptr<const char>)>' (aka '_Ptr<int (_Ptr<struct acl_tag>, enum acl_policy_tag, _Array_ptr<const char>)>'): type mismatch at 3rd parameter ('const char *' vs '_Array_ptr<const char>')
                    acl_set_method_str(ret, ACL_POLICY_DENY, "*");
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./acl.h:46:84: note: expanded from macro 'acl_set_method_str'
#define acl_set_method_str(acl,policy,str) acl_set_ANY_str((acl), (policy), (str), acl_set_method_str__callback)
                                                                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
acl.c:58:178: note: passing argument to parameter 'callback' here
int acl_set_ANY_str(_Ptr<acl_t> acl, acl_policy_t policy, const char *str : itype(_Nt_array_ptr<const char> ) , _Ptr<int (_Ptr<acl_t> , acl_policy_t , _Array_ptr<const char> )> callback)
                                                                                                                                                                                 ^
acl.c:168:21: error: passing 'int (_Ptr<acl_t>, acl_policy_t, _Nt_array_ptr<const char> : count(0))' (aka 'int (_Ptr<struct acl_tag>, enum acl_policy_tag, _Nt_array_ptr<const char> : count(0))') to parameter of incompatible type '_Ptr<int (_Ptr<acl_t>, acl_policy_t, _Array_ptr<const char>)>' (aka '_Ptr<int (_Ptr<struct acl_tag>, enum acl_policy_tag, _Array_ptr<const char>)>'): type mismatch at 3rd parameter ('_Nt_array_ptr<const char>' vs '_Array_ptr<const char>')
                    acl_set_admin_str(ret,  ACL_POLICY_DENY, "*");
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./acl.h:51:83: note: expanded from macro 'acl_set_admin_str'
#define acl_set_admin_str(acl,policy,str) acl_set_ANY_str((acl), (policy), (str), acl_set_admin_str__callbck)
                                                                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~
acl.c:58:178: note: passing argument to parameter 'callback' here
int acl_set_ANY_str(_Ptr<acl_t> acl, acl_policy_t policy, const char *str : itype(_Nt_array_ptr<const char> ) , _Ptr<int (_Ptr<acl_t> , acl_policy_t , _Array_ptr<const char> )> callback)
                                                                                                                                                                                 ^
acl.c:171:21: error: passing 'int (_Ptr<acl_t>, acl_policy_t, const char *)' (aka 'int (_Ptr<struct acl_tag>, enum acl_policy_tag, const char *)') to parameter of incompatible type '_Ptr<int (_Ptr<acl_t>, acl_policy_t, _Array_ptr<const char>)>' (aka '_Ptr<int (_Ptr<struct acl_tag>, enum acl_policy_tag, _Array_ptr<const char>)>'): type mismatch at 3rd parameter ('const char *' vs '_Array_ptr<const char>')
                    acl_set_method_str(ret, ACL_POLICY_ALLOW, "*");
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./acl.h:46:84: note: expanded from macro 'acl_set_method_str'
#define acl_set_method_str(acl,policy,str) acl_set_ANY_str((acl), (policy), (str), acl_set_method_str__callback)
                                                                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
acl.c:58:178: note: passing argument to parameter 'callback' here
int acl_set_ANY_str(_Ptr<acl_t> acl, acl_policy_t policy, const char *str : itype(_Nt_array_ptr<const char> ) , _Ptr<int (_Ptr<acl_t> , acl_policy_t , _Array_ptr<const char> )> callback)
                                                                                                                                                                                 ^
acl.c:172:21: error: passing 'int (_Ptr<acl_t>, acl_policy_t, _Nt_array_ptr<const char> : count(0))' (aka 'int (_Ptr<struct acl_tag>, enum acl_policy_tag, _Nt_array_ptr<const char> : count(0))') to parameter of incompatible type '_Ptr<int (_Ptr<acl_t>, acl_policy_t, _Array_ptr<const char>)>' (aka '_Ptr<int (_Ptr<struct acl_tag>, enum acl_policy_tag, _Array_ptr<const char>)>'): type mismatch at 3rd parameter ('_Nt_array_ptr<const char>' vs '_Array_ptr<const char>')
                    acl_set_admin_str(ret,  ACL_POLICY_ALLOW, "*");
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./acl.h:51:83: note: expanded from macro 'acl_set_admin_str'
#define acl_set_admin_str(acl,policy,str) acl_set_ANY_str((acl), (policy), (str), acl_set_admin_str__callbck)
                                                                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~
acl.c:58:178: note: passing argument to parameter 'callback' here
int acl_set_ANY_str(_Ptr<acl_t> acl, acl_policy_t policy, const char *str : itype(_Nt_array_ptr<const char> ) , _Ptr<int (_Ptr<acl_t> , acl_policy_t , _Array_ptr<const char> )> callback)
                                                                                                                                                                                 ^
acl.c:128:12: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    prop = node->properties;
           ^~~~~~~~~~~~~~~~
acl.c:192:16: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        prop = prop->next;
               ^~~~~~~~~~
acl.c:274:18: error: no member named 'admin_commands' in 'struct acl_tag'
        if (acl->admin_commands[read_i].policy == policy)
            ~~~  ^
acl.c:276:14: error: no member named 'admin_commands' in 'struct acl_tag'
        acl->admin_commands[write_i] = acl->admin_commands[read_i];
        ~~~  ^
acl.c:276:45: error: no member named 'admin_commands' in 'struct acl_tag'
        acl->admin_commands[write_i] = acl->admin_commands[read_i];
                                       ~~~  ^
acl.c:286:9: error: no member named 'admin_commands' in 'struct acl_tag'
   acl->admin_commands[acl->admin_commands_len].command = command;
   ~~~  ^
acl.c:287:9: error: no member named 'admin_commands' in 'struct acl_tag'
   acl->admin_commands[acl->admin_commands_len].policy  = policy;
   ~~~  ^
acl.c:300:18: error: no member named 'admin_commands' in 'struct acl_tag'
        if (acl->admin_commands[i].command == command)
            ~~~  ^
acl.c:301:25: error: no member named 'admin_commands' in 'struct acl_tag'
            return acl->admin_commands[i].policy;
                   ~~~  ^
30 errors generated.
make[3]: [icecast-acl.o] Error 1 (ignored)
In file included from auth.c:27:
./auth.h:115:5: error: declaration of anonymous struct must be a definition
    struct (anonymous struct at /home/hasantouma/plum-umd-icecast/checkedc-icecast/src/auth.h:115:5) filter_admin[32];
    ^
./auth.h:115:118: error: type name requires a specifier or qualifier
    struct (anonymous struct at /home/hasantouma/plum-umd-icecast/checkedc-icecast/src/auth.h:115:5) filter_admin[32];
                                                                                                                     ^
In file included from auth.c:28:
In file included from ./source.h:25:
In file included from ./format.h:25:
In file included from ./client.h:23:
./common/httpp/encoding.h:61:117: error: expected ')'
ssize_t httpp_encoding_read(_Ptr<httpp_encoding_t> self, void* buf, size_t len, ssize_t (*)(void *, void *, size_t) cb : itype(_Ptr<ssize_t (void* , void* , size_t )> ) , void* userdata);
                                                                                                                    ^
./common/httpp/encoding.h:61:28: note: to match this '('
ssize_t httpp_encoding_read(_Ptr<httpp_encoding_t> self, void* buf, size_t len, ssize_t (*)(void *, void *, size_t) cb : itype(_Ptr<ssize_t (void* , void* , size_t )> ) , void* userdata);
                           ^
./common/httpp/encoding.h:66:69: error: expected ')'
int httpp_encoding_eof(_Ptr<httpp_encoding_t> self, int (*)(void *) cb : itype(_Ptr<int (void* )> ) , void* userdata);
                                                                    ^
./common/httpp/encoding.h:66:23: note: to match this '('
int httpp_encoding_eof(_Ptr<httpp_encoding_t> self, int (*)(void *) cb : itype(_Ptr<int (void* )> ) , void* userdata);
                      ^
In file included from auth.c:28:
In file included from ./source.h:25:
In file included from ./format.h:25:
In file included from ./client.h:28:
In file included from ./module.h:15:
./refobject.h:155:67: warning: declaration of 'struct __va_list_tag' will not be visible outside of this function [-Wvisibility]
    _Ptr<int (refobject_t , _Ptr<const refobject_type_t> , struct __va_list_tag* )> type_newcb;
                                                                  ^
In file included from auth.c:28:
In file included from ./source.h:25:
In file included from ./format.h:25:
./client.h:154:91: error: 'type name' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
int client_send_bytes(client_t *client : itype(_Ptr<client_t> ) , const void *buf : itype(_Nt_array_ptr<const void> ) , unsigned int len);
                                                                                          ^
./client.h:155:85: error: 'type name' declared as _Nt_array_ptr of type 'void'; only integer and pointer types are allowed
int client_read_bytes(client_t *client : itype(_Ptr<client_t> ) , void *buf : itype(_Nt_array_ptr<void> ) , unsigned int len);
                                                                                    ^
./client.h:157:88: error: 'type name' declared as _Nt_array_ptr of type 'void'; only integer and pointer types are allowed
ssize_t client_body_read(client_t *client : itype(_Ptr<client_t> ) , void *buf : itype(_Nt_array_ptr<void> ) , size_t len);
                                                                                       ^
auth.c:122:16: error: assigning to '_Nt_array_ptr<const char>' from incompatible type 'const char *'
        header = httpp_getvar(client->parser, "authorization");
               ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
auth.c:128:44: error: passing '_Nt_array_ptr<const char>' to parameter of incompatible type 'const char *'
            userpass = util_base64_decode (header+6);
                                           ^~~~~~~~
./util.h:40:52: note: passing argument to parameter 'data' here
_Nt_array_ptr<char> util_base64_decode(const char *data);
                                                   ^
auth.c:135:17: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
            tmp = strchr(userpass, ':');
                ^ ~~~~~~~~~~~~~~~~~~~~~
auth.c:149:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_INFO("unhandled authorization header: %s", header);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:50:33: note: expanded from macro 'ICECAST_LOG_INFO'
#define ICECAST_LOG_INFO(...)   ICECAST_LOG(ICECAST_LOGLEVEL_INFO,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth.c:141:13: warning: out-of-bounds memory access [-Wcheck-memory-accesses]
            *tmp = 0;
            ^~~~
auth.c:141:13: note: source bounds are an empty range
auth.c:141:13: note: accesses memory at or above the upper bound
auth.c:141:13: note: (expanded) inferred bounds are 'bounds(tmp, tmp + 0)'
auth.c:143:22: warning: cannot prove declared bounds for password are valid after assignment [-Wcheck-bounds-decls-unchecked-scope]
            password = tmp+1;
            ~~~~~~~~ ^ ~~~~~
auth.c:143:13: note: (expanded) declared bounds are 'bounds(password, password + 0)'
            password = tmp+1;
            ^
auth.c:143:27: note: (expanded) inferred bounds are 'bounds(tmp, tmp + 0)'
            password = tmp+1;
                       ~~~^~
auth.c:130:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_WARN("Base64 decode of Authorization header \"%s\" failed",
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth.c:179:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_INFO("auth on %s has %d pending", auth->mount, auth->pending_count);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:50:33: note: expanded from macro 'ICECAST_LOG_INFO'
#define ICECAST_LOG_INFO(...)   ICECAST_LOG(ICECAST_LOGLEVEL_INFO,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth.c:167:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_WARN("internal state is incorrect for %p", auth_user->client);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth.c:276:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_DEBUG("client is no longer connected");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth.c:361:57: error: passing 'const char *' to parameter of incompatible type '_Nt_array_ptr<const char>'
        client_send_redirect(client, uuid, http_status, location);
                                                        ^~~~~~~~
auth.c:325:115: note: passing argument to parameter 'location' here
    void client_send_redirect(_Ptr<client_t> client, _Ptr<const char> uuid, int status, _Nt_array_ptr<const char> location);
                                                                                                                  ^
auth.c:373:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("client auth process not set");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth.c:377:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_DEBUG("client %p on auth %p role %s processed: %s", auth_user->client, auth, auth->role, auth_result2str(result));
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth.c:404:26: error: cast source bounds are too narrow for '_Ptr<auth_t>' (aka '_Ptr<struct auth_tag>')
    _Ptr<auth_t> auth =  arg;
                         ^~~
auth.c:404:26: note: target upper bound is above source upper bound
auth.c:404:26: note: (expanded) required bounds are 'bounds((_Array_ptr<auth_t>)arg, (_Array_ptr<auth_t>)arg + 1)'
auth.c:404:26: note: (expanded) inferred bounds are 'bounds((_Array_ptr<char>)arg, (_Array_ptr<char>)arg + 1)'
auth.c:406:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_INFO("Authentication thread started");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:50:33: note: expanded from macro 'ICECAST_LOG_INFO'
#define ICECAST_LOG_INFO(...)   ICECAST_LOG(ICECAST_LOGLEVEL_INFO,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth.c:441:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_INFO("Authentication thread shutting down");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:50:33: note: expanded from macro 'ICECAST_LOG_INFO'
#define ICECAST_LOG_INFO(...)   ICECAST_LOG(ICECAST_LOGLEVEL_INFO,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth.c:477:12: error: assigning to '_Nt_array_ptr<const char>' from incompatible type 'const char *'
    origin = httpp_getvar(client->parser, "origin");
           ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
auth.c:506:39: error: no member named 'filter_admin' in 'struct auth_tag'; did you mean 'filter_origin'?
        for (i = 0; i < (sizeof(auth->filter_admin)/sizeof(*(auth->filter_admin))); i++) {
                                      ^~~~~~~~~~~~
                                      filter_origin
./auth.h:120:8: note: 'filter_origin' declared here
    } *filter_origin;
       ^
auth.c:506:68: error: no member named 'filter_admin' in 'struct auth_tag'; did you mean 'filter_origin'?
        for (i = 0; i < (sizeof(auth->filter_admin)/sizeof(*(auth->filter_admin))); i++) {
                                                                   ^~~~~~~~~~~~
                                                                   filter_origin
./auth.h:120:8: note: 'filter_origin' declared here
    } *filter_origin;
       ^
auth.c:506:52: warning: 'sizeof (auth->filter_origin)' will return the size of the pointer, not the array itself [-Wsizeof-pointer-div]
        for (i = 0; i < (sizeof(auth->filter_admin)/sizeof(*(auth->filter_admin))); i++) {
                         ~~~~~~~~~~~~~~~~~~~~~~~~~~^
auth.c:507:23: error: no member named 'filter_admin' in 'struct auth_tag'; did you mean 'filter_origin'?
            if (auth->filter_admin[i].type != AUTH_MATCHTYPE_UNUSED && auth->filter_admin[i].command == client->admin_command) {
                      ^~~~~~~~~~~~
                      filter_origin
./auth.h:120:8: note: 'filter_origin' declared here
    } *filter_origin;
       ^
auth.c:507:78: error: no member named 'filter_admin' in 'struct auth_tag'
            if (auth->filter_admin[i].type != AUTH_MATCHTYPE_UNUSED && auth->filter_admin[i].command == client->admin_command) {
                                                                       ~~~~  ^
auth.c:508:35: error: no member named 'filter_admin' in 'struct auth_tag'; did you mean 'filter_origin'?
                matchtype = auth->filter_admin[i].type;
                                  ^~~~~~~~~~~~
                                  filter_origin
./auth.h:120:8: note: 'filter_origin' declared here
    } *filter_origin;
       ^
auth.c:533:23: error: passing '_Ptr<auth_client>' (aka '_Ptr<struct auth_client_tag>') to parameter of incompatible type 'auth_client *' (aka 'struct auth_client_tag *')
    queue_auth_client(auth_user);
                      ^~~~~~~~~
auth.c:158:44: note: passing argument to parameter 'auth_user' here
static void queue_auth_client(auth_client *auth_user)
                                           ^
auth.c:526:17: warning: cannot prove argument meets declared bounds for 1st parameter [-Wcheck-bounds-decls-unchecked-scope]
    auth_addref(client->auth = auth);
                ^~~~~~~~~~~~~~~~~~~
auth.c:526:17: note: (expanded) expected argument bounds are 'bounds((_Array_ptr<auth_t>)client->auth = auth, (_Array_ptr<auth_t>)client->auth = auth + 1)'
auth.c:526:17: note: (expanded) inferred bounds are 'bounds((_Array_ptr<auth_t>)auth, (_Array_ptr<auth_t>)auth + 1)'
    auth_addref(client->auth = auth);
                ^~~~~~~~~~~~~~~~~~~
auth.c:458:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_WARN("too many clients awaiting authentication on auth %p", auth);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth.c:552:28: error: assigning to '_Ptr<auth_result (_Ptr<auth_t>, _Ptr<auth_client>)>' (aka '_Ptr<auth_result (_Ptr<struct auth_tag>, _Ptr<struct auth_client_tag>)>') from incompatible type 'auth_result (auth_t *, _Ptr<auth_client>)' (aka 'auth_result (struct auth_tag *, _Ptr<struct auth_client_tag>)'): type mismatch at 1st parameter ('_Ptr<auth_t>' (aka '_Ptr<struct auth_tag>') vs 'auth_t *' (aka 'struct auth_tag *'))
        auth_user->process = auth_remove_client;
                           ^ ~~~~~~~~~~~~~~~~~~
auth.c:554:27: error: passing '_Ptr<auth_client>' (aka '_Ptr<struct auth_client_tag>') to parameter of incompatible type 'auth_client *' (aka 'struct auth_client_tag *')
        queue_auth_client(auth_user);
                          ^~~~~~~~~
auth.c:158:44: note: passing argument to parameter 'auth_user' here
static void queue_auth_client(auth_client *auth_user)
                                           ^
auth.c:609:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("Unrecognised authenticator type: \"%s\"", auth->type);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth.c:571:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_WARN("no authentication type defined");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth.c:633:53: error: no member named 'filter_admin' in 'struct auth_tag'; did you mean 'filter_origin'?
            if (*filter_admin_index < (sizeof(auth->filter_admin)/sizeof(*(auth->filter_admin)))) {
                                                    ^~~~~~~~~~~~
                                                    filter_origin
./auth.h:120:8: note: 'filter_origin' declared here
    } *filter_origin;
       ^
auth.c:633:82: error: no member named 'filter_admin' in 'struct auth_tag'; did you mean 'filter_origin'?
            if (*filter_admin_index < (sizeof(auth->filter_admin)/sizeof(*(auth->filter_admin)))) {
                                                                                 ^~~~~~~~~~~~
                                                                                 filter_origin
./auth.h:120:8: note: 'filter_origin' declared here
    } *filter_origin;
       ^
auth.c:633:66: warning: 'sizeof (auth->filter_origin)' will return the size of the pointer, not the array itself [-Wsizeof-pointer-div]
            if (*filter_admin_index < (sizeof(auth->filter_admin)/sizeof(*(auth->filter_admin)))) {
                                       ~~~~~~~~~~~~~~~~~~~~~~~~~~^
auth.c:634:23: error: no member named 'filter_admin' in 'struct auth_tag'
                auth->filter_admin[*filter_admin_index].command = admin_get_command(cur);
                ~~~~  ^
auth.c:635:31: error: no member named 'filter_admin' in 'struct auth_tag'
                switch (auth->filter_admin[*filter_admin_index].command) {
                        ~~~~  ^
auth.c:643:31: error: no member named 'filter_admin' in 'struct auth_tag'; did you mean 'filter_origin'?
                        auth->filter_admin[*filter_admin_index].type = matchtype;
                              ^~~~~~~~~~~~
                              filter_origin
./auth.h:120:8: note: 'filter_origin' declared here
    } *filter_origin;
       ^
auth.c:648:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_ERROR("Can not add more %s commands to role.", name);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth.c:685:69: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
                auth->filter_origin[auth->filter_origin_len].origin = strdup(cur);
                                                                    ^ ~~~~~~~~~~~
auth.c:689:21: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                    ICECAST_LOG_ERROR("Can not allocate memory. BAD.");
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth.c:679:21: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                    ICECAST_LOG_ERROR("Can not allocate memory. BAD.");
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth.c:743:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_ERROR("Can not add known method \"%H\" to role's %s", cur, name);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth.c:783:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_ERROR("Can not add unknown alter action \"%H\" to role's %s", cur, name);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth.c:825:35: error: no member named 'filter_admin' in 'struct auth_tag'; did you mean 'filter_origin'?
    for (i = 0; i < (sizeof(auth->filter_admin)/sizeof(*(auth->filter_admin))); i++) {
                                  ^~~~~~~~~~~~
                                  filter_origin
./auth.h:120:8: note: 'filter_origin' declared here
    } *filter_origin;
       ^
auth.c:825:64: error: no member named 'filter_admin' in 'struct auth_tag'; did you mean 'filter_origin'?
    for (i = 0; i < (sizeof(auth->filter_admin)/sizeof(*(auth->filter_admin))); i++) {
                                                               ^~~~~~~~~~~~
                                                               filter_origin
./auth.h:120:8: note: 'filter_origin' declared here
    } *filter_origin;
       ^
auth.c:825:48: warning: 'sizeof (auth->filter_origin)' will return the size of the pointer, not the array itself [-Wsizeof-pointer-div]
    for (i = 0; i < (sizeof(auth->filter_admin)/sizeof(*(auth->filter_admin))); i++) {
                     ~~~~~~~~~~~~~~~~~~~~~~~~~~^
auth.c:826:15: error: no member named 'filter_admin' in 'struct auth_tag'; did you mean 'filter_origin'?
        auth->filter_admin[i].type = AUTH_MATCHTYPE_UNUSED;
              ^~~~~~~~~~~~
              filter_origin
./auth.h:120:8: note: 'filter_origin' declared here
    } *filter_origin;
       ^
auth.c:827:15: error: no member named 'filter_admin' in 'struct auth_tag'
        auth->filter_admin[i].command = ADMIN_COMMAND_ERROR;
        ~~~~  ^
auth.c:944:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_WARN("unknown auth setting (%H)", child->name);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth.c:941:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_ERROR("More than one ACL defined in role! Not supported (yet).");
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth.c:1037:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_INFO("Auth shutdown");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:50:33: note: expanded from macro 'ICECAST_LOG_INFO'
#define ICECAST_LOG_INFO(...)   ICECAST_LOG(ICECAST_LOGLEVEL_INFO,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth.c:1168:17: warning: cannot prove argument meets declared bounds for 1st parameter [-Wcheck-bounds-decls-unchecked-scope]
    auth_addref(auth = stack->auth);
                ^~~~~~~~~~~~~~~~~~
auth.c:1168:17: note: (expanded) expected argument bounds are 'bounds((_Array_ptr<auth_t>)auth = stack->auth, (_Array_ptr<auth_t>)auth = stack->auth + 1)'
auth.c:1168:17: note: (expanded) inferred bounds are 'bounds((_Array_ptr<auth_t>)stack->auth, (_Array_ptr<auth_t>)stack->auth + 1)'
    auth_addref(auth = stack->auth);
                ^~~~~~~~~~~~~~~~~~
8 warnings and 51 errors generated.
make[3]: [icecast-auth.o] Error 1 (ignored)
In file included from auth_htpasswd.c:29:
./auth.h:115:5: error: declaration of anonymous struct must be a definition
    struct (anonymous struct at /home/hasantouma/plum-umd-icecast/checkedc-icecast/src/auth.h:115:5) filter_admin[32];
    ^
./auth.h:115:118: error: type name requires a specifier or qualifier
    struct (anonymous struct at /home/hasantouma/plum-umd-icecast/checkedc-icecast/src/auth.h:115:5) filter_admin[32];
                                                                                                                     ^
In file included from auth_htpasswd.c:30:
In file included from ./source.h:25:
In file included from ./format.h:25:
In file included from ./client.h:23:
./common/httpp/encoding.h:61:117: error: expected ')'
ssize_t httpp_encoding_read(_Ptr<httpp_encoding_t> self, void* buf, size_t len, ssize_t (*)(void *, void *, size_t) cb : itype(_Ptr<ssize_t (void* , void* , size_t )> ) , void* userdata);
                                                                                                                    ^
./common/httpp/encoding.h:61:28: note: to match this '('
ssize_t httpp_encoding_read(_Ptr<httpp_encoding_t> self, void* buf, size_t len, ssize_t (*)(void *, void *, size_t) cb : itype(_Ptr<ssize_t (void* , void* , size_t )> ) , void* userdata);
                           ^
./common/httpp/encoding.h:66:69: error: expected ')'
int httpp_encoding_eof(_Ptr<httpp_encoding_t> self, int (*)(void *) cb : itype(_Ptr<int (void* )> ) , void* userdata);
                                                                    ^
./common/httpp/encoding.h:66:23: note: to match this '('
int httpp_encoding_eof(_Ptr<httpp_encoding_t> self, int (*)(void *) cb : itype(_Ptr<int (void* )> ) , void* userdata);
                      ^
In file included from auth_htpasswd.c:30:
In file included from ./source.h:25:
In file included from ./format.h:25:
In file included from ./client.h:28:
In file included from ./module.h:15:
./refobject.h:155:67: warning: declaration of 'struct __va_list_tag' will not be visible outside of this function [-Wvisibility]
    _Ptr<int (refobject_t , _Ptr<const refobject_type_t> , struct __va_list_tag* )> type_newcb;
                                                                  ^
In file included from auth_htpasswd.c:30:
In file included from ./source.h:25:
In file included from ./format.h:25:
./client.h:154:91: error: 'type name' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
int client_send_bytes(client_t *client : itype(_Ptr<client_t> ) , const void *buf : itype(_Nt_array_ptr<const void> ) , unsigned int len);
                                                                                          ^
./client.h:155:85: error: 'type name' declared as _Nt_array_ptr of type 'void'; only integer and pointer types are allowed
int client_read_bytes(client_t *client : itype(_Ptr<client_t> ) , void *buf : itype(_Nt_array_ptr<void> ) , unsigned int len);
                                                                                    ^
./client.h:157:88: error: 'type name' declared as _Nt_array_ptr of type 'void'; only integer and pointer types are allowed
ssize_t client_body_read(client_t *client : itype(_Ptr<client_t> ) , void *buf : itype(_Nt_array_ptr<void> ) , size_t len);
                                                                                       ^
auth_htpasswd.c:135:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_INFO("re-reading htpasswd file \"%s\"", htpasswd->filename);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:50:33: note: expanded from macro 'ICECAST_LOG_INFO'
#define ICECAST_LOG_INFO(...)   ICECAST_LOG(ICECAST_LOGLEVEL_INFO,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth_htpasswd.c:156:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_WARN("No separator on line %d (%s)", num, htpasswd->filename);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth_htpasswd.c:138:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_WARN("Failed to open authentication database \"%s\": %s",
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth_htpasswd.c:120:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_WARN("failed to check status of %s", htpasswd->filename);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth_htpasswd.c:215:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_DEBUG("no such username: %s", client->username);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth_htpasswd.c:202:38: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        _Ptr<htpasswd_user> found =  result;
                                     ^~~~~~
auth_htpasswd.c:212:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_DEBUG("incorrect password for client with username: %s", client->username);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth_htpasswd.c:195:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("No user list.");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth_htpasswd.c:189:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("No filename given in options for authenticator.");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth_htpasswd.c:245:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("No filename given in options for authenticator.");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth_htpasswd.c:242:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_INFO("Configured htpasswd authentication using password file \"%s\"",
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:50:33: note: expanded from macro 'ICECAST_LOG_INFO'
#define ICECAST_LOG_INFO(...)   ICECAST_LOG(ICECAST_LOGLEVEL_INFO,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth_htpasswd.c:289:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_WARN("Failed to open authentication database \"%s\": %s",
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth_htpasswd.c:273:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("No user list.");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth_htpasswd.c:266:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("No filename given in options for authenticator.");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth_htpasswd.c:312:25: error: automatic variable 'line' with bounds must have initializer
    _Nt_array_ptr<char> line;
                        ^
auth_htpasswd.c:366:13: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
        sep = strchr(line, ':');
            ^ ~~~~~~~~~~~~~~~~~
auth_htpasswd.c:392:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_ERROR("Problem moving temp authentication file to original \"%s\" - \"%s\": %s",
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth_htpasswd.c:388:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("Problem moving temp authentication file to original \"%s\" - \"%s\": %s",
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth_htpasswd.c:372:9: warning: out-of-bounds memory access [-Wcheck-memory-accesses]
        *sep = 0;
        ^~~~
auth_htpasswd.c:372:9: note: source bounds are an empty range
auth_htpasswd.c:372:9: note: accesses memory at or above the upper bound
auth_htpasswd.c:372:9: note: (expanded) inferred bounds are 'bounds(sep, sep + 0)'
auth_htpasswd.c:376:13: warning: out-of-bounds memory access [-Wcheck-memory-accesses]
            *sep = ':';
            ^~~~
auth_htpasswd.c:376:13: note: source bounds are an empty range
auth_htpasswd.c:376:13: note: accesses memory at or above the upper bound
auth_htpasswd.c:376:13: note: (expanded) inferred bounds are 'bounds(sep, sep + 0)'
auth_htpasswd.c:368:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_DEBUG("No separator in line");
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth_htpasswd.c:353:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_WARN("Failed to open temporary authentication database \"%s\": %s",
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth_htpasswd.c:343:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_WARN("temp file \"%s\" exists, rejecting operation", tmpfile);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth_htpasswd.c:334:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_WARN("Failed to open authentication database \"%s\": %s",
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth_htpasswd.c:326:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("No user list.");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth_htpasswd.c:321:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("No filename given in options for authenticator.");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth_htpasswd.c:420:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("No user list.");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth_htpasswd.c:413:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("No filename given in options for authenticator.");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
3 warnings and 33 errors generated.
make[3]: [icecast-auth_htpasswd.o] Error 1 (ignored)
In file included from auth_anonymous.c:17:
./auth.h:115:5: error: declaration of anonymous struct must be a definition
    struct (anonymous struct at /home/hasantouma/plum-umd-icecast/checkedc-icecast/src/auth.h:115:5) filter_admin[32];
    ^
./auth.h:115:118: error: type name requires a specifier or qualifier
    struct (anonymous struct at /home/hasantouma/plum-umd-icecast/checkedc-icecast/src/auth.h:115:5) filter_admin[32];
                                                                                                                     ^
In file included from auth_anonymous.c:18:
In file included from ./client.h:23:
./common/httpp/encoding.h:61:117: error: expected ')'
ssize_t httpp_encoding_read(_Ptr<httpp_encoding_t> self, void* buf, size_t len, ssize_t (*)(void *, void *, size_t) cb : itype(_Ptr<ssize_t (void* , void* , size_t )> ) , void* userdata);
                                                                                                                    ^
./common/httpp/encoding.h:61:28: note: to match this '('
ssize_t httpp_encoding_read(_Ptr<httpp_encoding_t> self, void* buf, size_t len, ssize_t (*)(void *, void *, size_t) cb : itype(_Ptr<ssize_t (void* , void* , size_t )> ) , void* userdata);
                           ^
./common/httpp/encoding.h:66:69: error: expected ')'
int httpp_encoding_eof(_Ptr<httpp_encoding_t> self, int (*)(void *) cb : itype(_Ptr<int (void* )> ) , void* userdata);
                                                                    ^
./common/httpp/encoding.h:66:23: note: to match this '('
int httpp_encoding_eof(_Ptr<httpp_encoding_t> self, int (*)(void *) cb : itype(_Ptr<int (void* )> ) , void* userdata);
                      ^
In file included from auth_anonymous.c:18:
In file included from ./client.h:28:
In file included from ./module.h:15:
./refobject.h:155:67: warning: declaration of 'struct __va_list_tag' will not be visible outside of this function [-Wvisibility]
    _Ptr<int (refobject_t , _Ptr<const refobject_type_t> , struct __va_list_tag* )> type_newcb;
                                                                  ^
In file included from auth_anonymous.c:18:
./client.h:154:91: error: 'type name' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
int client_send_bytes(client_t *client : itype(_Ptr<client_t> ) , const void *buf : itype(_Nt_array_ptr<const void> ) , unsigned int len);
                                                                                          ^
./client.h:155:85: error: 'type name' declared as _Nt_array_ptr of type 'void'; only integer and pointer types are allowed
int client_read_bytes(client_t *client : itype(_Ptr<client_t> ) , void *buf : itype(_Nt_array_ptr<void> ) , unsigned int len);
                                                                                    ^
./client.h:157:88: error: 'type name' declared as _Nt_array_ptr of type 'void'; only integer and pointer types are allowed
ssize_t client_body_read(client_t *client : itype(_Ptr<client_t> ) , void *buf : itype(_Nt_array_ptr<void> ) , size_t len);
                                                                                       ^
auth_anonymous.c:32:40: error: assigning to '_Ptr<auth_result (_Ptr<auth_client>)>' (aka '_Ptr<auth_result (_Ptr<struct auth_client_tag>)>') from incompatible type 'auth_result (auth_client *)' (aka 'auth_result (struct auth_client_tag *)'): type mismatch at 1st parameter ('_Ptr<auth_client>' (aka '_Ptr<struct auth_client_tag>') vs 'auth_client *' (aka 'struct auth_client_tag *'))
    authenticator->authenticate_client = anonymous_auth;
                                       ^ ~~~~~~~~~~~~~~
1 warning and 8 errors generated.
make[3]: [icecast-auth_anonymous.o] Error 1 (ignored)
In file included from auth_static.c:20:
./auth.h:115:5: error: declaration of anonymous struct must be a definition
    struct (anonymous struct at /home/hasantouma/plum-umd-icecast/checkedc-icecast/src/auth.h:115:5) filter_admin[32];
    ^
./auth.h:115:118: error: type name requires a specifier or qualifier
    struct (anonymous struct at /home/hasantouma/plum-umd-icecast/checkedc-icecast/src/auth.h:115:5) filter_admin[32];
                                                                                                                     ^
In file included from auth_static.c:22:
In file included from ./client.h:23:
./common/httpp/encoding.h:61:117: error: expected ')'
ssize_t httpp_encoding_read(_Ptr<httpp_encoding_t> self, void* buf, size_t len, ssize_t (*)(void *, void *, size_t) cb : itype(_Ptr<ssize_t (void* , void* , size_t )> ) , void* userdata);
                                                                                                                    ^
./common/httpp/encoding.h:61:28: note: to match this '('
ssize_t httpp_encoding_read(_Ptr<httpp_encoding_t> self, void* buf, size_t len, ssize_t (*)(void *, void *, size_t) cb : itype(_Ptr<ssize_t (void* , void* , size_t )> ) , void* userdata);
                           ^
./common/httpp/encoding.h:66:69: error: expected ')'
int httpp_encoding_eof(_Ptr<httpp_encoding_t> self, int (*)(void *) cb : itype(_Ptr<int (void* )> ) , void* userdata);
                                                                    ^
./common/httpp/encoding.h:66:23: note: to match this '('
int httpp_encoding_eof(_Ptr<httpp_encoding_t> self, int (*)(void *) cb : itype(_Ptr<int (void* )> ) , void* userdata);
                      ^
In file included from auth_static.c:22:
In file included from ./client.h:28:
In file included from ./module.h:15:
./refobject.h:155:67: warning: declaration of 'struct __va_list_tag' will not be visible outside of this function [-Wvisibility]
    _Ptr<int (refobject_t , _Ptr<const refobject_type_t> , struct __va_list_tag* )> type_newcb;
                                                                  ^
In file included from auth_static.c:22:
./client.h:154:91: error: 'type name' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
int client_send_bytes(client_t *client : itype(_Ptr<client_t> ) , const void *buf : itype(_Nt_array_ptr<const void> ) , unsigned int len);
                                                                                          ^
./client.h:155:85: error: 'type name' declared as _Nt_array_ptr of type 'void'; only integer and pointer types are allowed
int client_read_bytes(client_t *client : itype(_Ptr<client_t> ) , void *buf : itype(_Nt_array_ptr<void> ) , unsigned int len);
                                                                                    ^
./client.h:157:88: error: 'type name' declared as _Nt_array_ptr of type 'void'; only integer and pointer types are allowed
ssize_t client_body_read(client_t *client : itype(_Ptr<client_t> ) , void *buf : itype(_Nt_array_ptr<void> ) , size_t len);
                                                                                       ^
auth_static.c:57:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_ERROR("Can not alter client.");
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth_static.c:98:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("Unknown type.");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth_static.c:141:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("Password required, but not given.");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth_static.c:137:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("Username required, but not given.");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth_static.c:131:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_ERROR("Unknown option: %s", options->name);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth_static.c:124:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_ERROR("Invalid action given.");
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
1 warning and 13 errors generated.
make[3]: [icecast-auth_static.o] Error 1 (ignored)
In file included from auth_enforce_auth.c:17:
./auth.h:115:5: error: declaration of anonymous struct must be a definition
    struct (anonymous struct at /home/hasantouma/plum-umd-icecast/checkedc-icecast/src/auth.h:115:5) filter_admin[32];
    ^
./auth.h:115:118: error: type name requires a specifier or qualifier
    struct (anonymous struct at /home/hasantouma/plum-umd-icecast/checkedc-icecast/src/auth.h:115:5) filter_admin[32];
                                                                                                                     ^
In file included from auth_enforce_auth.c:18:
In file included from ./client.h:23:
./common/httpp/encoding.h:61:117: error: expected ')'
ssize_t httpp_encoding_read(_Ptr<httpp_encoding_t> self, void* buf, size_t len, ssize_t (*)(void *, void *, size_t) cb : itype(_Ptr<ssize_t (void* , void* , size_t )> ) , void* userdata);
                                                                                                                    ^
./common/httpp/encoding.h:61:28: note: to match this '('
ssize_t httpp_encoding_read(_Ptr<httpp_encoding_t> self, void* buf, size_t len, ssize_t (*)(void *, void *, size_t) cb : itype(_Ptr<ssize_t (void* , void* , size_t )> ) , void* userdata);
                           ^
./common/httpp/encoding.h:66:69: error: expected ')'
int httpp_encoding_eof(_Ptr<httpp_encoding_t> self, int (*)(void *) cb : itype(_Ptr<int (void* )> ) , void* userdata);
                                                                    ^
./common/httpp/encoding.h:66:23: note: to match this '('
int httpp_encoding_eof(_Ptr<httpp_encoding_t> self, int (*)(void *) cb : itype(_Ptr<int (void* )> ) , void* userdata);
                      ^
In file included from auth_enforce_auth.c:18:
In file included from ./client.h:28:
In file included from ./module.h:15:
./refobject.h:155:67: warning: declaration of 'struct __va_list_tag' will not be visible outside of this function [-Wvisibility]
    _Ptr<int (refobject_t , _Ptr<const refobject_type_t> , struct __va_list_tag* )> type_newcb;
                                                                  ^
In file included from auth_enforce_auth.c:18:
./client.h:154:91: error: 'type name' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
int client_send_bytes(client_t *client : itype(_Ptr<client_t> ) , const void *buf : itype(_Nt_array_ptr<const void> ) , unsigned int len);
                                                                                          ^
./client.h:155:85: error: 'type name' declared as _Nt_array_ptr of type 'void'; only integer and pointer types are allowed
int client_read_bytes(client_t *client : itype(_Ptr<client_t> ) , void *buf : itype(_Nt_array_ptr<void> ) , unsigned int len);
                                                                                    ^
./client.h:157:88: error: 'type name' declared as _Nt_array_ptr of type 'void'; only integer and pointer types are allowed
ssize_t client_body_read(client_t *client : itype(_Ptr<client_t> ) , void *buf : itype(_Nt_array_ptr<void> ) , size_t len);
                                                                                       ^
1 warning and 7 errors generated.
make[3]: [icecast-auth_enforce_auth.o] Error 1 (ignored)
In file included from auth_url.c:72:
./auth.h:115:5: error: declaration of anonymous struct must be a definition
    struct (anonymous struct at /home/hasantouma/plum-umd-icecast/checkedc-icecast/src/auth.h:115:5) filter_admin[32];
    ^
./auth.h:115:118: error: type name requires a specifier or qualifier
    struct (anonymous struct at /home/hasantouma/plum-umd-icecast/checkedc-icecast/src/auth.h:115:5) filter_admin[32];
                                                                                                                     ^
In file included from auth_url.c:73:
In file included from ./source.h:25:
In file included from ./format.h:25:
In file included from ./client.h:23:
./common/httpp/encoding.h:61:117: error: expected ')'
ssize_t httpp_encoding_read(_Ptr<httpp_encoding_t> self, void* buf, size_t len, ssize_t (*)(void *, void *, size_t) cb : itype(_Ptr<ssize_t (void* , void* , size_t )> ) , void* userdata);
                                                                                                                    ^
./common/httpp/encoding.h:61:28: note: to match this '('
ssize_t httpp_encoding_read(_Ptr<httpp_encoding_t> self, void* buf, size_t len, ssize_t (*)(void *, void *, size_t) cb : itype(_Ptr<ssize_t (void* , void* , size_t )> ) , void* userdata);
                           ^
./common/httpp/encoding.h:66:69: error: expected ')'
int httpp_encoding_eof(_Ptr<httpp_encoding_t> self, int (*)(void *) cb : itype(_Ptr<int (void* )> ) , void* userdata);
                                                                    ^
./common/httpp/encoding.h:66:23: note: to match this '('
int httpp_encoding_eof(_Ptr<httpp_encoding_t> self, int (*)(void *) cb : itype(_Ptr<int (void* )> ) , void* userdata);
                      ^
In file included from auth_url.c:73:
In file included from ./source.h:25:
In file included from ./format.h:25:
In file included from ./client.h:28:
In file included from ./module.h:15:
./refobject.h:155:67: warning: declaration of 'struct __va_list_tag' will not be visible outside of this function [-Wvisibility]
    _Ptr<int (refobject_t , _Ptr<const refobject_type_t> , struct __va_list_tag* )> type_newcb;
                                                                  ^
In file included from auth_url.c:73:
In file included from ./source.h:25:
In file included from ./format.h:25:
./client.h:154:91: error: 'type name' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
int client_send_bytes(client_t *client : itype(_Ptr<client_t> ) , const void *buf : itype(_Nt_array_ptr<const void> ) , unsigned int len);
                                                                                          ^
./client.h:155:85: error: 'type name' declared as _Nt_array_ptr of type 'void'; only integer and pointer types are allowed
int client_read_bytes(client_t *client : itype(_Ptr<client_t> ) , void *buf : itype(_Nt_array_ptr<void> ) , unsigned int len);
                                                                                    ^
./client.h:157:88: error: 'type name' declared as _Nt_array_ptr of type 'void'; only integer and pointer types are allowed
ssize_t client_body_read(client_t *client : itype(_Ptr<client_t> ) , void *buf : itype(_Nt_array_ptr<void> ) , size_t len);
                                                                                       ^
In file included from auth_url.c:76:
./connection.h:58:36: error: 'type name' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
    _Ptr<int (_Ptr<connection_t> , _Nt_array_ptr<const void> , size_t )> send;
                                   ^
./connection.h:81:55: error: 'buf' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
ssize_t connection_send_bytes(_Ptr<connection_t> con, _Nt_array_ptr<const void> buf, size_t len);
                                                      ^
auth_url.c:137:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_INFO("Doing auth URL cleanup");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:50:33: note: expanded from macro 'ICECAST_LOG_INFO'
#define ICECAST_LOG_INFO(...)   ICECAST_LOG(ICECAST_LOGLEVEL_INFO,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth_url.c:162:37: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    _Ptr<auth_user_url_t> au_url =  auth_user->authbackend_userdata;
                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
auth_url.c:197:9: error: assigning to '_Nt_array_ptr<const char>' from incompatible type 'const char *'
    tmp = httpp_getvar(au_url->parser, HTTPP_VAR_ERROR_CODE);
        ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
auth_url.c:209:44: error: passing '_Nt_array_ptr<char>' to parameter of incompatible type 'const char *'
        tmp = httpp_getvar(au_url->parser, url->header_auth);
                                           ^~~~~~~~~~~~~~~~
./common/httpp/httpp.h:133:66: note: passing argument to parameter 'name' here
const char *httpp_getvar(_Ptr<http_parser_t> parser, const char *name) : itype(_Nt_array_ptr<const char> ) ;
                                                                 ^
auth_url.c:211:43: error: passing '_Nt_array_ptr<const char>' to parameter of incompatible type 'const char *'
            url->result = auth_str2result(tmp);
                                          ^~~
./auth.h:177:41: note: passing argument to parameter 'str' here
auth_result auth_str2result(const char *str);
                                        ^
auth_url.c:216:44: error: passing '_Nt_array_ptr<char>' to parameter of incompatible type 'const char *'
        tmp = httpp_getvar(au_url->parser, url->header_timelimit);
                                           ^~~~~~~~~~~~~~~~~~~~~
./common/httpp/httpp.h:133:66: note: passing argument to parameter 'name' here
const char *httpp_getvar(_Ptr<http_parser_t> parser, const char *name) : itype(_Nt_array_ptr<const char> ) ;
                                                                 ^
auth_url.c:222:32: error: passing '_Ptr<char> *' to parameter of incompatible type 'char **'
            ret = strtoll(tmp, &endptr, 0);
                               ^~~~~~~
/home/hasantouma/building-checkedc-clang-plum/llvm.obj/lib/clang/8.0.0/include/stdlib_checked.h:55:40: note: passing argument to parameter 'endptr' here
                      char ** restrict endptr :
                                       ^
auth_url.c:232:14: error: assigning to '_Nt_array_ptr<const char>' from incompatible type 'const char *'
    argument = httpp_getvar(au_url->parser, __str_or_default(url->header_alter_argument, DEFAULT_HEADER_NEW_ALTER_ARGUMENT));
             ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
auth_url.c:243:44: error: passing '_Nt_array_ptr<char>' to parameter of incompatible type 'const char *'
        tmp = httpp_getvar(au_url->parser, url->header_message);
                                           ^~~~~~~~~~~~~~~~~~~
./common/httpp/httpp.h:133:66: note: passing argument to parameter 'name' here
const char *httpp_getvar(_Ptr<http_parser_t> parser, const char *name) : itype(_Nt_array_ptr<const char> ) ;
                                                                 ^
auth_url.c:245:13: error: assigning to '_Nt_array_ptr<const char>' from incompatible type 'const char *'
        tmp = httpp_getvar(au_url->parser, DEFAULT_HEADER_NEW_MESSAGE);
            ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
auth_url.c:247:17: error: assigning to '_Nt_array_ptr<const char>' from incompatible type 'const char *'
            tmp = httpp_getvar(au_url->parser, DEFAULT_HEADER_OLD_MESSAGE);
                ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
auth_url.c:177:37: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    _Ptr<auth_user_url_t> au_url =  auth_user->authbackend_userdata;
                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
auth_url.c:192:47: error: cast source bounds are too narrow for '_Ptr<const char>'
    if (!httpp_parse_response(au_url->parser, au_url->all_headers, au_url->all_headers_len, NULL)) {
                                              ^~~~~~~~~~~~~~~~~~~
auth_url.c:192:47: note: source bounds are an empty range
auth_url.c:192:47: note: target upper bound is above source upper bound
auth_url.c:192:47: note: (expanded) required bounds are 'bounds((_Array_ptr<const char>)au_url->all_headers, (_Array_ptr<const char>)au_url->all_headers + 1)'
auth_url.c:192:47: note: (expanded) inferred bounds are 'bounds(au_url->all_headers, au_url->all_headers + 0)'
auth_url.c:201:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_DEBUG("Got non-final status: %#H", tmp);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth_url.c:199:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_DEBUG("Got final status: %#H", tmp);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth_url.c:226:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_ERROR("Auth backend returned invalid new style timelimit header: % #H", tmp);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth_url.c:239:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("Auth backend returned incomplete alter action/argument.");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth_url.c:236:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_ERROR("Auth backend returned invalid alter action/argument.");
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth_url.c:250:18: error: argument does not meet declared bounds for 1st parameter
        snprintf(url->errormsg, sizeof(url->errormsg), "%s", tmp);
                 ^~~~~~~~~~~~~
auth_url.c:250:18: note: source bounds are an empty range
auth_url.c:250:18: note: destination upper bound is above source upper bound
auth_url.c:250:18: note: (expanded) expected argument bounds are 'bounds((char *)url->errormsg, (char *)url->errormsg + sizeof (url->errormsg) == 0 ? 0 : sizeof (url->errormsg) - 1)'
auth_url.c:250:18: note: (expanded) inferred bounds are 'bounds(url->errormsg, url->errormsg + 0)'
        snprintf(url->errormsg, sizeof(url->errormsg), "%s", tmp);
                 ^~~~~~~~~~~~~
auth_url.c:193:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("Can not parse auth backend reply.");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth_url.c:274:29: error: initializing '_Nt_array_ptr<char>' with an expression of incompatible type 'void *'
        _Nt_array_ptr<char> n =  realloc(au_url->all_headers, au_url->all_headers_len + len);
                            ^    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
auth_url.c:257:36: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    _Ptr<auth_client> auth_user =  stream;
                                   ^~~~~~
auth_url.c:283:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("Can not allocate authbackend_userdata. BAD.");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth_url.c:273:41: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        _Ptr<auth_user_url_t> au_url =  auth_user->authbackend_userdata;
                                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
auth_url.c:280:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_ERROR("Can not allocate buffer for auth backend reply headers. BAD.");
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth_url.c:286:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_DEBUG("Got header: %* #H", (int)(size * nmemb + 2), ptr);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth_url.c:305:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_ERROR("Auth backend returned invalid timelimit header.");
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth_url.c:302:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_ERROR("Auth backend returned invalid timeline header: Can not parse limit");
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth_url.c:340:21: error: automatic variable 'post' with bounds must have initializer
_Nt_array_ptr<char> post;
                    ^
auth_url.c:358:20: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
        user_agent = util_url_escape(agent);
                   ^ ~~~~~~~~~~~~~~~~~~~~~~
auth_url.c:360:20: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
        user_agent = strdup("-");
                   ^ ~~~~~~~~~~~
auth_url.c:364:18: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
        username = util_url_escape(client->username);
                 ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
auth_url.c:366:18: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
        username = strdup("");
                 ^ ~~~~~~~~~~
auth_url.c:370:18: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
        password = util_url_escape(client->password);
                 ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
auth_url.c:372:18: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
        password = strdup("");
                 ^ ~~~~~~~~~~
auth_url.c:410:25: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'void *'
                userpwd = malloc(len);
                        ^ ~~~~~~~~~~~
auth_url.c:352:14: error: cast source bounds are too narrow for '_Ptr<char>'
    server = util_url_escape(config->hostname);
             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
auth_url.c:352:14: note: source bounds are an empty range
auth_url.c:352:14: note: target upper bound is above source upper bound
auth_url.c:352:14: note: (expanded) required bounds are 'bounds((_Array_ptr<char>)util_url_escape(config->hostname), (_Array_ptr<char>)util_url_escape(config->hostname) + 1)'
auth_url.c:352:14: note: (expanded) inferred bounds are 'bounds(value of util_url_escape(config->hostname), value of util_url_escape(config->hostname) + 0)'
auth_url.c:379:13: error: cast source bounds are too narrow for '_Ptr<char>'
    mount = util_url_escape(mountreq);
            ^~~~~~~~~~~~~~~~~~~~~~~~~
auth_url.c:379:13: note: source bounds are an empty range
auth_url.c:379:13: note: target upper bound is above source upper bound
auth_url.c:379:13: note: (expanded) required bounds are 'bounds((_Array_ptr<char>)util_url_escape(mountreq), (_Array_ptr<char>)util_url_escape(mountreq) + 1)'
auth_url.c:379:13: note: (expanded) inferred bounds are 'bounds(value of util_url_escape(mountreq), value of util_url_escape(mountreq) + 0)'
auth_url.c:380:14: error: cast source bounds are too narrow for '_Ptr<char>'
    ipaddr = util_url_escape(client->con->ip);
             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
auth_url.c:380:14: note: source bounds are an empty range
auth_url.c:380:14: note: target upper bound is above source upper bound
auth_url.c:380:14: note: (expanded) required bounds are 'bounds((_Array_ptr<char>)util_url_escape(client->con->ip), (_Array_ptr<char>)util_url_escape(client->con->ip) + 1)'
auth_url.c:380:14: note: (expanded) inferred bounds are 'bounds(value of util_url_escape(client->con->ip), value of util_url_escape(client->con->ip) + 0)'
auth_url.c:382:20: error: argument does not meet declared bounds for 1st parameter
    ret = snprintf(post, sizeof(post),
                   ^~~~
auth_url.c:382:20: note: source bounds are an empty range
auth_url.c:382:20: note: destination upper bound is above source upper bound
auth_url.c:382:20: note: (expanded) expected argument bounds are 'bounds((char *)post, (char *)post + sizeof (post) == 0 ? 0 : sizeof (post) - 1)'
auth_url.c:382:20: note: (expanded) inferred bounds are 'bounds(post, post + 0)'
    ret = snprintf(post, sizeof(post),
                   ^~~~
auth_url.c:411:26: warning: cannot prove argument meets declared bounds for 1st parameter [-Wcheck-bounds-decls-unchecked-scope]
                snprintf(userpwd, len, "%s:%s",
                         ^~~~~~~
auth_url.c:411:26: note: (expanded) expected argument bounds are 'bounds((char *)userpwd, (char *)userpwd + len == 0 ? 0 : len - 1)'
auth_url.c:411:26: note: (expanded) inferred bounds are 'bounds(userpwd, userpwd + 0)'
                snprintf(userpwd, len, "%s:%s",
                         ^~~~~~~
auth_url.c:427:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_WARN("auth to server %s failed with %s",
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth_url.c:397:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("Authentication failed for client %p as header POST data is too long.", client);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth_url.c:456:21: error: automatic variable 'post' with bounds must have initializer
_Nt_array_ptr<char> post;
                    ^
auth_url.c:476:20: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
        user_agent = util_url_escape(agent);
                   ^ ~~~~~~~~~~~~~~~~~~~~~~
auth_url.c:478:20: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
        user_agent = strdup("-");
                   ^ ~~~~~~~~~~~
auth_url.c:482:18: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
        username = util_url_escape(client->username);
                 ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
auth_url.c:484:18: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
        username = strdup("");
                 ^ ~~~~~~~~~~
auth_url.c:488:18: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
        password = util_url_escape(client->password);
                 ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
auth_url.c:490:18: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
        password = strdup("");
                 ^ ~~~~~~~~~~
auth_url.c:523:22: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
        pass_headers = strdup(url->pass_headers);
                     ^ ~~~~~~~~~~~~~~~~~~~~~~~~~
auth_url.c:527:25: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
            next_header = strstr(cur_header, ",");
                        ^ ~~~~~~~~~~~~~~~~~~~~~~~
auth_url.c:533:56: error: passing '_Nt_array_ptr<char>' to parameter of incompatible type 'const char *'
            header_val = httpp_getvar (client->parser, cur_header);
                                                       ^~~~~~~~~~
./common/httpp/httpp.h:133:66: note: passing argument to parameter 'name' here
const char *httpp_getvar(_Ptr<http_parser_t> parser, const char *name) : itype(_Nt_array_ptr<const char> ) ;
                                                                 ^
auth_url.c:568:25: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'void *'
                userpwd = malloc (len);
                        ^ ~~~~~~~~~~~~
auth_url.c:470:14: error: cast source bounds are too narrow for '_Ptr<char>'
    server = util_url_escape(config->hostname);
             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
auth_url.c:470:14: note: source bounds are an empty range
auth_url.c:470:14: note: target upper bound is above source upper bound
auth_url.c:470:14: note: (expanded) required bounds are 'bounds((_Array_ptr<char>)util_url_escape(config->hostname), (_Array_ptr<char>)util_url_escape(config->hostname) + 1)'
auth_url.c:470:14: note: (expanded) inferred bounds are 'bounds(value of util_url_escape(config->hostname), value of util_url_escape(config->hostname) + 0)'
auth_url.c:497:13: error: cast source bounds are too narrow for '_Ptr<char>'
    mount = util_url_escape(mountreq);
            ^~~~~~~~~~~~~~~~~~~~~~~~~
auth_url.c:497:13: note: source bounds are an empty range
auth_url.c:497:13: note: target upper bound is above source upper bound
auth_url.c:497:13: note: (expanded) required bounds are 'bounds((_Array_ptr<char>)util_url_escape(mountreq), (_Array_ptr<char>)util_url_escape(mountreq) + 1)'
auth_url.c:497:13: note: (expanded) inferred bounds are 'bounds(value of util_url_escape(mountreq), value of util_url_escape(mountreq) + 0)'
auth_url.c:498:14: error: cast source bounds are too narrow for '_Ptr<char>'
    ipaddr = util_url_escape(client->con->ip);
             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
auth_url.c:498:14: note: source bounds are an empty range
auth_url.c:498:14: note: target upper bound is above source upper bound
auth_url.c:498:14: note: (expanded) required bounds are 'bounds((_Array_ptr<char>)util_url_escape(client->con->ip), (_Array_ptr<char>)util_url_escape(client->con->ip) + 1)'
auth_url.c:498:14: note: (expanded) inferred bounds are 'bounds(value of util_url_escape(client->con->ip), value of util_url_escape(client->con->ip) + 0)'
auth_url.c:500:28: error: argument does not meet declared bounds for 1st parameter
    post_offset = snprintf(post, sizeof (post),
                           ^~~~
auth_url.c:500:28: note: source bounds are an empty range
auth_url.c:500:28: note: destination upper bound is above source upper bound
auth_url.c:500:28: note: (expanded) expected argument bounds are 'bounds((char *)post, (char *)post + sizeof (post) == 0 ? 0 : sizeof (post) - 1)'
auth_url.c:500:28: note: (expanded) inferred bounds are 'bounds(post, post + 0)'
    post_offset = snprintf(post, sizeof (post),
                           ^~~~
auth_url.c:569:26: warning: cannot prove argument meets declared bounds for 1st parameter [-Wcheck-bounds-decls-unchecked-scope]
                snprintf(userpwd, len, "%s:%s",
                         ^~~~~~~
auth_url.c:569:26: note: (expanded) expected argument bounds are 'bounds((char *)userpwd, (char *)userpwd + len == 0 ? 0 : len - 1)'
auth_url.c:569:26: note: (expanded) inferred bounds are 'bounds(userpwd, userpwd + 0)'
                snprintf(userpwd, len, "%s:%s",
                         ^~~~~~~
auth_url.c:583:5: warning: out-of-bounds memory access [-Wcheck-memory-accesses]
    url->errormsg[0] = '\0';
    ^~~~~~~~~~~~~~~~
auth_url.c:583:5: note: source bounds are an empty range
auth_url.c:583:5: note: accesses memory at or above the upper bound
auth_url.c:583:5: note: (expanded) inferred bounds are 'bounds(url->errormsg, url->errormsg + 0)'
auth_url.c:598:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_INFO("client auth (%s) failed with \"%s\"",
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:50:33: note: expanded from macro 'ICECAST_LOG_INFO'
#define ICECAST_LOG_INFO(...)   ICECAST_LOG(ICECAST_LOGLEVEL_INFO,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth_url.c:592:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_WARN("auth to server %s failed with %s",
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth_url.c:529:17: warning: out-of-bounds memory access [-Wcheck-memory-accesses]
                *next_header=0;
                ^~~~~~~~~~~~
auth_url.c:529:17: note: source bounds are an empty range
auth_url.c:529:17: note: accesses memory at or above the upper bound
auth_url.c:529:17: note: (expanded) inferred bounds are 'bounds(next_header, next_header + 0)'
auth_url.c:538:33: error: cast source bounds are too narrow for '_Ptr<char>'
                header_valesc = util_url_escape (header_val);
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
auth_url.c:538:33: note: source bounds are an empty range
auth_url.c:538:33: note: target upper bound is above source upper bound
auth_url.c:538:33: note: (expanded) required bounds are 'bounds((_Array_ptr<char>)util_url_escape(header_val), (_Array_ptr<char>)util_url_escape(header_val) + 1)'
auth_url.c:538:33: note: (expanded) inferred bounds are 'bounds(value of util_url_escape(header_val), value of util_url_escape(header_val) + 0)'
auth_url.c:539:32: warning: cannot prove argument meets declared bounds for 1st parameter [-Wcheck-bounds-decls-unchecked-scope]
                ret = snprintf(post + post_offset,
                               ^~~~~~~~~~~~~~~~~~
auth_url.c:539:32: note: (expanded) expected argument bounds are 'bounds((char *)post + post_offset, (char *)post + post_offset + sizeof (post) - post_offset == 0 ? 0 : sizeof (post) - post_offset - 1)'
auth_url.c:539:32: note: (expanded) inferred bounds are 'bounds(post, post + 0)'
                ret = snprintf(post + post_offset,
                               ^~~~~~~~~~~~~~~~~~
auth_url.c:547:21: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                    ICECAST_LOG_ERROR("Authentication failed for client %p as header \"%H\" is too long.", client, cur_header);
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth_url.c:516:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("Authentication failed for client %p as header POST data is too long.", client);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth_url.c:694:31: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
        url_info->header_auth = strdup(DEFAULT_HEADER_NEW_RESULT);
                              ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
auth_url.c:701:36: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
        url_info->header_timelimit = strdup(DEFAULT_HEADER_NEW_TIMELIMIT);
                                   ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
auth_url.c:713:27: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'void *'
        url_info->userpwd = malloc(len);
                          ^ ~~~~~~~~~~~
auth_url.c:679:27: error: cast source bounds are too narrow for '_Ptr<char>'
    url_info->addaction = util_url_escape(addaction);
                          ^~~~~~~~~~~~~~~~~~~~~~~~~~
auth_url.c:679:27: note: source bounds are an empty range
auth_url.c:679:27: note: target upper bound is above source upper bound
auth_url.c:679:27: note: (expanded) required bounds are 'bounds((_Array_ptr<char>)util_url_escape(addaction), (_Array_ptr<char>)util_url_escape(addaction) + 1)'
auth_url.c:679:27: note: (expanded) inferred bounds are 'bounds(value of util_url_escape(addaction), value of util_url_escape(addaction) + 0)'
auth_url.c:680:30: error: cast source bounds are too narrow for '_Ptr<char>'
    url_info->removeaction = util_url_escape(removeaction);
                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
auth_url.c:680:30: note: source bounds are an empty range
auth_url.c:680:30: note: target upper bound is above source upper bound
auth_url.c:680:30: note: (expanded) required bounds are 'bounds((_Array_ptr<char>)util_url_escape(removeaction), (_Array_ptr<char>)util_url_escape(removeaction) + 1)'
auth_url.c:680:30: note: (expanded) inferred bounds are 'bounds(value of util_url_escape(removeaction), value of util_url_escape(removeaction) + 0)'
auth_url.c:682:47: error: cast source bounds are too narrow for '_Ptr<char>'
    url_info->handle = icecast_curl_new(NULL, &url_info->errormsg[0]);
                                              ^~~~~~~~~~~~~~~~~~~~~~
auth_url.c:682:47: note: source bounds are an empty range
auth_url.c:682:47: note: (expanded) required bounds are 'bounds((_Array_ptr<char>)&url_info->errormsg[0], (_Array_ptr<char>)&url_info->errormsg[0] + 1)'
auth_url.c:682:47: note: (expanded) inferred bounds are 'bounds(url_info->errormsg, url_info->errormsg + 0)'
auth_url.c:692:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_WARN("You do not have enabled old or new style auth option for auth status header. I will enable both. Please set \"header_auth\".");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth_url.c:690:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_WARN("You use old style auth option \"auth_header\". Please switch to new style option \"header_auth\".");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth_url.c:699:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_WARN("You do not have enabled old or new style auth option for auth timelimit header. I will enable both. Please set \"header_timelimit\".");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth_url.c:697:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_WARN("You use old style auth option \"timelimit_header\". Please switch to new style option \"header_timelimit\".");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth_url.c:714:18: warning: cannot prove argument meets declared bounds for 1st parameter [-Wcheck-bounds-decls-unchecked-scope]
        snprintf(url_info->userpwd, len, "%s:%s",
                 ^~~~~~~~~~~~~~~~~
auth_url.c:714:18: note: (expanded) expected argument bounds are 'bounds((char *)url_info->userpwd, (char *)url_info->userpwd + (size_t)len == 0 ? 0 : (size_t)len - 1)'
auth_url.c:714:18: note: (expanded) inferred bounds are 'bounds(url_info->userpwd, url_info->userpwd + 0)'
        snprintf(url_info->userpwd, len, "%s:%s",
                 ^~~~~~~~~~~~~~~~~
auth_url.c:718:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_INFO("URL based authentication setup");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:50:33: note: expanded from macro 'ICECAST_LOG_INFO'
#define ICECAST_LOG_INFO(...)   ICECAST_LOG(ICECAST_LOGLEVEL_INFO,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth_url.c:674:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_ERROR("Unknown option: %s", options->name);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
auth_url.c:671:34: error: cannot take address of member with bounds
            util_replace_string(&(url_info->header_alter_argument), options->value);
                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
note: member bounds declared here
auth_url.c:668:34: error: cannot take address of member with bounds
            util_replace_string(&(url_info->header_alter_action), options->value);
                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
note: member bounds declared here
auth_url.c:665:34: error: cannot take address of member with bounds
            util_replace_string(&(url_info->header_message), options->value);
                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~
note: member bounds declared here
auth_url.c:662:34: error: cannot take address of member with bounds
            util_replace_string(&(url_info->header_timelimit), options->value);
                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
note: member bounds declared here
auth_url.c:659:34: error: cannot take address of member with bounds
            util_replace_string(&(url_info->header_auth), options->value);
                                 ^~~~~~~~~~~~~~~~~~~~~~~
note: member bounds declared here
auth_url.c:649:34: error: cannot take address of member with bounds
            util_replace_string(&(url_info->removeurl), options->value);
                                 ^~~~~~~~~~~~~~~~~~~~~
note: member bounds declared here
auth_url.c:646:34: error: cannot take address of member with bounds
            util_replace_string(&(url_info->addurl), options->value);
                                 ^~~~~~~~~~~~~~~~~~
note: member bounds declared here
auth_url.c:644:34: error: cannot take address of member with bounds
            util_replace_string(&(url_info->prefix_headers), options->value);
                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~
note: member bounds declared here
auth_url.c:642:34: error: cannot take address of member with bounds
            util_replace_string(&(url_info->pass_headers), options->value);
                                 ^~~~~~~~~~~~~~~~~~~~~~~~
note: member bounds declared here
auth_url.c:640:34: error: cannot take address of member with bounds
            util_replace_string(&(url_info->password), options->value);
                                 ^~~~~~~~~~~~~~~~~~~~
note: member bounds declared here
auth_url.c:638:34: error: cannot take address of member with bounds
            util_replace_string(&(url_info->username), options->value);
                                 ^~~~~~~~~~~~~~~~~~~~
note: member bounds declared here
7 warnings and 94 errors generated.
make[3]: [icecast-auth_url.o] Error 1 (ignored)
event_url.c:48:25: error: automatic variable 'post' with bounds must have initializer
    _Nt_array_ptr<char> post;
                        ^
event_url.c:44:31: error: cast source bounds are too narrow for '_Ptr<event_url_t>' (aka '_Ptr<struct event_url>')
    _Ptr<event_url_t> self =  state;
                              ^~~~~
event_url.c:44:31: note: target upper bound is above source upper bound
event_url.c:44:31: note: (expanded) required bounds are 'bounds((_Array_ptr<event_url_t>)state, (_Array_ptr<event_url_t>)state + 1)'
event_url.c:44:31: note: (expanded) inferred bounds are 'bounds((_Array_ptr<char>)state, (_Array_ptr<char>)state + 1)'
event_url.c:66:15: error: argument does not meet declared bounds for 1st parameter
    snprintf (post, sizeof (post),
              ^~~~
event_url.c:66:15: note: source bounds are an empty range
event_url.c:66:15: note: destination upper bound is above source upper bound
event_url.c:66:15: note: (expanded) expected argument bounds are 'bounds((char *)post, (char *)post + sizeof (post) == 0 ? 0 : sizeof (post) - 1)'
event_url.c:66:15: note: (expanded) inferred bounds are 'bounds(post, post + 0)'
    snprintf (post, sizeof (post),
              ^~~~
event_url.c:90:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_WARN("auth to server %s failed with %s", self->url, self->errormsg);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
event_url.c:133:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_ERROR("Unknown <option> tag with name %s.", options->name);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
5 errors generated.
make[3]: [icecast-event_url.o] Error 1 (ignored)
In file included from yp.c:29:
In file included from ./source.h:25:
In file included from ./format.h:25:
In file included from ./client.h:23:
./common/httpp/encoding.h:61:117: error: expected ')'
ssize_t httpp_encoding_read(_Ptr<httpp_encoding_t> self, void* buf, size_t len, ssize_t (*)(void *, void *, size_t) cb : itype(_Ptr<ssize_t (void* , void* , size_t )> ) , void* userdata);
                                                                                                                    ^
./common/httpp/encoding.h:61:28: note: to match this '('
ssize_t httpp_encoding_read(_Ptr<httpp_encoding_t> self, void* buf, size_t len, ssize_t (*)(void *, void *, size_t) cb : itype(_Ptr<ssize_t (void* , void* , size_t )> ) , void* userdata);
                           ^
./common/httpp/encoding.h:66:69: error: expected ')'
int httpp_encoding_eof(_Ptr<httpp_encoding_t> self, int (*)(void *) cb : itype(_Ptr<int (void* )> ) , void* userdata);
                                                                    ^
./common/httpp/encoding.h:66:23: note: to match this '('
int httpp_encoding_eof(_Ptr<httpp_encoding_t> self, int (*)(void *) cb : itype(_Ptr<int (void* )> ) , void* userdata);
                      ^
In file included from yp.c:29:
In file included from ./source.h:25:
In file included from ./format.h:25:
In file included from ./client.h:28:
In file included from ./module.h:15:
./refobject.h:155:67: warning: declaration of 'struct __va_list_tag' will not be visible outside of this function [-Wvisibility]
    _Ptr<int (refobject_t , _Ptr<const refobject_type_t> , struct __va_list_tag* )> type_newcb;
                                                                  ^
In file included from yp.c:29:
In file included from ./source.h:25:
In file included from ./format.h:25:
./client.h:154:91: error: 'type name' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
int client_send_bytes(client_t *client : itype(_Ptr<client_t> ) , const void *buf : itype(_Nt_array_ptr<const void> ) , unsigned int len);
                                                                                          ^
./client.h:155:85: error: 'type name' declared as _Nt_array_ptr of type 'void'; only integer and pointer types are allowed
int client_read_bytes(client_t *client : itype(_Ptr<client_t> ) , void *buf : itype(_Nt_array_ptr<void> ) , unsigned int len);
                                                                                    ^
./client.h:157:88: error: 'type name' declared as _Nt_array_ptr of type 'void'; only integer and pointer types are allowed
ssize_t client_body_read(client_t *client : itype(_Ptr<client_t> ) , void *buf : itype(_Nt_array_ptr<void> ) , size_t len);
                                                                                       ^
yp.c:120:23: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'void *'
        yp->error_msg = calloc (1, len);
                      ^ ~~~~~~~~~~~~~~~
yp.c:109:26: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    _Ptr<ypdata_t> yp =  stream;
                         ^~~~~~
yp.c:143:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_DEBUG("server touch interval is %u", secs);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
yp.c:179:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_DEBUG("Removing YP server entry for %s", server->url);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
yp.c:195:25: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    if (server->mounts) ICECAST_LOG_WARN("active ypdata not freed");
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
yp.c:196:33: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    if (server->pending_mounts) ICECAST_LOG_WARN("pending ypdata not freed");
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
yp.c:249:31: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
            server->server_id = strdup ((char *)server_version);
                              ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
yp.c:250:25: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
            server->url = strdup (config->yp_url[i]);
                        ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~
yp.c:223:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_DEBUG("Updating YP configuration");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
yp.c:253:45: error: cast source bounds are too narrow for '_Ptr<const char>'
            server->curl = icecast_curl_new(server->url, &(server->curl_error[0]));
                                            ^~~~~~~~~~~
yp.c:253:45: note: source bounds are an empty range
yp.c:253:45: note: target upper bound is above source upper bound
yp.c:253:45: note: (expanded) required bounds are 'bounds((_Array_ptr<const char>)server->url, (_Array_ptr<const char>)server->url + 1)'
yp.c:253:45: note: (expanded) inferred bounds are 'bounds(server->url, server->url + 0)'
yp.c:266:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_INFO("Adding new YP server \"%s\" (timeout %ds, default interval %ds)",
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:50:33: note: expanded from macro 'ICECAST_LOG_INFO'
#define ICECAST_LOG_INFO(...)   ICECAST_LOG(ICECAST_LOGLEVEL_INFO,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
yp.c:318:27: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
            yp->error_msg = strdup ("no response from server");
                          ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
yp.c:343:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_DEBUG("YP %s at %s succeeded", cmd, server->url);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
yp.c:321:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_ERROR("YP %s on %s failed: %s", cmd, server->url, yp->error_msg);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
yp.c:336:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_INFO("YP %s on %s failed: %s", cmd, server->url, yp->error_msg);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:50:33: note: expanded from macro 'ICECAST_LOG_INFO'
#define ICECAST_LOG_INFO(...)   ICECAST_LOG(ICECAST_LOGLEVEL_INFO,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
yp.c:312:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_ERROR("connection to %s failed with \"%s\"", server->url, server->curl_error);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:48:33: note: expanded from macro 'ICECAST_LOG_ERROR'
#define ICECAST_LOG_ERROR(...)  ICECAST_LOG(ICECAST_LOGLEVEL_ERROR, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
yp.c:355:25: warning: cannot prove argument meets declared bounds for 1st parameter [-Wcheck-bounds-decls-unchecked-scope]
        ret = snprintf (s, len, "action=remove&sid=%s", yp->sid);
                        ^
yp.c:355:25: note: (expanded) expected argument bounds are 'bounds((char *)s, (char *)s + (size_t)len == 0 ? 0 : (size_t)len - 1)'
yp.c:355:25: note: (expanded) inferred bounds are 'bounds(s, s + 0)'
        ret = snprintf (s, len, "action=remove&sid=%s", yp->sid);
                        ^
yp.c:359:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_INFO("clearing up YP entry for %s", yp->mount);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:50:33: note: expanded from macro 'ICECAST_LOG_INFO'
#define ICECAST_LOG_INFO(...)   ICECAST_LOG(ICECAST_LOGLEVEL_INFO,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
yp.c:360:41: error: cast source bounds are too narrow for '_Ptr<char>'
        ret = send_to_yp ("remove", yp, s);
                                        ^
yp.c:360:41: note: source bounds are an empty range
yp.c:360:41: note: target upper bound is above source upper bound
yp.c:360:41: note: (expanded) required bounds are 'bounds((_Array_ptr<char>)s, (_Array_ptr<char>)s + 1)'
yp.c:360:41: note: (expanded) inferred bounds are 'bounds(s, s + 0)'
yp.c:380:13: error: cast source bounds are too narrow for '_Ptr<char>'
    admin = util_url_escape(config->admin);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
yp.c:380:13: note: source bounds are an empty range
yp.c:380:13: note: target upper bound is above source upper bound
yp.c:380:13: note: (expanded) required bounds are 'bounds((_Array_ptr<char>)util_url_escape(config->admin), (_Array_ptr<char>)util_url_escape(config->admin) + 1)'
yp.c:380:13: note: (expanded) inferred bounds are 'bounds(value of util_url_escape(config->admin), value of util_url_escape(config->admin) + 0)'
yp.c:417:21: warning: cannot prove argument meets declared bounds for 1st parameter [-Wcheck-bounds-decls-unchecked-scope]
    ret = snprintf (s, len, "action=add&admin=%s&sn=%s&genre=%s&cpswd=%s&desc="
                    ^
yp.c:417:21: note: (expanded) expected argument bounds are 'bounds((char *)s, (char *)s + (size_t)len == 0 ? 0 : (size_t)len - 1)'
yp.c:417:21: note: (expanded) inferred bounds are 'bounds(s, s + 0)'
    ret = snprintf (s, len, "action=add&admin=%s&sn=%s&genre=%s&cpswd=%s&desc="
                    ^
yp.c:427:34: error: cast source bounds are too narrow for '_Ptr<char>'
    ret = send_to_yp ("add", yp, s);
                                 ^
yp.c:427:34: note: source bounds are an empty range
yp.c:427:34: note: target upper bound is above source upper bound
yp.c:427:34: note: (expanded) required bounds are 'bounds((_Array_ptr<char>)s, (_Array_ptr<char>)s + 1)'
yp.c:427:34: note: (expanded) inferred bounds are 'bounds(s, s + 0)'
yp.c:488:21: warning: cannot prove argument meets declared bounds for 1st parameter [-Wcheck-bounds-decls-unchecked-scope]
    ret = snprintf (s, len, "action=touch&sid=%s&st=%s"
                    ^
yp.c:488:21: note: (expanded) expected argument bounds are 'bounds((char *)s, (char *)s + (size_t)len == 0 ? 0 : (size_t)len - 1)'
yp.c:488:21: note: (expanded) inferred bounds are 'bounds(s, s + 0)'
    ret = snprintf (s, len, "action=touch&sid=%s&st=%s"
                    ^
yp.c:495:34: error: cast source bounds are too narrow for '_Ptr<char>'
    if (send_to_yp ("touch", yp, s) == 0)
                                 ^
yp.c:495:34: note: source bounds are an empty range
yp.c:495:34: note: target upper bound is above source upper bound
yp.c:495:34: note: (expanded) required bounds are 'bounds((_Array_ptr<char>)s, (_Array_ptr<char>)s + 1)'
yp.c:495:34: note: (expanded) inferred bounds are 'bounds(s, s + 0)'
yp.c:519:18: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'void *'
        if ((tmp = realloc(s, len)) == NULL)
                 ^ ~~~~~~~~~~~~~~~
yp.c:556:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_DEBUG("skipping %s on %s", yp->mount, server->url);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
yp.c:584:19: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
        yp->mount = strdup (mount);
                  ^ ~~~~~~~~~~~~~~
yp.c:585:25: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
        yp->server_name = strdup ("");
                        ^ ~~~~~~~~~~~
yp.c:586:25: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
        yp->server_desc = strdup ("");
                        ^ ~~~~~~~~~~~
yp.c:587:26: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
        yp->server_genre = strdup ("");
                         ^ ~~~~~~~~~~~
yp.c:588:21: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
        yp->bitrate = strdup ("");
                    ^ ~~~~~~~~~~~
yp.c:589:25: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
        yp->server_type = strdup ("");
                        ^ ~~~~~~~~~~~
yp.c:590:30: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
        yp->cluster_password = strdup ("");
                             ^ ~~~~~~~~~~~
yp.c:591:17: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
        yp->url = strdup ("");
                ^ ~~~~~~~~~~~
yp.c:592:26: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
        yp->current_song = strdup ("");
                         ^ ~~~~~~~~~~~
yp.c:593:24: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
        yp->audio_info = strdup ("");
                       ^ ~~~~~~~~~~~
yp.c:594:21: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
        yp->subtype = strdup ("");
                    ^ ~~~~~~~~~~~
yp.c:614:26: error: cast source bounds are too narrow for '_Ptr<char>'
        yp->listen_url = util_url_escape (url);
                         ^~~~~~~~~~~~~~~~~~~~~
yp.c:614:26: note: source bounds are an empty range
yp.c:614:26: note: target upper bound is above source upper bound
yp.c:614:26: note: (expanded) required bounds are 'bounds((_Array_ptr<char>)util_url_escape(url), (_Array_ptr<char>)util_url_escape(url) + 1)'
yp.c:614:26: note: (expanded) inferred bounds are 'bounds(value of util_url_escape(url), value of util_url_escape(url) + 0)'
yp.c:655:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_DEBUG("Add pending yps %s", server->url);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
yp.c:669:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_DEBUG("Adding existing mount %s", source->mount);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
yp.c:638:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_DEBUG("YP server \"%s\"removed", server->url);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
yp.c:692:20: error: assigning to '_Ptr<struct ypdata_tag>' from incompatible type '_Ptr<struct ypdata_tag> *'; dereference with *
    server->mounts = server->pending_mounts;
                   ^ ~~~~~~~~~~~~~~~~~~~~~~
                     *
yp.c:703:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_DEBUG("%u YP entries added to %s", count, server->url);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
yp.c:718:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_DEBUG("removed %s from YP server %s", yp->mount, server->url);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
yp.c:732:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_INFO("YP update thread started");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:50:33: note: expanded from macro 'ICECAST_LOG_INFO'
#define ICECAST_LOG_INFO(...)   ICECAST_LOG(ICECAST_LOGLEVEL_INFO,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
yp.c:838:13: error: assigning to '_Nt_array_ptr<char>' from incompatible type 'char *'
    escaped = util_url_escape(info);
            ^ ~~~~~~~~~~~~~~~~~~~~~
yp.c:916:26: error: assigning to '_Ptr<struct ypdata_tag>' from incompatible type '_Ptr<struct ypdata_tag> *'; dereference with *
                yp->next = server->pending_mounts;
                         ^ ~~~~~~~~~~~~~~~~~~~~~~
                           *
yp.c:918:40: error: assigning to '_Ptr<struct ypdata_tag> *' from incompatible type '_Ptr<ypdata_t>' (aka '_Ptr<struct ypdata_tag>'); take the address with &
                server->pending_mounts = yp;
                                       ^ ~~
                                         &
yp.c:923:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_DEBUG("YP entry %s already exists", mount);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
yp.c:913:17: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
                ICECAST_LOG_DEBUG("Adding %s to %s", mount, server->url);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
yp.c:952:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_DEBUG("release %s on YP %s", mount, server->url);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
yp.c:1007:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_INFO("YP thread down");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:50:33: note: expanded from macro 'ICECAST_LOG_INFO'
#define ICECAST_LOG_INFO(...)   ICECAST_LOG(ICECAST_LOGLEVEL_INFO,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
4 warnings and 54 errors generated.
make[3]: [icecast-yp.o] Error 1 (ignored)
In file included from format_vorbis.c:28:
In file included from ./source.h:25:
In file included from ./format.h:25:
In file included from ./client.h:23:
./common/httpp/encoding.h:61:117: error: expected ')'
ssize_t httpp_encoding_read(_Ptr<httpp_encoding_t> self, void* buf, size_t len, ssize_t (*)(void *, void *, size_t) cb : itype(_Ptr<ssize_t (void* , void* , size_t )> ) , void* userdata);
                                                                                                                    ^
./common/httpp/encoding.h:61:28: note: to match this '('
ssize_t httpp_encoding_read(_Ptr<httpp_encoding_t> self, void* buf, size_t len, ssize_t (*)(void *, void *, size_t) cb : itype(_Ptr<ssize_t (void* , void* , size_t )> ) , void* userdata);
                           ^
./common/httpp/encoding.h:66:69: error: expected ')'
int httpp_encoding_eof(_Ptr<httpp_encoding_t> self, int (*)(void *) cb : itype(_Ptr<int (void* )> ) , void* userdata);
                                                                    ^
./common/httpp/encoding.h:66:23: note: to match this '('
int httpp_encoding_eof(_Ptr<httpp_encoding_t> self, int (*)(void *) cb : itype(_Ptr<int (void* )> ) , void* userdata);
                      ^
In file included from format_vorbis.c:28:
In file included from ./source.h:25:
In file included from ./format.h:25:
In file included from ./client.h:28:
In file included from ./module.h:15:
./refobject.h:155:67: warning: declaration of 'struct __va_list_tag' will not be visible outside of this function [-Wvisibility]
    _Ptr<int (refobject_t , _Ptr<const refobject_type_t> , struct __va_list_tag* )> type_newcb;
                                                                  ^
In file included from format_vorbis.c:28:
In file included from ./source.h:25:
In file included from ./format.h:25:
./client.h:154:91: error: 'type name' declared as _Nt_array_ptr of type 'const void'; only integer and pointer types are allowed
int client_send_bytes(client_t *client : itype(_Ptr<client_t> ) , const void *buf : itype(_Nt_array_ptr<const void> ) , unsigned int len);
                                                                                          ^
./client.h:155:85: error: 'type name' declared as _Nt_array_ptr of type 'void'; only integer and pointer types are allowed
int client_read_bytes(client_t *client : itype(_Ptr<client_t> ) , void *buf : itype(_Nt_array_ptr<void> ) , unsigned int len);
                                                                                    ^
./client.h:157:88: error: 'type name' declared as _Nt_array_ptr of type 'void'; only integer and pointer types are allowed
ssize_t client_body_read(client_t *client : itype(_Ptr<client_t> ) , void *buf : itype(_Nt_array_ptr<void> ) , size_t len);
                                                                                       ^
format_vorbis.c:84:36: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    _Ptr<vorbis_codec_t> vorbis =  codec->specific;
                                   ^~~~~~~~~~~~~~~
format_vorbis.c:86:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_DEBUG("freeing vorbis codec");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
format_vorbis.c:147:43: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    _Ptr<vorbis_codec_t> source_vorbis =  codec->specific;
                                          ^~~~~~~~~~~~~~~
format_vorbis.c:169:43: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    _Ptr<vorbis_codec_t> source_vorbis =  codec->specific;
                                          ^~~~~~~~~~~~~~~
format_vorbis.c:186:43: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    _Ptr<vorbis_codec_t> source_vorbis =  codec->specific;
                                          ^~~~~~~~~~~~~~~
format_vorbis.c:196:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_DEBUG("flushing page");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
format_vorbis.c:224:42: error: passing '_Ptr<ogg_packet>' to parameter of incompatible type 'ogg_packet *'
        add_audio_packet (source_vorbis, source_vorbis->prev_packet);
                                         ^~~~~~~~~~~~~~~~~~~~~~~~~~
format_vorbis.c:125:78: note: passing argument to parameter 'packet' here
static void add_audio_packet(_Ptr<vorbis_codec_t> source_vorbis, ogg_packet *packet)
                                                                             ^
format_vorbis.c:222:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_DEBUG("adding EOS packet");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
format_vorbis.c:257:46: error: passing '_Ptr<ogg_packet>' to parameter of incompatible type 'ogg_packet *'
            add_audio_packet (source_vorbis, prev_packet);
                                             ^~~~~~~~~~~
format_vorbis.c:125:78: note: passing argument to parameter 'packet' here
static void add_audio_packet(_Ptr<vorbis_codec_t> source_vorbis, ogg_packet *packet)
                                                                             ^
format_vorbis.c:238:43: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    _Ptr<vorbis_codec_t> source_vorbis =  codec->specific;
                                          ^~~~~~~~~~~~~~~
format_vorbis.c:314:43: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    _Ptr<vorbis_codec_t> source_vorbis =  codec->specific;
                                          ^~~~~~~~~~~~~~~
format_vorbis.c:319:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_DEBUG("Adding the 3 header packets");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
format_vorbis.c:380:21: error: assigning to 'void *' from incompatible type '_Ptr<vorbis_codec_t>' (aka '_Ptr<struct vorbis_codec_tag>')
    codec->specific = vorbis;
                    ^ ~~~~~~
format_vorbis.c:394:21: error: assigning to '_Ptr<void (_Ptr<struct _format_plugin_tag>, _Nt_array_ptr<const char> : count(0), _Nt_array_ptr<const char> : count(0), _Ptr<const char>)>' from incompatible type 'void (_Ptr<format_plugin_t>, _Nt_array_ptr<const char> : count(0), const char * : count(0) itype(_Nt_array_ptr<const char>), const char * : itype(_Ptr<const char>))' (aka 'void (_Ptr<struct _format_plugin_tag>, _Nt_array_ptr<const char> : count(0), const char * : count(0) itype(_Nt_array_ptr<const char>), const char * : itype(_Ptr<const char>))'): type mismatch at 3rd parameter ('_Nt_array_ptr<const char>' vs 'const char *')
    plugin->set_tag = vorbis_set_tag;
                    ^ ~~~~~~~~~~~~~~
format_vorbis.c:369:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_DEBUG("checking for vorbis codec");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
format_vorbis.c:379:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_INFO("seen initial vorbis header");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:50:33: note: expanded from macro 'ICECAST_LOG_INFO'
#define ICECAST_LOG_INFO(...)   ICECAST_LOG(ICECAST_LOGLEVEL_INFO,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
format_vorbis.c:441:38: error: passing '_Nt_array_ptr<const char>' to parameter of incompatible type 'const char *'
    format_set_vorbiscomment(plugin, tag, value);
                                     ^~~
./format.h:78:73: note: passing argument to parameter 'tag' here
void format_set_vorbiscomment(_Ptr<format_plugin_t> plugin, const char *tag, const char *value);
                                                                        ^
format_vorbis.c:414:35: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    _Ptr<ogg_state_t> ogg_info =  plugin->_state;
                                  ^~~~~~~~~~~~~~
format_vorbis.c:419:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_WARN("Not officially supported metadata update detected, please inform the source client software vendor that they should fix their software!");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
format_vorbis.c:423:25: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        source_vorbis = codec->specific;
                        ^~~~~~~~~~~~~~~
format_vorbis.c:451:43: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    _Ptr<vorbis_codec_t> source_vorbis =  codec->specific;
                                          ^~~~~~~~~~~~~~~
format_vorbis.c:486:43: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    _Ptr<vorbis_codec_t> source_vorbis =  codec->specific;
                                          ^~~~~~~~~~~~~~~
format_vorbis.c:525:5: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
    ICECAST_LOG_DEBUG("we have the header packets now");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
format_vorbis.c:506:9: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
        ICECAST_LOG_DEBUG("processing incoming header packet (%d)", codec->headers);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:51:33: note: expanded from macro 'ICECAST_LOG_DEBUG'
#define ICECAST_LOG_DEBUG(...)  ICECAST_LOG(ICECAST_LOGLEVEL_DEBUG, ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
format_vorbis.c:518:13: error: expression has unknown bounds, cast to ptr<T> expects source to have bounds
            ICECAST_LOG_WARN("Problem parsing ogg vorbis header");
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:49:33: note: expanded from macro 'ICECAST_LOG_WARN'
#define ICECAST_LOG_WARN(...)   ICECAST_LOG(ICECAST_LOGLEVEL_WARN,  ICECAST_LOGFLAG_NONE, __VA_ARGS__)
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./logging.h:46:82: note: expanded from macro 'ICECAST_LOG'
#define ICECAST_LOG(level,flags,...) log_write(errorlog, (level), CATMODULE "/", __func__, __VA_ARGS__)
                                                                                 ^~~~~~~~
1 warning and 30 errors generated.
make[3]: [icecast-format_vorbis.o] Error 1 (ignored)
make[3]: *** No rule to make target 'common/net/libicenet.la', needed by 'icecast'.  Stop.
make[2]: [all-recursive] Error 1 (ignored)
